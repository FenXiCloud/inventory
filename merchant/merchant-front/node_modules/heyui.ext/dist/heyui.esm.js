/**
  * heyui.ext - UI Toolkit for Web, Vue3.0.夏悸增强bug修复扩展版本
  *
  * @version v2.3.9
  * @homepage https://fenxi365.com
  * @copyright Copyright © 2017-present Lan
  * @license MIT
  */

import { openBlock as a, createElementBlock as h, createElementVNode as m, normalizeClass as S, normalizeStyle as D, renderSlot as N, toDisplayString as _, Fragment as O, renderList as E, createCommentVNode as k, resolveComponent as L, withModifiers as B, createVNode as I, createBlock as A, createTextVNode as F, withDirectives as W, vShow as Q, withKeys as re, vModelText as oe, withCtx as z, mergeProps as Z, nextTick as $s, normalizeProps as Hi, guardReactiveProps as Fi, Teleport as Ft, Transition as ut, h as Ke, createApp as Vs, resolveDirective as Ds } from "vue";
const V = (e, t) => {
  const i = e.__vccOpts || e;
  for (const [l, n] of t)
    i[l] = n;
  return i;
}, Gt = "h-affix", Es = {
  name: "HAffix",
  emits: ["change"],
  props: {
    offsetTop: Number,
    offsetBottom: Number,
    container: Function,
    fixedOffsetTop: Number,
    fixedOffsetBottom: Number,
    disabled: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      isFixed: !1,
      fixPosition: "top",
      containerDom: null,
      isAbsolute: !!this.container && !this.disabled,
      y: 0
    };
  },
  computed: {
    cFixedOffsetTop() {
      return this.fixedOffsetTop || this.offsetTop;
    },
    cFixedOffsetBottom() {
      return this.fixedOffsetBottom || this.offsetBottom;
    },
    affixCls() {
      return {
        [Gt]: this.isFixed,
        [`${Gt}-absolute`]: this.isAbsolute
      };
    },
    affixStyle() {
      let e = {};
      return this.isFixed && (this.fixPosition == "top" ? e.top = `${this.cFixedOffsetTop}px` : e.bottom = `${this.cFixedOffsetBottom}px`), this.isAbsolute && (this.fixPosition == "top" ? e.top = `${this.offsetTop}px` : e.bottom = `${this.offsetBottom}px`), e;
    }
  },
  watch: {
    offsetTop() {
      this.refresh();
    },
    offsetBottom() {
      this.refresh();
    },
    fixedOffsetTop() {
      this.refresh();
    },
    fixedOffsetBottom() {
      this.refresh();
    },
    disabled() {
      this.disabled ? (this.isFixed = !1, this.isAbsolute = !1) : this.refresh();
    }
  },
  mounted() {
    this.$nextTick(() => {
      this.container && (this.containerDom = this.container.call()), window.addEventListener("scroll", this.trigger, !0), window.addEventListener("resize", this.trigger), this.refresh();
    });
  },
  beforeUnmount() {
    window.removeEventListener("scroll", this.trigger, !0), window.removeEventListener("resize", this.trigger);
  },
  methods: {
    refresh() {
      let e = document.createEvent("HTMLEvents");
      e.initEvent("scroll", !0, !0), document.body.dispatchEvent(e);
    },
    trigger(e) {
      if (this.disabled)
        return;
      let t = this.$el.firstChild;
      if (e.target == t)
        return !1;
      let i = this.isFixed;
      if (this.containerDom) {
        let l = t.getBoundingClientRect(), n = this.containerDom.getBoundingClientRect();
        this.y = n.top, n.top <= this.cFixedOffsetTop - this.offsetTop && n.bottom >= l.height + this.cFixedOffsetTop + this.cFixedOffsetBottom ? (this.isFixed = !0, this.isAbsolute = !1, this.fixPosition = "top") : n.top > this.cFixedOffsetTop - this.offsetTop || n.height < l.height ? (this.isFixed = !1, this.isAbsolute = !0, this.fixPosition = "top") : n.bottom < l.height + this.cFixedOffsetTop + this.cFixedOffsetBottom && (this.isFixed = !1, this.isAbsolute = !0, this.fixPosition = "bottom"), i != this.isFixed && this.$emit("change", this.isFixed);
      } else {
        if (this.isFixed) {
          if (t.parentNode) {
            let l = t.parentNode.getBoundingClientRect();
            this.offsetTop !== void 0 && this.fixPosition == "top" && l.top > this.offsetTop && (this.isFixed = !1), this.isFixed && this.offsetBottom != null && this.fixPosition == "bottom" && window.innerHeight > l.top + t.clientHeight + this.offsetBottom && (this.isFixed = !1);
          }
        } else {
          let l = t.getBoundingClientRect();
          this.offsetTop !== void 0 && l.top < this.offsetTop && (this.isFixed = !0, this.fixPosition = "top"), !this.isFixed && this.offsetBottom != null && window.innerHeight < l.top + t.clientHeight + this.offsetBottom && (this.isFixed = !0, this.fixPosition = "bottom");
        }
        i != this.isFixed && this.$emit("change", this.isFixed);
      }
    }
  }
};
function Ms(e, t, i, l, n, s) {
  return a(), h("div", null, [
    m("div", {
      class: S(s.affixCls),
      style: D(s.affixStyle)
    }, [
      N(e.$slots, "default")
    ], 6)
  ]);
}
const js = /* @__PURE__ */ V(Es, [["render", Ms]]);
function Ls(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var Pi = { exports: {} };
(function(e, t) {
  (function(i, l) {
    e.exports = l();
  })(window, function() {
    return function(i) {
      var l = {};
      function n(s) {
        if (l[s])
          return l[s].exports;
        var r = l[s] = { i: s, l: !1, exports: {} };
        return i[s].call(r.exports, r, r.exports, n), r.l = !0, r.exports;
      }
      return n.m = i, n.c = l, n.d = function(s, r, o) {
        n.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: o });
      }, n.r = function(s) {
        typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(s, "__esModule", { value: !0 });
      }, n.t = function(s, r) {
        if (1 & r && (s = n(s)), 8 & r || 4 & r && typeof s == "object" && s && s.__esModule)
          return s;
        var o = /* @__PURE__ */ Object.create(null);
        if (n.r(o), Object.defineProperty(o, "default", { enumerable: !0, value: s }), 2 & r && typeof s != "string")
          for (var c in s)
            n.d(o, c, function(u) {
              return s[u];
            }.bind(null, c));
        return o;
      }, n.n = function(s) {
        var r = s && s.__esModule ? function() {
          return s.default;
        } : function() {
          return s;
        };
        return n.d(r, "a", r), r;
      }, n.o = function(s, r) {
        return Object.prototype.hasOwnProperty.call(s, r);
      }, n.p = "", n(n.s = 0);
    }([function(i, l, n) {
      i.exports = n(1);
    }, function(i, l, n) {
      var s = n(2);
      Object.defineProperty(l, "__esModule", { value: !0 }), l.default = void 0;
      var r = s(n(3)), o = { isObject: function(u) {
        return Object.prototype.toString.call(u) === "[object Object]";
      }, isArray: function(u) {
        return u instanceof Array || Object.prototype.toString.call(u) === "[object Array]";
      }, isDate: function(u) {
        return u instanceof Date || Object.prototype.toString.call(u) === "[object Date]";
      }, isNumber: function(u) {
        return u instanceof Number || Object.prototype.toString.call(u) === "[object Number]";
      }, isString: function(u) {
        return u instanceof String || Object.prototype.toString.call(u) === "[object String]";
      }, isBoolean: function(u) {
        return typeof u == "boolean";
      }, isFunction: function(u) {
        return typeof u == "function";
      }, isNull: function(u) {
        return u == null;
      }, isPlainObject: function(u) {
        if (u && Object.prototype.toString.call(u) === "[object Object]" && u.constructor === Object && !hasOwnProperty.call(u, "constructor")) {
          var y;
          for (y in u)
            ;
          return y === void 0 || hasOwnProperty.call(u, y);
        }
        return !1;
      }, extend: function() {
        var u, y, g, p, w, b, d = arguments[0] || {}, v = 1, T = arguments.length, C = !1;
        for (typeof d == "boolean" && (C = d, d = arguments[1] || {}, v = 2), (0, r.default)(d) === "object" || this.isFunction(d) || (d = {}), T === v && (d = this, --v); v < T; v++)
          if ((u = arguments[v]) != null)
            for (y in u)
              (g = d[y]) !== (p = u[y]) && (C && p && (this.isPlainObject(p) || (w = this.isArray(p))) ? (w ? (w = !1, b = g && this.isArray(g) ? g : []) : b = g && this.isPlainObject(g) ? g : {}, d[y] = this.extend(C, b, p)) : p !== void 0 && (d[y] = p));
        return d;
      }, freeze: function(u) {
        var y = this, g = this;
        return Object.freeze(u), Object.keys(u).forEach(function(p, w) {
          g.isObject(u[p]) && y.freeze(u[p]);
        }), u;
      }, copy: function(u) {
        var y = null;
        if (this.isObject(u))
          for (var g in y = {}, u)
            y[g] = this.copy(u[g]);
        else if (this.isArray(u)) {
          y = [];
          var p = !0, w = !1, b = void 0;
          try {
            for (var d, v = u[Symbol.iterator](); !(p = (d = v.next()).done); p = !0) {
              var T = d.value;
              y.push(this.copy(T));
            }
          } catch (C) {
            w = !0, b = C;
          } finally {
            try {
              p || v.return == null || v.return();
            } finally {
              if (w)
                throw b;
            }
          }
        } else
          y = u;
        return y;
      }, getKeyValue: function(u, y) {
        if (!this.isObject(u))
          return null;
        var g = null;
        if (this.isArray(y) ? g = y : this.isString(y) && (g = y.split(".")), g == null || g.length == 0)
          return null;
        var p = null, w = g.shift(), b = w.match(new RegExp("^(\\w+)\\[(\\d+)\\]$"));
        if (b) {
          w = b[1];
          var d = b[2];
          p = u[w], this.isArray(p) && p.length > d && (p = p[d]);
        } else
          p = u[w];
        return g.length > 0 ? this.getKeyValue(p, g) : p;
      }, setKeyValue: function(u, y, g, p) {
        if (!this.isObject(u))
          return !1;
        var w = null;
        if (this.isArray(y) ? w = y : this.isString(y) && (w = y.split("."), p = u), w == null || w.length == 0)
          return !1;
        var b = null, d = 0, v = w.shift(), T = v.match(new RegExp("^(\\w+)\\[(\\d+)\\]$"));
        if (T) {
          if (v = T[1], d = T[2], b = u[v], this.isArray(b) && b.length > d) {
            if (w.length > 0)
              return this.setKeyValue(b[d], w, g, p);
            b[d] = g;
          }
        } else {
          if (w.length > 0)
            return this.setKeyValue(u[v], w, g, p);
          u[v] = g;
        }
        return p;
      }, toArray: function(u, y, g) {
        var p = "";
        if (!this.isObject(u))
          return [];
        this.isString(g) && (p = g);
        var w = [];
        for (var b in u) {
          var d = u[b], v = {};
          this.isObject(d) ? v = d : v[p] = d, y && (v[y] = b), w.push(v);
        }
        return w;
      }, toObject: function(u) {
        for (var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "id", g = arguments.length > 2 && arguments[2] !== void 0 && arguments[2], p = {}, w = 0; w < u.length; w++) {
          var b = u[w];
          this.isObject(b) ? y == "count" ? p[w] = b : (p[b[y]] = b, g && (p[b[y]].count = w)) : p[b] = b;
        }
        return p;
      }, saveLocal: function(u, y) {
        return !!(window.localStorage && JSON && u) && ((0, r.default)(y) == "object" && (y = JSON.stringify(y)), window.localStorage.setItem(u, y), !0);
      }, getLocal: function(u, y) {
        if (window.localStorage && JSON && u) {
          var g = window.localStorage.getItem(u);
          if (!y || y != "json" || this.isNull(g))
            return g;
          try {
            return JSON.parse(g);
          } catch (p) {
            return console.error("\u53D6\u6570\u8F6C\u6362json\u9519\u8BEF".concat(p)), "";
          }
        }
        return null;
      }, getLocal2Json: function(u) {
        return this.getLocal(u, "json");
      }, removeLocal: function(u) {
        return window.localStorage && JSON && u && window.localStorage.removeItem(u), null;
      }, saveCookie: function(u, y, g, p, w) {
        var b = !!navigator.cookieEnabled;
        if (u && b) {
          var d;
          p = p || "/", (0, r.default)(y) == "object" && (y = JSON.stringify(y)), w ? (d = new Date()).setTime(d.getTime() + 1e3 * w) : d = new Date("9998-01-01");
          var v = "".concat(u, "=").concat(escape(y)).concat(w ? ";expires=".concat(d.toGMTString()) : "", ";path=").concat(p, ";");
          return g && (v += "domain=".concat(g, ";")), document.cookie = v, !0;
        }
        return !1;
      }, getCookie: function(u) {
        var y = !!navigator.cookieEnabled;
        if (u && y) {
          var g = document.cookie.match(new RegExp("(^| )".concat(u, "=([^;]*)(;|$)")));
          if (g !== null)
            return unescape(g[2]);
        }
        return null;
      }, clearCookie: function(u, y) {
        var g = document.cookie.match(/[^ =;]+(?=\=)/g);
        if (y = y || "/", g)
          for (var p = g.length; p--; ) {
            var w = "".concat(g[p], "=0;expires=").concat(new Date(0).toUTCString(), ";path=").concat(y, ";");
            u && (w += "domain=".concat(u, ";")), document.cookie = w;
          }
      }, removeCookie: function(u, y, g) {
        var p = !!navigator.cookieEnabled;
        if (u && p) {
          g = g || "/";
          var w = "".concat(u, "=0;expires=").concat(new Date(0).toUTCString(), ";path=").concat(g, ";");
          return y && (w += "domain=".concat(y, ";")), document.cookie = w, !0;
        }
        return !1;
      }, dictMapping: function(u) {
        var y = this, g = u.value, p = u.dict, w = u.connector, b = u.keyField, d = b === void 0 ? "key" : b, v = u.titleField, T = v === void 0 ? "value" : v;
        return !p || this.isNull(g) ? "" : (w && (g = g.split(w)), !this.isNull(g) && g !== "" && p && (this.isArray(g) || (g = [g])), g.length <= 0 ? "" : (this.isArray(p) && (p = this.toObject(p, d)), g.map(function(C) {
          if (y.isObject(C))
            return C[T];
          var M = p[C];
          return y.isObject(M) ? M[T] : M;
        }).filter(function(C) {
          return C && C !== "";
        }).join(", ")));
      }, uuid: function() {
        var u = function() {
          return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
        };
        return u() + u() + "-" + u() + "-" + u() + "-" + u() + "-" + u() + u() + u();
      }, padLeft: function(u, y) {
        var g = "00000" + u;
        return g.substr(g.length - y);
      }, toggleValue: function(u, y) {
        if (!this.isArray(u))
          return [y];
        var g = u.filter(function(p) {
          return p == y;
        });
        g.length > 0 ? u.splice(u.indexOf(g[0]), 1) : u.push(y);
      }, toSimpleArray: function(u, y) {
        var g = [];
        if (this.isObject(u))
          for (var p = 0, w = Object.keys(u); p < w.length; p++) {
            var b = w[p];
            g.push(u[b][y]);
          }
        if (this.isArray(u)) {
          var d = !0, v = !1, T = void 0;
          try {
            for (var C, M = u[Symbol.iterator](); !(d = (C = M.next()).done); d = !0) {
              var ie = C.value;
              g.push(ie[y]);
            }
          } catch (ue) {
            v = !0, T = ue;
          } finally {
            try {
              d || M.return == null || M.return();
            } finally {
              if (v)
                throw T;
            }
          }
        }
        return g;
      }, getURLParam: function(u, y) {
        return decodeURIComponent((new RegExp("[?|&]".concat(u, "=") + "([^&;]+?)(&|#|;|$)").exec(y || location.search) || [!0, ""])[1].replace(/\+/g, "%20")) || null;
      }, getAuthor: function() {
        var u = this.getURLParam("author", window.location.search) || this.getLocal("window_author");
        return u && this.saveLocal("window_author", u), u;
      }, add: function(u, y) {
        var g = u.toString(), p = y.toString(), w = g.split("."), b = p.split("."), d = w.length == 2 ? w[1] : "", v = b.length == 2 ? b[1] : "", T = Math.max(d.length, v.length), C = Math.pow(10, T);
        return Number(((g * C + p * C) / C).toFixed(T));
      }, sub: function(u, y) {
        return this.add(u, -y);
      }, mul: function(u, y) {
        var g = 0, p = u.toString(), w = y.toString();
        try {
          g += p.split(".")[1].length;
        } catch {
        }
        try {
          g += w.split(".")[1].length;
        } catch {
        }
        return Number(p.replace(".", "")) * Number(w.replace(".", "")) / Math.pow(10, g);
      }, div: function(u, y) {
        var g = 0, p = 0;
        try {
          g = u.toString().split(".")[1].length;
        } catch {
        }
        try {
          p = y.toString().split(".")[1].length;
        } catch {
        }
        var w = Number(u.toString().replace(".", "")), b = Number(y.toString().replace(".", ""));
        return this.mul(w / b, Math.pow(10, p - g));
      } };
      o.valueForKeypath = o.getKeyValue, o.setValueForKeypath = o.setKeyValue;
      var c = o;
      l.default = c;
    }, function(i, l) {
      i.exports = function(n) {
        return n && n.__esModule ? n : { default: n };
      };
    }, function(i, l) {
      function n(r) {
        return (n = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(o) {
          return typeof o;
        } : function(o) {
          return o && typeof Symbol == "function" && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
        })(r);
      }
      function s(r) {
        return typeof Symbol == "function" && n(Symbol.iterator) === "symbol" ? i.exports = s = function(o) {
          return n(o);
        } : i.exports = s = function(o) {
          return o && typeof Symbol == "function" && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : n(o);
        }, s(r);
      }
      i.exports = s;
    }]).default;
  });
})(Pi);
const j = /* @__PURE__ */ Ls(Pi.exports), pt = /[\t\r\n\f]/g, Jt = /\S+/g;
function gt(e) {
  return e.getAttribute && e.getAttribute("class") || "";
}
const f = j.extend({}, j, {
  addClass(e, t) {
    let i, l, n, s, r, o;
    if (typeof t == "string" && t && (i = t.match(Jt) || [], n = gt(e), l = e.nodeType === 1 && ` ${n} `.replace(pt, " "), l)) {
      for (r = 0; s = i[r++]; )
        l.indexOf(` ${s} `) < 0 && (l += `${s} `);
      o = l.trim(), n !== o && e.setAttribute("class", o);
    }
  },
  removeClass(e, t) {
    let i, l, n, s, r, o;
    if (typeof t == "string" && t && (i = t.match(Jt) || [], n = gt(e), l = e.nodeType === 1 && ` ${n} `.replace(pt, " "), l)) {
      for (r = 0; s = i[r++]; )
        for (; l.indexOf(` ${s} `) > -1; )
          l = l.replace(` ${s} `, " ");
      o = l.trim(), n !== o && e.setAttribute("class", o);
    }
    return this;
  },
  removeDom(e) {
    e && e.parentNode && e.parentNode.removeChild(e);
  },
  padLeft(e, t) {
    let i = `00000${e}`;
    return i.substr(i.length - t);
  },
  hasClass(e, t) {
    let i;
    return i = ` ${t} `, e.nodeType === 1 && ` ${gt(e)} `.replace(pt, " ").indexOf(i) > -1;
  },
  initParam(e, t, i) {
    if (this.isArray(i) && this.isObject(e) && this.isObject(e))
      for (let l of i)
        t[l] && (e[l] = t[l]);
    return e;
  },
  toggleValue(e, t) {
    if (!this.isArray(e))
      return [t];
    let i = this.extend([], e), l = e.filter((n) => n == t);
    return l.length > 0 ? i.splice(e.indexOf(l[0]), 1) : i.push(t), i;
  },
  toggleValueByKey(e, t, i) {
    if (!this.isArray(e))
      return;
    let l = e.findIndex((n) => n[t] === i.key);
    l != -1 ? e.splice(l, 1) : e.push(i);
  },
  getArray(e, t = "id") {
    const i = [];
    for (let l of e)
      i.push(l[t]);
    return i;
  },
  numList(e, t, i) {
    let l = [];
    for (let n = e; n < t; n = n + i)
      l.push(n);
    return l;
  },
  generateTree(e, t) {
    if (!this.isArray(e))
      return console.error("[HeyUI Error] GenerateTree Error\uFF1AData must be array\u3002"), null;
    let i = [], l = this.toObject(e, t.keyName);
    for (let n of e) {
      let s = n[t.parentName], r = !1;
      if (!j.isNull(s)) {
        let o = [s];
        j.isArray(s) && (o = s);
        for (let c of o)
          if (!j.isNull(l[c])) {
            r = !0;
            let u = l[c];
            j.isArray(u[t.childrenName]) || (u[t.childrenName] = []), u[t.childrenName].push(n);
          }
      }
      (j.isNull(s) || !r) && i.push(n);
    }
    return i;
  },
  isBlank(e) {
    return this.isNull(e) || e === "";
  },
  getValue(e, t) {
    let i = "", l = null;
    return j.isObject(e) ? (i = e[t.titleName], l = e[t.keyName]) : (i = e, l = e), {
      key: l,
      title: i,
      value: e
    };
  }
}), Se = {
  dict: {
    keyName: "key",
    titleName: "title",
    dicts: {}
  },
  tree: {
    configs: {},
    default: {
      titleName: "title",
      keyName: "key",
      parentName: "parent",
      childrenName: "children"
    }
  },
  category: {
    configs: {},
    default: {
      titleName: "title",
      keyName: "key",
      parentName: "parent",
      childrenName: "children"
    }
  },
  categoryPicker: {
    configs: {},
    default: {
      titleName: "title",
      keyName: "key",
      parentName: "parent",
      childrenName: "children"
    }
  },
  cascader: {
    configs: {},
    default: {
      titleName: "title",
      keyName: "key",
      parentName: "parent",
      childrenName: "children"
    }
  },
  menu: {
    titleName: "title",
    keyName: "key",
    childrenName: "children"
  },
  autocomplete: {
    configs: {},
    default: {
      maxLength: 20,
      delay: 100,
      loadData: null,
      minWord: 0,
      titleName: "title",
      keyName: "key",
      render: null
    }
  },
  modal: {
    hasDivider: !1
  },
  page: {
    small: !1,
    size: 10,
    sizes: [10, 20, 50, 100],
    layout: "total,pager,jumper,sizes",
    onChangeSize() {
    },
    init() {
    },
    onChange() {
    }
  },
  avatar: {
    handleSrc(e) {
      return e;
    }
  },
  datepicker: {
    startWeek: 1,
    clearable: !0,
    format: {
      date: "YYYY-MM-DD",
      month: "YYYY-MM",
      year: "YYYY",
      time: "HH:mm",
      datetime: "YYYY-MM-DD HH:mm",
      datehour: "YYYY-MM-DD HH:mm",
      datetimesecond: "YYYY-MM-DD HH:mm:ss"
    },
    shortcuts: {
      today: {
        title: "\u4ECA\u5929",
        value() {
          return new Date();
        }
      },
      yesterday: {
        title: "\u6628\u5929",
        value() {
          const e = new Date();
          return e.setTime(e.getTime() - 3600 * 1e3 * 24), e;
        }
      }
    },
    datetimeOptions: {
      minuteStep: 5
    },
    daterangeOptions: {
      paramName: {
        start: "start",
        end: "end"
      }
    }
  },
  select: {
    deletable: !0
  }
}, $ = {
  getDict(e) {
    const t = Se.dict.dicts[e];
    return t || (console.error(`[HeyUI] Config: There is no dictionary named ${e}`), []);
  },
  getOption(e, t) {
    let i = `${e}`;
    f.isNull(t) || (i = `${e}.${t}`);
    const l = f.getKeyValue(Se, `${i}`);
    return f.isNull(l) ? (console.error(`[HeyUI] Config: There is no dictionary named ${i}`), null) : l;
  },
  config(e, t) {
    if (f.isNull(e))
      return !1;
    let i = f.getKeyValue(Se, e);
    return f.isObject(i) && f.isObject(t) ? f.extend(i, t) : f.setKeyValue(Se, e, t), !0;
  },
  initDict(e) {
    Object.assign(Se.dict.dicts, e);
  },
  addDict(e, t) {
    Se.dict.dicts[e] = t;
  },
  dictMapping(e, t, i) {
    let l = this.getDict(t);
    if (!l || f.isNull(e) || e === "")
      return "";
    f.isString(e) && i && (e = e.split(i)), f.isArray(e) || (e = [e]);
    const n = this.getOption("dict", "keyName"), s = this.getOption("dict", "titleName");
    return f.isArray(l) && (l = f.toObject(l, n)), e.map((o) => {
      if (f.isObject(o))
        return o[s];
      const c = l[o];
      return f.isObject(c) ? c[s] : c;
    }).filter((o) => o && o !== "").join(i || ", ");
  },
  initOptions(e) {
    let t = this.getOption("dict.keyName"), i = this.getOption("dict.titleName"), l = [];
    if (f.isObject(e))
      l = f.toArray(e, t, i);
    else if (f.isArray(e))
      if (e.length == 0)
        l = [];
      else {
        let n = e[0];
        f.isObject(n) ? l = f.copy(e) : l = e.map((s) => ({
          [`${t}`]: s,
          [`${i}`]: s
        }));
      }
    return l;
  }
}, As = {
  name: "HAvatar",
  emits: ["avatarClick"],
  props: {
    shape: {
      type: String,
      default: "circle"
    },
    src: String,
    width: {
      type: Number,
      default: 50
    },
    distance: {
      type: Number,
      default: 15
    },
    imageTop: Number,
    type: String,
    noInfo: {
      type: Boolean,
      default: !1
    },
    fit: String
  },
  emits: ["avatarClick"],
  computed: {
    imageStyle() {
      return this.src ? {
        "background-image": `url(${$.getOption("avatar").handleSrc.call(this, this.src)})`
      } : {};
    },
    avatarClass() {
      return {
        [`h-avatar-type-${this.type}`]: !!this.type,
        [`h-avatar-shape-${this.shape}`]: !!this.shape,
        ["h-avatar-no-info"]: this.noInfo,
        [`h-avatar-fit-${this.fit}`]: !!this.fit
      };
    },
    avatarStyle() {
      let e = {};
      return this.noInfo && (e = {
        width: `${this.width}px`,
        height: `${this.width}px`
      }), e;
    },
    avatarImageClass() {
      return this.imageTop ? {} : {
        "h-avatar-middle": !0
      };
    },
    avatarImageStyle() {
      let e = {
        width: `${this.width}px`,
        height: `${this.width}px`
      };
      return this.imageTop && (e.top = `${this.imageTop}px`), e;
    },
    infoStyle() {
      return {
        "padding-left": `${this.width + this.distance}px`,
        "min-height": `${this.width}px`
      };
    }
  },
  methods: {
    click(e) {
      this.$emit("avatarClick", e);
    }
  }
};
function Bs(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(["h-avatar", s.avatarClass]),
    style: D(s.avatarStyle)
  }, [
    m("div", {
      style: D(s.avatarImageStyle),
      class: S([s.avatarImageClass, "h-avatar-image-container"]),
      onClick: t[0] || (t[0] = (...r) => s.click && s.click(...r))
    }, [
      m("div", {
        class: "h-avatar-image",
        style: D(s.imageStyle)
      }, null, 4)
    ], 6),
    m("div", {
      class: "h-avatar-info",
      style: D(s.infoStyle)
    }, [
      N(e.$slots, "default")
    ], 4)
  ], 6);
}
const Is = /* @__PURE__ */ V(As, [["render", Bs]]), Qt = "h-backtop", Hs = {
  name: "HBackTop",
  emits: ["backTop"],
  props: {
    target: {
      type: Function,
      default: () => window.document
    },
    bottom: {
      type: Number,
      default: 50
    },
    right: {
      type: Number,
      default: 50
    },
    className: {
      type: String,
      default: "h-backtop-default"
    }
  },
  data() {
    return {
      show: !1,
      timeout: null
    };
  },
  computed: {
    backtopCls() {
      return {
        [`${Qt}`]: !0,
        [`${Qt}-show`]: this.show,
        [this.className]: !!this.className
      };
    },
    backtopStyle() {
      return {
        bottom: `${this.bottom}px`,
        right: `${this.right}px`
      };
    }
  },
  watch: {
    show() {
      this.$el.style.display = "block";
    }
  },
  mounted() {
    this.$nextTick(() => {
      let e = this.target();
      e && e.addEventListener("scroll", () => {
        e.scrollTop > 300 ? this.show = !0 : this.show = !1;
      }), this.$el.addEventListener("webkitAnimationEnd", () => {
        this.$el.style.display = this.show ? "block" : "none";
      });
    });
  },
  methods: {
    backtop() {
      if (this.timeout)
        return;
      let e = this.target();
      e && this.scrollTop(e, (e.scrollHeight - e.offsetHeight) / 10), this.$emit("backTop");
    },
    scrollTop(e, t) {
      this.timeout = setTimeout(() => {
        e.scrollTop > t ? (e.scrollTop -= t, this.scrollTop(e, t * 0.9)) : (e.scrollTop = 0, this.timeout = null);
      }, 5);
    }
  }
}, Fs = {
  key: 0,
  class: "h-icon-top"
};
function Ps(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.backtopCls),
    style: D(s.backtopStyle)
  }, [
    m("div", {
      class: "h-backtop-inner",
      onClick: t[0] || (t[0] = (...r) => s.backtop && s.backtop(...r))
    }, [
      e.$slots.default ? N(e.$slots, "default", { key: 1 }) : (a(), h("i", Fs))
    ])
  ], 6);
}
const Ws = /* @__PURE__ */ V(Hs, [["render", Ps]]), Ae = "h-badge", Rs = {
  position: ["right", "left"]
}, Us = {
  name: "HBadge",
  props: {
    count: {
      type: Number,
      default: 0
    },
    maxCount: {
      type: Number,
      default: 100
    },
    showZero: {
      type: Boolean,
      default: !1
    },
    dot: {
      type: Boolean,
      default: !1
    },
    position: {
      type: String,
      validator(e) {
        return Rs.position.indexOf(e) != -1;
      }
    }
  },
  data() {
    return {};
  },
  computed: {
    showCount() {
      return this.dot ? "" : this.count > this.maxCount ? `${this.maxCount}+` : this.count;
    },
    badgeCls() {
      return {
        [`${Ae}`]: !0,
        [`${Ae}-position-right`]: this.position == "right"
      };
    },
    badgeCountCls() {
      return {
        [`${Ae}-count`]: !0,
        [`${Ae}-count-show`]: this.count > 0 || this.showZero,
        [`${Ae}-count-dot`]: this.dot
      };
    }
  },
  methods: {}
};
function zs(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.badgeCls)
  }, [
    m("sup", {
      class: S(s.badgeCountCls)
    }, _(s.showCount), 3),
    N(e.$slots, "default")
  ], 2);
}
const Wi = /* @__PURE__ */ V(Us, [["render", zs]]), Ys = {
  name: "HBreadcrumb",
  emits: ["clickItem"],
  props: {
    datas: {
      Array,
      default: () => ({})
    },
    separator: {
      type: String,
      default: "/"
    },
    selfControl: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {};
  },
  mounted() {
  },
  methods: {
    trigger(e) {
      !this.selfControl && e.route && this.$router && this.$router.push(e.route), this.$emit("clickItem", e);
    }
  }
}, qs = { class: "h-breadcrumb" }, Ks = {
  key: 0,
  class: "h-breadcrumb-item-separator"
}, Xs = ["onClick"], Gs = { class: "h-breadcrumb-item-word" };
function Js(e, t, i, l, n, s) {
  return a(), h("div", qs, [
    (a(!0), h(O, null, E(i.datas, (r, o) => (a(), h("span", {
      key: r.title,
      class: "h-breadcrumb-item"
    }, [
      o > 0 ? (a(), h("span", Ks, _(i.separator), 1)) : k("", !0),
      m("span", {
        class: S(["h-breadcrumb-item-title", { "h-breadcrumb-item-link": r.route, "h-breadcrumb-item-current": o == i.datas.length - 1 }]),
        onClick: (c) => s.trigger(r, o)
      }, [
        r.icon ? (a(), h("i", {
          key: 0,
          class: S([r.icon, "h-breadcrumb-item-icon"])
        }, null, 2)) : k("", !0),
        m("span", Gs, _(r.title), 1)
      ], 10, Xs)
    ]))), 128))
  ]);
}
const Qs = /* @__PURE__ */ V(Ys, [["render", Js]]), Ri = {
  h: {
    locale: "zh-CN",
    common: {
      cancel: "\u53D6\u6D88",
      confirm: "\u786E\u5B9A",
      clear: "\u6E05\u9664",
      placeholder: "\u8BF7\u9009\u62E9",
      empty: "\u7A7A",
      any: "\u4E0D\u9650"
    },
    confirm: {
      title: "\u63D0\u793A"
    },
    checkbox: {
      limitSize: "\u60A8\u6700\u591A\u53EF\u4EE5\u9009\u62E9{limitSize}\u4E2A\u9009\u9879"
    },
    select: {
      nullOptionText: "\u8BF7\u9009\u62E9",
      emptyContent: "\u672A\u641C\u7D22\u5230\u76F8\u5173\u6570\u636E",
      placeholder: "\u8BF7\u9009\u62E9",
      searchPlaceHolder: "\u8BF7\u8F93\u5165\u7B5B\u9009\u6587\u672C",
      limitSize: "\u60A8\u6700\u591A\u53EF\u4EE5\u9009\u62E9{limitSize}\u4E2A\u9009\u9879"
    },
    category: {
      placeholder: "\u8BF7\u9009\u62E9"
    },
    cascader: {
      placeholder: "\u8BF7\u9009\u62E9"
    },
    categoryModal: {
      limitWords: "\u60A8\u6700\u591A\u53EF\u4EE5\u9009\u62E9{size}\u6761\u6570\u636E\u3002",
      emptyContent: "\u672A\u641C\u7D22\u5230\u76F8\u5173\u6570\u636E",
      total: "\u5168\u90E8"
    },
    categoryPicker: {
      limitWords: "\u60A8\u6700\u591A\u53EF\u4EE5\u9009\u62E9{size}\u6761\u6570\u636E\u3002",
      emptyContent: "\u672A\u641C\u7D22\u5230\u76F8\u5173\u6570\u636E",
      total: "\u5168\u90E8",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    autoComplate: {
      placeholder: "\u8BF7\u8F93\u5165",
      emptyContent: "\u672A\u641C\u7D22\u5230\u76F8\u5173\u6570\u636E"
    },
    validation: {
      base: {
        required: "\u4E0D\u80FD\u4E3A\u7A7A",
        maxLen: "\u6587\u5B57\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7{value}\u4E2A\u5B57",
        minLen: "\u6587\u5B57\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E{value}\u4E2A\u5B57",
        max: "\u4E0D\u80FD\u5927\u4E8E{value}",
        min: "\u4E0D\u80FD\u5C0F\u4E8E{value}"
      },
      type: {
        int: "\u4E0D\u662F\u6B63\u786E\u7684\u6574\u6570\u683C\u5F0F",
        number: "\u4E0D\u662F\u6B63\u786E\u7684\u6570\u5B57\u683C\u5F0F",
        email: "\u4E0D\u662F\u6B63\u786E\u7684\u90AE\u7BB1\u683C\u5F0F",
        url: "\u4E0D\u662F\u6B63\u786E\u7684\u7F51\u5740\u683C\u5F0F",
        tel: "\u4E0D\u662F\u6B63\u786E\u7684\u7535\u8BDD\u53F7\u7801\u683C\u5F0F",
        mobile: "\u4E0D\u662F\u6B63\u786E\u7684\u624B\u673A\u53F7\u7801\u683C\u5F0F",
        globalmobile: "\u4E0D\u662F\u6B63\u786E\u7684\u56FD\u9645\u53F7\u7801\u683C\u5F0F"
      }
    },
    date: {
      today: "\u4ECA\u5929",
      yesterday: "\u6628\u5929",
      year: "\u5E74",
      month: "\u6708",
      week: "\u5468",
      quarter: "\u5B63",
      day: "\u65E5",
      header: {
        year: "\u5E74",
        month: "\u6708",
        day: "\u65E5"
      },
      show: {
        week: "{year}\u5E74 \u7B2C{weeknum}\u5468 {daystart} \u81F3 {dayend}",
        weekInput: "{year}\u5E74 \u7B2C{week}\u5468",
        quarter: "{year}\u5E74 \u7B2C{quarter}\u5B63\u5EA6"
      },
      months: {
        january: "\u4E00\u6708",
        february: "\u4E8C\u6708",
        march: "\u4E09\u6708",
        april: "\u56DB\u6708",
        may: "\u4E94\u6708",
        june: "\u516D\u6708",
        july: "\u4E03\u6708",
        august: "\u516B\u6708",
        september: "\u4E5D\u6708",
        october: "\u5341\u6708",
        november: "\u5341\u4E00",
        december: "\u5341\u4E8C"
      },
      weeks: {
        monday: "\u4E00",
        tuesday: "\u4E8C",
        wednesday: "\u4E09",
        thursday: "\u56DB",
        friday: "\u4E94",
        saturday: "\u516D",
        sunday: "\u65E5"
      }
    },
    datepicker: {
      placeholder: "\u8BF7\u9009\u62E9\u65E5\u671F",
      startTime: "\u5F00\u59CB\u65F6\u95F4",
      endTime: "\u7ED3\u675F\u65F6\u95F4",
      customize: "\u81EA\u5B9A\u4E49",
      start: "\u5F00\u59CB",
      end: "\u7ED3\u675F"
    },
    wordlimit: {
      warn: "\u60A8\u6700\u591A\u53EF\u4EE5\u8F93\u5165{0}\u4E2A\u5B57"
    },
    wordcount: {
      warn: "\u60A8\u5DF2\u8D85\u51FA{0}\u4E2A\u5B57"
    },
    treepicker: {
      selectDesc: "\u60A8\u603B\u5171\u9009\u62E9{0}\u9879",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    search: {
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u67E5\u8BE2",
      searchButtonText: "\u641C\u7D22"
    },
    taginput: {
      limitWords: "\u60A8\u8F93\u5165\u7684\u5DF2\u7ECF\u8D85\u8FC7\u9650\u5236"
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    uploader: {
      upload: "\u4E0A\u4F20",
      reUpload: "\u91CD\u65B0\u4E0A\u4F20",
      overLimit: "\u4E0A\u4F20\u6587\u4EF6\u6570\u91CF\u8D85\u51FA\u9650\u5236"
    },
    pagination: {
      incorrectFormat: "\u60A8\u8F93\u5165\u7684\u503C\u683C\u5F0F\u4E0D\u6B63\u786E",
      overSize: "\u60A8\u8F93\u5165\u7684\u503C\u8D85\u8FC7\u8303\u56F4",
      totalBefore: "\u603B",
      totalAfter: "\u6761",
      sizeOfPage: "{size}\u6761/\u9875"
    }
  }
}, Zs = {
  h: {
    locale: "en-US",
    common: {
      cancel: "Cancel",
      confirm: "Confirm",
      clear: "Clear",
      nullOptionText: "please choose",
      empty: "empty",
      any: "any"
    },
    confirm: {
      title: "Confirm"
    },
    checkbox: {
      limitSize: "You can select up to {limitSize} data."
    },
    select: {
      nullOptionText: "please choose",
      placeholder: "select",
      emptyContent: "no results found",
      searchPlaceHolder: "search",
      limitSize: "You can select up to {limitSize} data."
    },
    category: {
      placeholder: "please choose"
    },
    cascader: {
      placeholder: "please choose"
    },
    categoryModal: {
      limitWords: "You can select up to {size} data.",
      emptyContent: "No results found",
      total: "total"
    },
    categoryPicker: {
      nullOptionText: "please choose",
      placeholder: "select",
      total: "total",
      limitSize: "You can select up to {0} data."
    },
    autoComplate: {
      placeholder: "Search Input",
      emptyContent: "No results found"
    },
    validation: {
      base: {
        required: " can not be empty",
        maxLen: " text length can't exceed {value} bits",
        minLen: " text length can't be less than {value} bits",
        max: " no more than {value}",
        min: " can't be less than {value}"
      },
      type: {
        int: " is not the correct integer format",
        number: " is not the correct digital format",
        email: " is not the correct mailbox format",
        url: " is not the correct URL format",
        tel: " is not the correct phone number format",
        mobile: " is not the correct mobile number format",
        globalmobile: " is not the correct international mobile number format"
      }
    },
    date: {
      today: "Today",
      yesterday: "Yesterday",
      year: "year",
      month: "month",
      week: "week",
      quarter: "quarter",
      day: "day",
      header: {
        year: "",
        month: "",
        day: ""
      },
      show: {
        week: "{year} {weeknum}th week {daystart} - {dayend}",
        weekInput: "{year} {week}th week",
        quarter: "{year} {quarter}th quarter"
      },
      months: {
        january: "Jan",
        february: "Feb",
        march: "Mar",
        april: "Apr",
        may: "May",
        june: "Jun",
        july: "Jul",
        august: "Aug",
        september: "Sep",
        october: "Oct",
        november: "Nov",
        december: "Dec"
      },
      weeks: {
        monday: "Mon",
        tuesday: "Tue",
        wednesday: "Wed",
        thursday: "Thu",
        friday: "Fri",
        saturday: "Sat",
        sunday: "Sun"
      }
    },
    datepicker: {
      placeholder: "select date",
      startTime: "start",
      endTime: "end",
      customize: "customize",
      start: "start",
      end: "end"
    },
    wordlimit: {
      warn: "You are limited to enter {0} words"
    },
    wordcount: {
      warn: "You have exceeded {0} words"
    },
    treepicker: {
      selectDesc: "You have selected {0} items",
      placeholder: "please select"
    },
    search: {
      placeholder: "search...",
      searchButtonText: "Search"
    },
    taginput: {
      limitWords: "You have exceeded the limit"
    },
    table: {
      empty: "No results found"
    },
    uploader: {
      upload: "Upload",
      reUpload: "ReUpload",
      overLimit: "The number of uploaded files exceeds the limit"
    },
    pagination: {
      incorrectFormat: "The format of the value you entered is incorrect",
      overSize: "The value you entered exceeds the range",
      totalBefore: "Total",
      totalAfter: "items",
      sizeOfPage: "{size} items/page"
    }
  }
}, el = /(%|)\{([0-9a-zA-Z_]+)\}/g;
function tl() {
  function e(i, l) {
    return Object.prototype.hasOwnProperty.call(i, l);
  }
  function t(i, ...l) {
    return l.length === 1 && typeof l[0] == "object" && (l = l[0]), (!l || !l.hasOwnProperty) && (l = {}), i === void 0 ? "" : i.replace(el, (n, s, r, o) => {
      let c;
      return i[o - 1] === "{" && i[o + n.length] === "}" ? r : (c = e(l, r) ? l[r] : null, c == null ? "" : c);
    });
  }
  return t;
}
const il = tl();
let nt = Ri;
const sl = {
  zh: Ri,
  en: Zs
};
let Zt = null, ei = {}, q = null, ll = function() {
  if (Reflect.has(this, "$t"))
    return this.$t(...arguments);
  if (q && q.locale) {
    if (!ei[q.locale] || Zt != q.locale) {
      ei[q.locale] = !0;
      let e = q.getLocaleMessage(q.locale) || {}, t = {};
      f.extend(!0, t, sl[q.locale], e), nt = t, q.setLocaleMessage(q.locale, t), Zt = q.locale;
    }
    return q.hlang(...arguments);
  }
};
const nl = function(e, t) {
  let i = ll.apply(this, arguments);
  if (i != null)
    return i;
  const l = e.split(".");
  let n = nt;
  for (let s = 0, r = l.length; s < r; s++) {
    const o = l[s];
    if (i = n[o], s === r - 1)
      return il(i, t);
    if (!i)
      return "";
    n = i;
  }
  return "";
}, rl = function(e) {
  nt = e || nt;
}, ol = function(e) {
  q = e;
}, H = {
  use: rl,
  hlang: nl,
  i18n: ol
}, Y = {
  methods: {
    hlang(...e) {
      return H.hlang.apply(this, e);
    }
  }
}, al = {
  name: "HCheckbox",
  mixins: [Y],
  emits: ["input", "change", "update:modelValue"],
  props: {
    dict: String,
    datas: [Object, Array],
    disabled: {
      type: Boolean,
      default: !1
    },
    value: [Object, Number, String],
    checked: {
      type: Boolean
    },
    modelValue: [Array, Boolean, Object, Number, String],
    indeterminate: {
      type: Boolean,
      default: !1
    },
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    },
    limit: Number,
    trueValue: {
      default: !0
    },
    falseValue: {
      default: !1
    }
  },
  data() {
    return {
      key: this.keyName,
      title: this.titleName
    };
  },
  computed: {
    checkList() {
      let e = this.modelValue || [];
      return (!f.isNull(this.value) || !this.isSingle) && !f.isArray(e) && console.warn("[HeyUI WARNING] Checkbox Component: It's not allowed to use v-model with non-array value."), f.isArray(e) ? e : [];
    },
    isSingle() {
      return this.arr.length == 0;
    },
    arr() {
      if (!this.datas && !this.dict)
        return [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), $.initOptions(e, this);
    },
    isSingleChecked() {
      return this.isSingle ? f.isNull(this.value) ? this.checked === !0 ? this.checked : this.modelValue === this.trueValue ? !0 : (this.modelValue === this.falseValue, !1) : this.checkList.indexOf(this.value) !== -1 : !1;
    }
  },
  methods: {
    setvalue(e) {
      if (this.disabled || e && e.disabled)
        return;
      let t = null;
      if (this.isSingle)
        f.isNull(this.value) ? f.isNull(this.modelValue) ? this.checked === !0 ? t = this.checked : t = this.isSingleChecked ? this.falseValue : this.trueValue : t = this.isSingleChecked ? this.falseValue : this.trueValue : t = f.toggleValue(this.checkList, this.value);
      else {
        t = f.copy(this.modelValue);
        let l = e[this.key];
        if (t = f.toggleValue(t, l), this.limit && this.limit < t.length) {
          R.error(this.hlang("h.checkbox.limitSize", { limitSize: this.limit }));
          return;
        }
      }
      this.$emit("change", t), this.$emit("input", t), this.$emit("update:modelValue", t);
      let i = document.createEvent("CustomEvent");
      i.initCustomEvent("setvalue", !0, !0, t), this.$el.dispatchEvent(i);
    },
    check(e) {
      return this.checkList.map((i) => String(i)).indexOf(String(e));
    },
    isInclude(e) {
      return this.checkList.map((l) => String(l)).indexOf(String(e[this.key])) > -1;
    }
  }
}, hl = ["onClick"], ul = /* @__PURE__ */ m("span", { class: "h-checkbox-native" }, null, -1), dl = {
  key: 0,
  class: "h-checkbox-text"
}, cl = /* @__PURE__ */ m("span", { class: "h-checkbox-native" }, null, -1), fl = {
  key: 0,
  class: "h-checkbox-text"
};
function ml(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(["h-checkbox", { "h-checkbox-disabled": i.disabled, "h-checkbox-single": s.isSingle }])
  }, [
    s.isSingle ? (a(), h("label", {
      key: 1,
      class: S({ "h-checkbox-label": !0, "h-checkbox-checked": s.isSingleChecked, "h-checkbox-indeterminate": !s.isSingleChecked && i.indeterminate }),
      onClick: t[0] || (t[0] = (r) => s.setvalue())
    }, [
      cl,
      e.$slots.default ? (a(), h("span", fl, [
        N(e.$slots, "default")
      ])) : k("", !0)
    ], 2)) : (a(!0), h(O, { key: 0 }, E(s.arr, (r) => (a(), h("label", {
      key: r[n.key],
      class: S({
        "h-checkbox-label": !0,
        "h-checkbox-checked": s.isInclude(r),
        "h-checkbox-item-disabled": r.disabled,
        "h-checkbox-indeterminate": r.indeterminate
      }),
      onClick: (o) => s.setvalue(r)
    }, [
      ul,
      e.$slots.item ? N(e.$slots, "item", {
        key: 1,
        item: r
      }) : (a(), h("span", dl, _(r[n.title]), 1))
    ], 10, hl))), 128))
  ], 2);
}
const je = /* @__PURE__ */ V(al, [["render", ml]]), pl = {
  name: "HCircle",
  props: {
    color: {
      type: String,
      default: "#3B91FF"
    },
    percent: {
      type: Number,
      default: 0
    },
    strokeWidth: {
      type: Number,
      default: 12
    },
    size: {
      type: Number,
      default: 120
    }
  },
  data() {
    return {};
  },
  computed: {
    circleStyle() {
      return {
        height: `${this.circleSize}px`
      };
    },
    circleSize() {
      return this.size + this.strokeWidth / 2;
    },
    radius() {
      return this.circleSize - this.strokeWidth / 2;
    },
    pathString() {
      return `M ${this.circleSize},${this.circleSize} m 0,-${this.radius}
        a ${this.radius},${this.radius} 0 1 1 0,${2 * this.radius}
        a ${this.radius},${this.radius} 0 1 1 0,-${2 * this.radius}`;
    },
    len() {
      return Math.PI * 2 * this.radius;
    },
    pathStyle() {
      return {
        "stroke-dasharray": `${this.len}px ${this.len}px`,
        "stroke-dashoffset": `${(100 - Math.min(this.percent, 100)) / 100 * this.len}px`,
        transition: "stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease"
      };
    }
  }
}, gl = ["width", "height", "viewBox"], yl = ["d", "stroke-width"], bl = ["d", "stroke", "stroke-width"], vl = { class: "h-circle-content" };
function wl(e, t, i, l, n, s) {
  return a(), h("div", {
    class: "h-circle",
    style: D(s.circleStyle)
  }, [
    (a(), h("svg", {
      width: s.circleSize,
      height: s.circleSize,
      viewBox: `0 0 ${s.circleSize * 2} ${s.circleSize * 2}`
    }, [
      m("path", {
        d: s.pathString,
        stroke: "#f3f3f3",
        "stroke-width": i.strokeWidth,
        "fill-opacity": "0"
      }, null, 8, yl),
      m("path", {
        d: s.pathString,
        "stroke-linecap": "round",
        stroke: i.color,
        "stroke-width": i.strokeWidth,
        "fill-opacity": "0",
        style: D(s.pathStyle)
      }, null, 12, bl)
    ], 8, gl)),
    m("div", vl, [
      N(e.$slots, "default")
    ])
  ], 4);
}
const kl = /* @__PURE__ */ V(pl, [["render", wl]]);
/** !
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of chargrequestAnimationFramee, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var Ui = typeof window < "u" && typeof document < "u", ti = ["Edge", "Trident", "Firefox"], zi = 0;
for (var yt = 0; yt < ti.length; yt += 1)
  if (Ui && navigator.userAgent.indexOf(ti[yt]) >= 0) {
    zi = 1;
    break;
  }
function Sl(e) {
  var t = !1;
  return function() {
    t || (t = !0, window.Promise.resolve().then(function() {
      t = !1, e();
    }));
  };
}
function Cl(e) {
  var t = !1;
  return function() {
    t || (t = !0, setTimeout(function() {
      t = !1, e();
    }, zi));
  };
}
var xl = Ui && window.Promise, _l = xl ? Sl : Cl;
function Yi(e) {
  var t = {};
  return e && t.toString.call(e) === "[object Function]";
}
function ve(e, t) {
  if (e.nodeType !== 1)
    return [];
  var i = getComputedStyle(e, null);
  return t ? i[t] : i;
}
function Pt(e) {
  return e.nodeName === "HTML" ? e : e.parentNode || e.host;
}
function Ge(e) {
  if (!e)
    return document.body;
  switch (e.nodeName) {
    case "HTML":
    case "BODY":
      return e.ownerDocument.body;
    case "#document":
      return e.body;
  }
  var t = ve(e), i = t.overflow, l = t.overflowX, n = t.overflowY;
  return /(auto|scroll|overlay)/.test(i + n + l) ? e : Ge(Pt(e));
}
var te = {}, Le = function() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "all";
  if (e = e.toString(), te.hasOwnProperty(e))
    return te[e];
  switch (e) {
    case "11":
      te[e] = navigator.userAgent.indexOf("Trident") !== -1;
      break;
    case "10":
      te[e] = navigator.appVersion.indexOf("MSIE 10") !== -1;
      break;
    case "all":
      te[e] = navigator.userAgent.indexOf("Trident") !== -1 || navigator.userAgent.indexOf("MSIE") !== -1;
      break;
  }
  return te.all = te.all || Object.keys(te).some(function(t) {
    return te[t];
  }), te[e];
};
function Ve(e) {
  if (!e)
    return document.documentElement;
  for (var t = Le(10) ? document.body : null, i = e.offsetParent; i === t && e.nextElementSibling; )
    i = (e = e.nextElementSibling).offsetParent;
  var l = i && i.nodeName;
  return !l || l === "BODY" || l === "HTML" ? e ? e.ownerDocument.documentElement : document.documentElement : ["TD", "TABLE"].indexOf(i.nodeName) !== -1 && ve(i, "position") === "static" ? Ve(i) : i;
}
function Tl(e) {
  var t = e.nodeName;
  return t === "BODY" ? !1 : t === "HTML" || Ve(e.firstElementChild) === e;
}
function jt(e) {
  return e.parentNode !== null ? jt(e.parentNode) : e;
}
function rt(e, t) {
  if (!e || !e.nodeType || !t || !t.nodeType)
    return document.documentElement;
  var i = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING, l = i ? e : t, n = i ? t : e, s = document.createRange();
  s.setStart(l, 0), s.setEnd(n, 0);
  var r = s.commonAncestorContainer;
  if (e !== r && t !== r || l.contains(n))
    return Tl(r) ? r : Ve(r);
  var o = jt(e);
  return o.host ? rt(o.host, t) : rt(e, jt(t).host);
}
function De(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "top", i = t === "top" ? "scrollTop" : "scrollLeft", l = e.nodeName;
  if (l === "BODY" || l === "HTML") {
    var n = e.ownerDocument.documentElement, s = e.ownerDocument.scrollingElement || n;
    return s[i];
  }
  return e[i];
}
function Ol(e, t) {
  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, l = De(t, "top"), n = De(t, "left"), s = i ? -1 : 1;
  return e.top += l * s, e.bottom += l * s, e.left += n * s, e.right += n * s, e;
}
function ii(e, t) {
  var i = t === "x" ? "Left" : "Top", l = i === "Left" ? "Right" : "Bottom";
  return parseFloat(e["border" + i + "Width"], 10) + parseFloat(e["border" + l + "Width"], 10);
}
function si(e, t, i, l) {
  return Math.max(
    t["offset" + e],
    t["scroll" + e],
    i["client" + e],
    i["offset" + e],
    i["scroll" + e],
    Le(10) ? i["offset" + e] + l["margin" + (e === "Height" ? "Top" : "Left")] + l["margin" + (e === "Height" ? "Bottom" : "Right")] : 0
  );
}
function qi() {
  var e = document.body, t = document.documentElement, i = Le(10) && getComputedStyle(t);
  return {
    height: si("Height", e, t, i),
    width: si("Width", e, t, i)
  };
}
var Nl = function(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}, $l = function() {
  function e(t, i) {
    for (var l = 0; l < i.length; l++) {
      var n = i[l];
      n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n);
    }
  }
  return function(t, i, l) {
    return i && e(t.prototype, i), l && e(t, l), t;
  };
}(), Ee = function(e, t, i) {
  return t in e ? Object.defineProperty(e, t, {
    value: i,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = i, e;
}, K = Object.assign || function(e) {
  for (var t = 1; t < arguments.length; t++) {
    var i = arguments[t];
    for (var l in i)
      Object.prototype.hasOwnProperty.call(i, l) && (e[l] = i[l]);
  }
  return e;
};
function ae(e) {
  return K({}, e, {
    right: e.left + e.width,
    bottom: e.top + e.height
  });
}
function Lt(e) {
  var t = {};
  try {
    if (Le(10)) {
      t = e.getBoundingClientRect();
      var i = De(e, "top"), l = De(e, "left");
      t.top += i, t.left += l, t.bottom += i, t.right += l;
    } else
      t = e.getBoundingClientRect();
  } catch {
  }
  var n = {
    left: t.left,
    top: t.top,
    width: t.right - t.left,
    height: t.bottom - t.top
  }, s = e.nodeName === "HTML" ? qi() : {}, r = s.width || e.clientWidth || n.right - n.left, o = s.height || e.clientHeight || n.bottom - n.top, c = e.offsetWidth - r, u = e.offsetHeight - o;
  if (c || u) {
    var y = ve(e);
    c -= ii(y, "x"), u -= ii(y, "y"), n.width -= c, n.height -= u;
  }
  return ae(n);
}
function Wt(e, t) {
  var i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, l = Le(10), n = t.nodeName === "HTML", s = Lt(e), r = Lt(t), o = Ge(e), c = ve(t), u = parseFloat(c.borderTopWidth, 10), y = parseFloat(c.borderLeftWidth, 10);
  i && t.nodeName === "HTML" && (r.top = Math.max(r.top, 0), r.left = Math.max(r.left, 0));
  var g = ae({
    top: s.top - r.top - u,
    left: s.left - r.left - y,
    width: s.width,
    height: s.height
  });
  if (g.marginTop = 0, g.marginLeft = 0, !l && n) {
    var p = parseFloat(c.marginTop, 10), w = parseFloat(c.marginLeft, 10);
    g.top -= u - p, g.bottom -= u - p, g.left -= y - w, g.right -= y - w, g.marginTop = p, g.marginLeft = w;
  }
  return (l && !i ? t.contains(o) : (t.contains(o) && t.nodeName !== "HTML" || t === o) && o.nodeName !== "BODY") && (g = Ol(g, t)), g;
}
function Vl(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = e.ownerDocument.documentElement, l = Wt(e, i), n = Math.max(i.clientWidth, window.innerWidth || 0), s = Math.max(i.clientHeight, window.innerHeight || 0), r = t ? 0 : De(i), o = t ? 0 : De(i, "left"), c = {
    top: r - l.top + l.marginTop,
    left: o - l.left + l.marginLeft,
    width: n,
    height: s
  };
  return ae(c);
}
function Ki(e) {
  var t = e.nodeName;
  return t === "BODY" || t === "HTML" ? !1 : ve(e, "position") === "fixed" ? !0 : Ki(Pt(e));
}
function Xi(e) {
  if (!e || !e.parentElement || Le())
    return document.documentElement;
  for (var t = e.parentElement; t && ve(t, "transform") === "none"; )
    t = t.parentElement;
  return t || document.documentElement;
}
function Rt(e, t, i, l) {
  var n = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, s = { top: 0, left: 0 }, r = n ? Xi(e) : rt(e, t);
  if (l === "viewport")
    s = Vl(r, n);
  else {
    var o = void 0;
    l === "scrollParent" ? (o = Ge(Pt(t)), o.nodeName === "BODY" && (o = e.ownerDocument.documentElement)) : l === "window" ? o = e.ownerDocument.documentElement : o = l;
    var c = Wt(o, r, n);
    if (o.nodeName === "HTML" && !Ki(r)) {
      var u = qi(), y = u.height, g = u.width;
      s.top += c.top - c.marginTop, s.bottom = y + c.top, s.left += c.left - c.marginLeft, s.right = g + c.left;
    } else
      s = c;
  }
  return s.left += i, s.top += i, s.right -= i, s.bottom -= i, s;
}
function Dl(e) {
  var t = e.width, i = e.height;
  return t * i;
}
function Gi(e, t, i, l, n) {
  var s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;
  if (e.indexOf("auto") === -1)
    return e;
  var r = Rt(i, l, s, n), o = {
    top: {
      width: r.width,
      height: t.top - r.top
    },
    right: {
      width: r.right - t.right,
      height: r.height
    },
    bottom: {
      width: r.width,
      height: r.bottom - t.bottom
    },
    left: {
      width: t.left - r.left,
      height: r.height
    }
  }, c = Object.keys(o).map(function(p) {
    return K(
      {
        key: p
      },
      o[p],
      {
        area: Dl(o[p])
      }
    );
  }).sort(function(p, w) {
    return w.area - p.area;
  }), u = c.filter(function(p) {
    var w = p.width, b = p.height;
    return w >= i.clientWidth && b >= i.clientHeight;
  }), y = u.length > 0 ? u[0].key : c[0].key, g = e.split("-")[1];
  return y + (g ? "-" + g : "");
}
function Ji(e, t, i) {
  var l = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null, n = l ? Xi(t) : rt(t, i);
  return Wt(i, n, l);
}
function Qi(e) {
  var t = getComputedStyle(e), i = parseFloat(t.marginTop) + parseFloat(t.marginBottom), l = parseFloat(t.marginLeft) + parseFloat(t.marginRight), n = {
    width: e.offsetWidth + l,
    height: e.offsetHeight + i
  };
  return n;
}
function ot(e) {
  var t = { left: "right", right: "left", bottom: "top", top: "bottom" };
  return e.replace(/left|right|bottom|top/g, function(i) {
    return t[i];
  });
}
function Zi(e, t, i) {
  i = i.split("-")[0];
  var l = Qi(e), n = {
    width: l.width,
    height: l.height
  }, s = ["right", "left"].indexOf(i) !== -1, r = s ? "top" : "left", o = s ? "left" : "top", c = s ? "height" : "width", u = s ? "width" : "height";
  return n[r] = t[r] + t[c] / 2 - l[c] / 2, i === o ? n[o] = t[o] - l[u] : n[o] = t[ot(o)], n;
}
function Je(e, t) {
  return Array.prototype.find ? e.find(t) : e.filter(t)[0];
}
function El(e, t, i) {
  if (Array.prototype.findIndex)
    return e.findIndex(function(n) {
      return n[t] === i;
    });
  var l = Je(e, function(n) {
    return n[t] === i;
  });
  return e.indexOf(l);
}
function es(e, t, i) {
  var l = i === void 0 ? e : e.slice(0, El(e, "name", i));
  return l.forEach(function(n) {
    n.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
    var s = n.function || n.fn;
    n.enabled && Yi(s) && (t.offsets.popper = ae(t.offsets.popper), t.offsets.reference = ae(t.offsets.reference), t = s(t, n));
  }), t;
}
function Ml() {
  if (this.state.isDestroyed)
    return;
  let e = this.defaultOptions;
  this.options.modifiers = {};
  const t = this;
  Object.keys(K({}, Me.Defaults.modifiers, e.modifiers)).forEach(function(i) {
    t.options.modifiers[i] = K({}, Me.Defaults.modifiers[i] || {}, e.modifiers ? e.modifiers[i] : {});
  }), this.modifiers = Object.keys(this.options.modifiers).map(function(i) {
    return K(
      {
        name: i
      },
      t.options.modifiers[i]
    );
  }).sort(function(i, l) {
    return i.order - l.order;
  }), this.modifiers.forEach(function(i) {
    i.enabled && Yi(i.onLoad) && i.onLoad(t.reference, t.popper, t.options, i, t.state);
  });
}
function jl() {
  if (!this.state.isDestroyed) {
    var e = {
      instance: this,
      styles: {},
      arrowStyles: {},
      attributes: {},
      flipped: !1,
      offsets: {}
    };
    e.offsets.reference = Ji(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = Gi(
      this.options.placement,
      e.offsets.reference,
      this.popper,
      this.reference,
      this.options.modifiers.flip.boundariesElement,
      this.options.modifiers.flip.padding
    ), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = Zi(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", e = es(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
  }
}
function ts(e, t) {
  return e.some(function(i) {
    var l = i.name, n = i.enabled;
    return n && l === t;
  });
}
function is(e) {
  for (var t = [!1, "ms", "Webkit", "Moz", "O"], i = e.charAt(0).toUpperCase() + e.slice(1), l = 0; l < t.length; l++) {
    var n = t[l], s = n ? "" + n + i : e;
    if (typeof document.body.style[s] < "u")
      return s;
  }
  return null;
}
function Ll() {
  return this.state.isDestroyed = !0, ts(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[is("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
}
function ss(e) {
  var t = e.ownerDocument;
  return t ? t.defaultView : window;
}
function ls(e, t, i, l) {
  var n = e.nodeName === "BODY", s = n ? e.ownerDocument.defaultView : e;
  s.addEventListener(t, i, { passive: !0, capture: !0 }), n || ls(Ge(s.parentNode), t, i, l), l.push(s);
}
function Al(e, t, i, l) {
  i.updateBound = l, ss(e).addEventListener("resize", i.updateBound, { passive: !0 });
  var n = Ge(e);
  return ls(n, "scroll", i.updateBound, i.scrollParents), i.scrollElement = n, i.eventsEnabled = !0, i;
}
function Bl() {
  this.state.eventsEnabled || (this.state = Al(this.reference, this.options, this.state, this.scheduleUpdate));
}
function Il(e, t) {
  return ss(e).removeEventListener("resize", t.updateBound), t.scrollParents.forEach(function(i) {
    i.removeEventListener("scroll", t.updateBound);
  }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
}
function Hl() {
  this.state.eventsEnabled && (window.cancelAnimationFrame && cancelAnimationFrame(this.scheduleUpdate), this.state = Il(this.reference, this.state));
}
function Ut(e) {
  return e !== "" && !isNaN(parseFloat(e)) && isFinite(e);
}
function At(e, t) {
  Object.keys(t).forEach(function(i) {
    var l = "";
    ["width", "height", "top", "right", "bottom", "left"].indexOf(i) !== -1 && Ut(t[i]) && (l = "px"), e.style[i] = t[i] + l;
  });
}
function Fl(e, t) {
  Object.keys(t).forEach(function(i) {
    var l = t[i];
    l !== !1 ? e.setAttribute(i, t[i]) : e.removeAttribute(i);
  });
}
function Pl(e) {
  return At(e.instance.popper, e.styles), Fl(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && At(e.arrowElement, e.arrowStyles), e;
}
function Wl(e, t, i, l, n) {
  var s = Ji(n, t, e, i.positionFixed), r = Gi(
    i.placement,
    s,
    t,
    e,
    i.modifiers.flip.boundariesElement,
    i.modifiers.flip.padding
  );
  return t.setAttribute("x-placement", r), At(t, { position: i.positionFixed ? "fixed" : "absolute" }), i;
}
function Rl(e, t) {
  var i = t.x, l = t.y, n = e.offsets.popper, s = Je(e.instance.modifiers, function(M) {
    return M.name === "applyStyle";
  }).gpuAcceleration;
  s !== void 0 && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
  var r = s !== void 0 ? s : t.gpuAcceleration, o = Ve(e.instance.popper), c = Lt(o), u = {
    position: n.position
  }, y = {
    left: Math.floor(n.left),
    top: Math.floor(n.top),
    bottom: Math.floor(n.bottom),
    right: Math.floor(n.right)
  }, g = i === "bottom" ? "top" : "bottom", p = l === "right" ? "left" : "right", w = is("transform"), b = void 0, d = void 0;
  if (g === "bottom" ? d = -c.height + y.bottom : d = y.top, p === "right" ? b = -c.width + y.right : b = y.left, r && w)
    u[w] = "translate3d(" + b + "px, " + d + "px, 0)", u[g] = 0, u[p] = 0, u.willChange = "transform";
  else {
    var v = g === "bottom" ? -1 : 1, T = p === "right" ? -1 : 1;
    u[g] = d * v, u[p] = b * T, u.willChange = g + ", " + p;
  }
  var C = {
    "x-placement": e.placement
  };
  return e.attributes = K({}, C, e.attributes), e.styles = K({}, u, e.styles), e.arrowStyles = K({}, e.offsets.arrow, e.arrowStyles), e;
}
function ns(e, t, i) {
  var l = Je(e, function(o) {
    var c = o.name;
    return c === t;
  }), n = !!l && e.some(function(o) {
    return o.name === i && o.enabled && o.order < l.order;
  });
  if (!n) {
    var s = "`" + t + "`", r = "`" + i + "`";
    console.warn(
      r + " modifier is required by " + s + " modifier in order to work, be sure to include it before " + s + "!"
    );
  }
  return n;
}
function Ul(e, t) {
  var i;
  if (!ns(e.instance.modifiers, "arrow", "keepTogether"))
    return e;
  var l = t.element;
  if (typeof l == "string") {
    if (l = e.instance.popper.querySelector(l), !l)
      return e;
  } else if (!e.instance.popper.contains(l))
    return console.warn("WARNING: `arrow.element` must be child of its popper element!"), e;
  var n = e.placement.split("-")[0], s = e.offsets, r = s.popper, o = s.reference, c = ["left", "right"].indexOf(n) !== -1, u = c ? "height" : "width", y = c ? "Top" : "Left", g = y.toLowerCase(), p = c ? "left" : "top", w = c ? "bottom" : "right", b = Qi(l)[u];
  o[w] - b < r[g] && (e.offsets.popper[g] -= r[g] - (o[w] - b)), o[g] + b > r[w] && (e.offsets.popper[g] += o[g] + b - r[w]), e.offsets.popper = ae(e.offsets.popper);
  var d = o[g] + o[u] / 2 - b / 2, v = ve(e.instance.popper), T = parseFloat(v["margin" + y], 10), C = parseFloat(v["border" + y + "Width"], 10), M = d - e.offsets.popper[g] - T - C;
  return M = Math.max(Math.min(r[u] - b, M), 0), e.arrowElement = l, e.offsets.arrow = (i = {}, Ee(i, g, Math.round(M)), Ee(i, p, ""), i), e;
}
function zl(e) {
  return e === "end" ? "start" : e === "start" ? "end" : e;
}
var rs = [
  "auto-start",
  "auto",
  "auto-end",
  "top-start",
  "top",
  "top-end",
  "right-start",
  "right",
  "right-end",
  "bottom-end",
  "bottom",
  "bottom-start",
  "left-end",
  "left",
  "left-start"
], bt = rs.slice(3);
function li(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = bt.indexOf(e), l = bt.slice(i + 1).concat(bt.slice(0, i));
  return t ? l.reverse() : l;
}
var vt = {
  FLIP: "flip",
  CLOCKWISE: "clockwise",
  COUNTERCLOCKWISE: "counterclockwise"
};
function Yl(e, t) {
  if (ts(e.instance.modifiers, "inner") || e.flipped && e.placement === e.originalPlacement)
    return e;
  var i = Rt(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement), l = e.placement.split("-")[0], n = ot(l), s = e.placement.split("-")[1] || "", r = [];
  switch (t.behavior) {
    case vt.FLIP:
      r = [l, n];
      break;
    case vt.CLOCKWISE:
      r = li(l);
      break;
    case vt.COUNTERCLOCKWISE:
      r = li(l, !0);
      break;
    default:
      r = t.behavior;
  }
  return r.forEach(function(o, c) {
    if (l !== o || r.length === c + 1)
      return e;
    l = e.placement.split("-")[0], n = ot(l);
    var u = e.offsets.popper, y = e.offsets.reference, g = Math.floor, p = l === "left" && g(u.right) > g(y.left) || l === "right" && g(u.left) < g(y.right) || l === "top" && g(u.bottom) > g(y.top) || l === "bottom" && g(u.top) < g(y.bottom), w = g(u.left) < g(i.left), b = g(u.right) > g(i.right), d = g(u.top) < g(i.top), v = g(u.bottom) > g(i.bottom), T = l === "left" && w || l === "right" && b || l === "top" && d || l === "bottom" && v, C = ["top", "bottom"].indexOf(l) !== -1, M = !!t.flipVariations && (C && s === "start" && w || s === "start" && !w && b || C && s === "end" && b || !C && s === "start" && d || !C && s === "end" && v);
    (p || T || M) && (e.flipped = !0, (p || T) && (l = r[c + 1]), M && (s = zl(s)), e.placement = l + (s ? "-" + s : ""), e.offsets.popper = K({}, e.offsets.popper, Zi(e.instance.popper, e.offsets.reference, e.placement)), e = es(e.instance.modifiers, e, "flip"));
  }), e;
}
function ql(e) {
  var t = e.offsets, i = t.popper, l = t.reference, n = e.placement.split("-")[0], s = Math.floor, r = ["top", "bottom"].indexOf(n) !== -1, o = r ? "right" : "bottom", c = r ? "left" : "top", u = r ? "width" : "height";
  return i[o] < s(l[c]) && (e.offsets.popper[c] = s(l[c]) - i[u]), i[c] > s(l[o]) && (e.offsets.popper[c] = s(l[o])), e;
}
function Kl(e, t, i, l) {
  var n = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/), s = +n[1], r = n[2];
  if (!s)
    return e;
  if (r.indexOf("%") === 0) {
    var o = void 0;
    switch (r) {
      case "%p":
        o = i;
        break;
      case "%":
      case "%r":
      default:
        o = l;
    }
    var c = ae(o);
    return c[t] / 100 * s;
  } else if (r === "vh" || r === "vw") {
    var u = void 0;
    return r === "vh" ? u = Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : u = Math.max(document.documentElement.clientWidth, window.innerWidth || 0), u / 100 * s;
  } else
    return s;
}
function Xl(e, t, i, l) {
  var n = [0, 0], s = ["right", "left"].indexOf(l) !== -1, r = e.split(/(\+|\-)/).map(function(y) {
    return y.trim();
  }), o = r.indexOf(
    Je(r, function(y) {
      return y.search(/,|\s/) !== -1;
    })
  );
  r[o] && r[o].indexOf(",") === -1 && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
  var c = /\s*,\s*|\s+/, u = o !== -1 ? [
    r.slice(0, o).concat([r[o].split(c)[0]]),
    [r[o].split(c)[1]].concat(r.slice(o + 1))
  ] : [r];
  return u = u.map(function(y, g) {
    var p = (g === 1 ? !s : s) ? "height" : "width", w = !1;
    return y.reduce(function(b, d) {
      return b[b.length - 1] === "" && ["+", "-"].indexOf(d) !== -1 ? (b[b.length - 1] = d, w = !0, b) : w ? (b[b.length - 1] += d, w = !1, b) : b.concat(d);
    }, []).map(function(b) {
      return Kl(b, p, t, i);
    });
  }), u.forEach(function(y, g) {
    y.forEach(function(p, w) {
      Ut(p) && (n[g] += p * (y[w - 1] === "-" ? -1 : 1));
    });
  }), n;
}
function Gl(e, t) {
  var i = t.offset, l = e.placement, n = e.offsets, s = n.popper, r = n.reference, o = l.split("-")[0], c = void 0;
  return Ut(+i) ? c = [+i, 0] : c = Xl(i, s, r, o), o === "left" ? (s.top += c[0], s.left -= c[1]) : o === "right" ? (s.top += c[0], s.left += c[1]) : o === "top" ? (s.left += c[0], s.top -= c[1]) : o === "bottom" && (s.left += c[0], s.top += c[1]), e.popper = s, e;
}
function Jl(e, t) {
  var i = t.boundariesElement || Ve(e.instance.popper);
  e.instance.reference === i && (i = Ve(i));
  var l = Rt(e.instance.popper, e.instance.reference, t.padding, i, e.positionFixed);
  t.boundaries = l;
  var n = t.priority, s = e.offsets.popper, r = {
    primary: function(c) {
      var u = s[c];
      return s[c] < l[c] && !t.escapeWithReference && (u = Math.max(s[c], l[c])), Ee({}, c, u);
    },
    secondary: function(c) {
      var u = c === "right" ? "left" : "top", y = s[u];
      return s[c] > l[c] && !t.escapeWithReference && (y = Math.min(s[u], l[c] - (c === "right" ? s.width : s.height))), Ee({}, u, y);
    }
  };
  return n.forEach(function(o) {
    var c = ["left", "top"].indexOf(o) !== -1 ? "primary" : "secondary";
    s = K({}, s, r[c](o));
  }), e.offsets.popper = s, e;
}
function Ql(e) {
  var t = e.placement, i = t.split("-")[0], l = t.split("-")[1];
  if (l) {
    var n = e.offsets, s = n.reference, r = n.popper, o = ["bottom", "top"].indexOf(i) !== -1, c = o ? "left" : "top", u = o ? "width" : "height", y = {
      start: Ee({}, c, s[c]),
      end: Ee({}, c, s[c] + s[u] - r[u])
    };
    e.offsets.popper = K({}, r, y[l]);
  }
  return e;
}
function Zl(e) {
  if (!ns(e.instance.modifiers, "hide", "preventOverflow"))
    return e;
  var t = e.offsets.reference, i = Je(e.instance.modifiers, function(l) {
    return l.name === "preventOverflow";
  }).boundaries;
  if (t.bottom < i.top || t.left > i.right || t.top > i.bottom || t.right < i.left) {
    if (e.hide === !0)
      return e;
    e.hide = !0, e.attributes["x-out-of-boundaries"] = "";
  } else {
    if (e.hide === !1)
      return e;
    e.hide = !1, e.attributes["x-out-of-boundaries"] = !1;
  }
  return e;
}
function en(e) {
  var t = e.placement, i = t.split("-")[0], l = e.offsets, n = l.popper, s = l.reference, r = ["left", "right"].indexOf(i) !== -1, o = ["top", "left"].indexOf(i) === -1;
  return n[r ? "left" : "top"] = s[i] - (o ? n[r ? "width" : "height"] : 0), e.placement = ot(t), e.offsets.popper = ae(n), e;
}
var tn = {
  shift: {
    order: 100,
    enabled: !0,
    fn: Ql
  },
  offset: {
    order: 200,
    enabled: !0,
    fn: Gl,
    offset: 0
  },
  preventOverflow: {
    order: 300,
    enabled: !0,
    fn: Jl,
    priority: ["left", "right", "top", "bottom"],
    padding: 5,
    boundariesElement: "scrollParent"
  },
  keepTogether: {
    order: 400,
    enabled: !0,
    fn: ql
  },
  arrow: {
    order: 500,
    enabled: !0,
    fn: Ul,
    element: "[x-arrow]"
  },
  flip: {
    order: 600,
    enabled: !0,
    fn: Yl,
    behavior: "flip",
    padding: 5,
    boundariesElement: "viewport"
  },
  inner: {
    order: 700,
    enabled: !1,
    fn: en
  },
  hide: {
    order: 800,
    enabled: !0,
    fn: Zl
  },
  computeStyle: {
    order: 850,
    enabled: !0,
    fn: Rl,
    gpuAcceleration: !0,
    x: "bottom",
    y: "right"
  },
  applyStyle: {
    order: 900,
    enabled: !0,
    fn: Pl,
    onLoad: Wl,
    gpuAcceleration: void 0
  }
}, sn = {
  placement: "bottom",
  positionFixed: !1,
  eventsEnabled: !0,
  removeOnDestroy: !1,
  onCreate: function() {
  },
  onUpdate: function() {
  },
  modifiers: tn
};
function ln(e) {
  if ("requestAnimationFrame" in window)
    return window.requestAnimationFrame(e);
  setTimeout(e, 16);
}
var Me = function() {
  function e(t, i) {
    var l = this, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    Nl(this, e), this.scheduleUpdate = function() {
      return ln(l.update);
    }, this.update = _l(this.update.bind(this)), this.defaultOptions = n, this.options = K({}, e.Defaults, n), this.state = {
      isDestroyed: !1,
      isCreated: !1,
      scrollParents: []
    }, this.reference = t && t.jquery ? t[0] : t, this.popper = i && i.jquery ? i[0] : i, this.updateModifiers(), this.update();
    var s = this.options.eventsEnabled;
    s && this.enableEventListeners(), this.state.eventsEnabled = s;
  }
  return $l(e, [
    {
      key: "updateModifiers",
      value: function() {
        return Ml.call(this);
      }
    },
    {
      key: "update",
      value: function() {
        return jl.call(this);
      }
    },
    {
      key: "destroy",
      value: function() {
        return Ll.call(this);
      }
    },
    {
      key: "enableEventListeners",
      value: function() {
        return Bl.call(this);
      }
    },
    {
      key: "disableEventListeners",
      value: function() {
        return Hl.call(this);
      }
    }
  ]), e;
}();
Me.Utils = (typeof window < "u" ? window : global).PopperUtils;
Me.placements = rs;
Me.Defaults = sn;
const nn = {
  container: !1,
  delay: 0,
  html: !1,
  placement: "top",
  triggerOnce: !1,
  content: "",
  disabled: !1,
  trigger: "hover focus",
  offset: 0,
  equalWidth: !1,
  type: "dropdown",
  preventOverflow: !1,
  getContainer: null,
  maxWidth: null
};
class os {
  constructor(t, i) {
    i = f.extend({}, nn, i), this.reference = t, this.options = i;
    const l = typeof i.trigger == "string" ? i.trigger.split(" ").filter((n) => ["click", "hover", "focus", "manual", "contextMenu"].indexOf(n) !== -1) : [];
    this.isOpen = !1, this.arrowSelector = i.arrowSelector, this.innerSelector = i.innerSelector, this.triggerEvents = [], i.content.nodeType === 1 && (i.content.style.display = "none"), this.setEventListeners(l, i);
  }
  create(t, i, l) {
    const n = window.document.createElement("div");
    n.innerHTML = i;
    const s = n.childNodes[0], r = this.options.html;
    s.id = `pop_${Math.random().toString(36).substr(2, 10)}`;
    const o = n.querySelector(this.innerSelector);
    if (l.nodeType === 1)
      r && o.appendChild(l), l.style.display = "block";
    else if (f.isFunction(l)) {
      const c = l.call(t);
      r ? o.innerHTML = c : o.innerText = c;
    } else
      r ? o.innerHTML = l : o.innerText = l;
    return s;
  }
  updateContent(t) {
    if (this.options.content = t, !this.popNode || t == null)
      return;
    const i = this.popNode.querySelector(this.innerSelector), l = this.options.html;
    t.nodeType === 1 ? (l && i.replaceChild(t, i.firstChild), t.style.display = "block") : l ? i.innerHTML = t : i.innerText = t, this.update();
  }
  initPopNode() {
    let t = this.reference, i = this.options;
    const l = i.content || t.getAttribute("content");
    if (!l)
      return this;
    const n = this.create(t, i.template, l, i.html);
    n.setAttribute("aria-describedby", n.id), this.reference.setAttribute("aria-describe", n.id), this.findContainer().appendChild(n), i.class && f.addClass(n, i.class), i.className && f.addClass(n, i.className);
    const r = n.querySelector(this.innerSelector);
    r && i.maxWidth && (r.style.maxWidth = `${i.maxWidth}px`), this.popNode = n, this.popNode.setAttribute("aria-hidden", "true"), this.options.trigger.indexOf("hover") > -1 && this.setPopNodeEvent();
  }
  initPopper() {
    let t = this.reference, i = this.options, l = this.popNode;
    const n = this.findContainer();
    let s = {
      computeStyle: {
        gpuAcceleration: !1
      },
      arrow: {
        enabled: !1
      },
      inner: {
        enabled: !1
      },
      preventOverflow: {
        boundariesElement: "window",
        enabled: !0
      }
    };
    this.options.offset && (s.offset = {
      enabled: !0,
      offset: this.options.offset
    }), this.options.preventOverflow && n.tagName != "BODY" && n.tagName != "HTML" && (s.hide = {
      enabled: !1
    }, s.flip = {
      boundariesElement: n,
      enabled: !0
    }, s.preventOverflow = {
      enabled: !1
    }), this.options.trigger == "contextMenu" && (s.flip = {
      enabled: !1
    });
    let r = {
      placement: i.placement,
      modifiers: s
    };
    this.popperOptions = r, this.popperInstance = new Me(t, l, r);
  }
  disabled() {
    this.options.disabled = !0;
  }
  enabled() {
    this.options.disabled = !1;
  }
  show(t) {
    if (this.hideTimeout && clearTimeout(this.hideTimeout), this.hideTimeout2 && clearTimeout(this.hideTimeout2), this.options.events && f.isFunction(this.options.events.show) && this.options.events.show(t), this.isOpen || this.options.disabled)
      return this;
    if (this.isOpen = !0, this.popNode || this.initPopNode(), this.popperInstance || this.initPopper(), this.popperInstance.enableEventListeners(), !!this.popNode)
      return this.options.equalWidth && (this.popNode.style.width = `${this.reference.clientWidth}px`), this.popNode.style.display = "", f.addClass(this.reference, "h-pop-trigger"), this.showTimeout = setTimeout(() => {
        this.popNode.setAttribute("aria-hidden", "false"), this.popperInstance.update();
      }, 0), this;
  }
  update() {
    this.popperInstance && this.popperInstance.update();
  }
  hide() {
    if (this.showTimeout && clearTimeout(this.showTimeout), this.hideTimeout && clearTimeout(this.hideTimeout), this.isOpen !== !1 && !!document.body.contains(this.popNode))
      return this.popNode ? this.popperInstance ? (this.hideTimeout = setTimeout(() => {
        f.removeClass(this.reference, "h-pop-trigger"), this.options.events && f.isFunction(this.options.events.hide) && this.options.events.hide.call(null), this.popNode && this.popNode.setAttribute("aria-hidden", "true"), this.isOpen = !1, this.hideTimeout2 = setTimeout(() => {
          this.popNode && (this.popNode.style.display = "none", this.popperInstance && this.popperInstance.disableEventListeners());
        }, 300);
      }, this.options.delay), this) : this : this;
  }
  destory() {
    return this.documentHandler && (document.removeEventListener("click", this.documentHandler), document.removeEventListener("contextmenu", this.documentHandler)), this.popperInstance && this.popperInstance.destroy(), this.triggerEvents.forEach(({ event: t, func: i }) => {
      this.reference.removeEventListener(t, i, t == "focus" || t == "blur");
    }), this.triggerEvents = [], this.popNode && (this.hide(), this.popNode.parentNode.removeChild(this.popNode), this.popNode = null), this;
  }
  findContainer() {
    let t = this.options.container;
    return typeof t == "string" ? t = window.document.querySelector(t) : this.options.getContainer ? t = this.options.getContainer(this.reference) : t === !1 && (t = document.body), t;
  }
  setEventListeners(t) {
    let i = this.reference;
    const l = [], n = [];
    t.forEach((s) => {
      switch (s) {
        case "hover":
          l.push("mouseenter"), n.push("mouseleave");
          break;
        case "focus":
          l.push("focus"), n.push("blur");
          break;
        case "click":
          l.push("click"), this.options.triggerOnce || n.push("click");
          break;
        case "contextMenu":
          l.push("contextmenu"), n.push("click");
          break;
      }
    }), l.forEach((s) => {
      const r = (o) => {
        if (o.type == "contextmenu") {
          o.preventDefault(), window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
          let c = i.getBoundingClientRect();
          this.options.offset = `${o.clientX - c.x}, -${c.bottom - o.clientY - 10}`, this.popperInstance && (this.popperInstance.defaultOptions.modifiers.offset = {
            enabled: !0,
            offset: this.options.offset
          }, this.popperInstance.updateModifiers(), this.popperInstance.update());
        }
        s == "click" && this.isOpen === !0 || (o.usedByPop = !0, this.show(o));
      };
      this.triggerEvents.push({
        event: s,
        func: r
      }), i.addEventListener(s, r, s == "focus");
    }), n.forEach((s) => {
      const r = (o) => {
        o.usedByPop !== !0 && this.hide();
      };
      this.triggerEvents.push({
        event: s,
        func: r
      }), i.addEventListener(s, r, s == "blur");
    }), t.indexOf("manual") == -1 && (this.documentHandler = (s) => {
      if (!this.popNode || s.target.parentNode == null)
        return;
      if (!this.isOpen || i.contains(s.target) || this.popNode.contains(s.target))
        return !1;
      let r = s.reference;
      if (i && this.popNode.contains(r))
        return !1;
      let o = s.target;
      for (; o && o.tagName != "BODY" && o.tagName != "HTML" && !o.getAttribute("aria-describedby") && o.parentNode; )
        o = o.parentNode;
      if (o.tagName != "BODY" && o.tagName != "HTML") {
        let c = document.body.querySelector(`[aria-describe="${o.getAttribute("aria-describedby")}"]`);
        if (c && this.popNode.contains(c))
          return !1;
      }
      this.hide();
    }, document.addEventListener("click", this.documentHandler), document.addEventListener("contextmenu", this.documentHandler));
  }
  setPopNodeEvent() {
    this.popNode.addEventListener("mouseenter", (t) => {
      this.show(t);
    }), this.popNode.addEventListener("mouseout", (t) => {
      const i = t.relatedreference || t.toElement || t.relatedTarget;
      !this.popNode.contains(i) && i != this.reference && !this.reference.contains(i) && this.hide();
    });
  }
}
const rn = {
  trigger: "click",
  html: !0,
  placement: "bottom-start",
  template: '<div role="select" class="h-dropdown"><div class="h-dropdown-inner"></div></div>',
  innerSelector: ".h-dropdown-inner",
  preventOverflow: !0,
  type: "dropdown",
  delay: 0,
  offset: "0, 1"
};
class he extends os {
  constructor(t, i) {
    i = f.extend({}, rn, {}, i), i.container || (i.getContainer = function(l) {
      let n = l || document.body;
      for (; n && n.tagName != "BODY" && n.tagName != "HTML" && !f.hasClass(n, "h-dropdown-common-container"); )
        n = n.parentNode;
      return n;
    }), super(t, i);
  }
}
class as {
  constructor(t, i = {}) {
    this.isDragging = !1, this.options = i, this.element = t, this.element && this.init(), this.moveFn = (l) => {
      this.move(l);
    }, this.upFn = (l) => {
      this.up(l);
    }, this.clickFn = (l) => {
      this.click(l);
    };
  }
  init() {
    this.element.addEventListener("mousedown", (i) => {
      this.mousedown(i);
    }), this.options.container && this.options.container.addEventListener("mousedown", (i) => {
      this.mousedown(i);
    });
  }
  mousedown(t) {
    this.isDragging || (document.onselectstart = () => !1, document.ondragstart = () => !1, document.body.addEventListener("mousemove", this.moveFn), document.body.addEventListener("mouseup", this.upFn), document.body.addEventListener("click", this.clickFn), this.isDragging = !0, this.options.start && this.options.start(t));
  }
  move(t) {
    this.options.drag && this.options.drag(t);
  }
  click(t) {
    t.stopPropagation(), t.preventDefault();
  }
  up(t) {
    document.body.removeEventListener("mousemove", this.moveFn), document.body.removeEventListener("mouseup", this.upFn), setTimeout(() => {
      document.body.removeEventListener("click", this.clickFn);
    }, 200), document.onselectstart = null, document.ondragstart = null, this.isDragging = !1, this.options.end && this.options.end(t);
  }
  destroy() {
    document.removeEventListener("mousemove", this.moveFn), document.removeEventListener("mouseup", this.upFn), document.removeEventListener("click", this.clickFn), document.onselectstart = null, document.ondragstart = null;
  }
}
const on = {
  type: "dialog",
  title: "",
  content: "",
  style: null,
  class: null,
  buttons: [],
  hasMask: !1,
  closeOnMask: !0,
  hasCloseIcon: !1,
  timeout: 0,
  width: !1,
  global: !1,
  noPadding: !1,
  draggable: !1
}, ni = {
  MODAL: "h-modal",
  MESSAGE: "h-message",
  NOTICE: "h-notice"
}, an = "h-notify", hn = "h-notify-has-close", ri = "h-notify-body", wt = "h-notify-container", oi = "h-notify-wrap", un = "h-notify-content", ai = "h-notify-close", hi = "h-notify-mask", ui = "h-notify-show", dn = "h-icon-close";
class cn {
  constructor(t) {
    const i = this;
    this.mouseoverEvent = !1, this.closeTimeout = !1;
    let l = this.param = f.extend({}, on, t, !0);
    l.hasFooter = f.isArray(l.buttons) && l.buttons.length > 0 && !l.component;
    let n = "", s = "", r = "", o = "";
    if (l.hasMask && (r = `<div class="${hi}"></div>`), l.hasCloseIcon && (o = `<span class="${ai} ${dn}"></span>`), l.title && (s = `<header class="${l.type}-header">${l.title}</header>`), l.hasFooter) {
      const d = [];
      for (const v of l.buttons)
        if (f.isObject(v)) {
          let T = v.className || "";
          v.style && (T += ` h-btn-${v.style}`), d.push(`<button type="button" class="h-btn ${T}" attr="${v.type}">${v.name}</button>`);
        }
      n = `<footer class="${l.type}-footer">${d.join("")}</footer>`;
    }
    const c = l.type === ni.MODAL && l.hasMask ? oi : "", u = `
    ${r}
    <div class="${c}">
      <div class="${wt}">
        <div class="${un}">
          ${o}
          ${s}
          <div class="${ri}"></div>
          ${n}
        </div>
      </div>
    </div>`;
    let y = document.createElement("div");
    f.addClass(y, an), l.hasMask ? f.addClass(y, "h-notify-has-mask") : f.addClass(y, "h-notify-no-mask"), l.className && f.addClass(y, l.className), y.innerHTML = u;
    let g = this.$notifyBody = y.querySelector(`.${ri}`), p = this.$container = y.querySelector(`.${wt}`);
    if (this.el = y, g.innerHTML = l.content, l.hasCloseIcon && f.addClass(y, hn), l.type && f.addClass(y, l.type), l.height && (g.style.height = `${l.height}px`), l.maxheight && (g.style.maxHeight = `${l.maxheight}px`), l.style && f.addClass(y, l.style), l.width && (p.style.width = `${l.width}px`), l.draggable) {
      f.addClass(y, "h-notify-draggable");
      let d = 0, v = 0, T = null, C = p.querySelector(".h-modal-header");
      C && (this.drag = new as(C, {
        start(M) {
          d = M.clientX, v = M.clientY, T = p.getBoundingClientRect(), p.style.left = `${T.left}px`, p.style.top = `${T.top}px`, p.style.transform = "initial", p.style.transition = "none";
        },
        drag(M) {
          let ie = M.clientX - d, ue = M.clientY - v;
          p.style.left = `${T.left + ie}px`, p.style.top = `${T.top + ue}px`;
        }
      }));
    }
    let w = l.parent || document.body;
    l.type == "h-notice" && w.hasChildNodes() ? w.insertBefore(y, w.firstChild) : w.appendChild(y);
    let b = document.querySelector(":focus");
    if (b && l.type === ni.MODAL && b.blur(), l.hasCloseIcon && (y.querySelector(`.${ai}`).onclick = function() {
      i.close();
    }), l.hasFooter) {
      let d = y.querySelectorAll(`.${wt} .${l.type}-footer>button`);
      for (let v of d)
        v.onclick = function(T) {
          let C = T.target.getAttribute("attr");
          C && (C == "cancel" && i.close(), i.trigger(C));
        };
    }
    if (window.setTimeout(() => {
      if (f.addClass(y, ui), l.hasMask) {
        let d = document.documentElement, v = window.innerWidth - d.clientWidth;
        d.style.overflow = "hidden", d.style.paddingRight = `${v}px`;
      }
    }, 20), l.events && f.isFunction(l.events.$init) && l.events.$init.call(null, i, g), l.timeout && (y.addEventListener("mouseover", () => {
      this.mouseoverEvent = !0;
    }), y.addEventListener("mouseleave", () => {
      this.mouseoverEvent = !1, this.closeTimeout && i.close();
    }), window.setTimeout(() => {
      this.closeTimeout = !0, this.mouseoverEvent || i.close();
    }, l.timeout)), l.closeOnMask && l.hasMask) {
      y.querySelector(`.${hi}`).onclick = () => {
        this.close();
      };
      let d = y.querySelector(`.${oi}`);
      d && (d.onclick = (v) => {
        v.target == d && this.close();
      });
    }
    this.popstateEvent = () => {
      this.close();
    }, window.addEventListener("popstate", this.popstateEvent);
  }
  trigger(t, ...i) {
    let l = this.param;
    l.events && f.isFunction(l.events[t]) && l.events[t].call(null, this, ...i);
  }
  close() {
    const t = this.el;
    this.drag && this.drag.destroy();
    let i = document.documentElement;
    i.style.overflow = "", i.style.paddingRight = "", this.trigger("$close"), window.removeEventListener("popstate", this.popstateEvent), f.removeClass(t, ui), t.addEventListener("transitionend", (l) => {
      l.target == this.$container && f.removeDom(t);
    }), setTimeout(() => {
      f.removeDom(t);
    }, 400);
  }
}
function dt(e) {
  return new cn(e);
}
const di = "h-message";
let hs = {
  timeout: 3e3
};
const fn = {
  info: "blue",
  success: "green",
  warn: "yellow",
  error: "red",
  loading: "blue"
};
let Be = null;
function be(e, t, i, l) {
  Be || (Be = document.createElement("div"), f.addClass(Be, `${di}-container`), document.body.appendChild(Be));
  let n = {
    type: di,
    content: `<div><i class="h-icon-${i} ${fn[i]}-color"></i>${e}</div>`,
    event: {
      close: l
    },
    timeout: t,
    parent: Be
  };
  return n = f.extend({}, hs, n, !0), n.timeout < 1 && (n.hasCloseIcon = !0), dt(n);
}
function R(e, t, i) {
  return f.isObject(e) ? be(e.text, e.timeout, e.type || "info", e.onClose) : be(e, t, "info", i);
}
R.info = (e, t, i) => be(e, t, "info", i);
R.success = (e, t, i) => be(e, t, "success", i);
R.warn = (e, t, i) => be(e, t, "warn", i);
R.error = (e, t, i) => be(e, t, "error", i);
R.loading = (e, t, i) => be(e, t, "loading", i);
R.config = (e) => {
  e.timeout != null && (hs.timeout = e.timeout);
};
const ce = "h-categorypicker", fe = "-------", mn = {
  name: "HCategoryPicker",
  components: { Checkbox: je },
  mixins: [Y],
  emits: ["update:modelValue", "input", "update", "clear", "loadDataSuccess", "change"],
  props: {
    option: Object,
    multiple: {
      type: Boolean,
      default: !1
    },
    type: {
      type: [String],
      default: "key"
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    limit: Number,
    placeholder: {
      type: String
    },
    filterable: {
      type: Boolean,
      default: !0
    },
    showAllLevels: {
      type: Boolean,
      default: !0
    },
    showChildCount: {
      type: Boolean,
      default: !1
    },
    modelValue: [Number, String, Array, Object],
    config: String,
    className: String
  },
  data() {
    return {
      dropdown: null,
      globalloading: !1,
      loading: !0,
      objects: [],
      object: null,
      tabs: [
        {
          title: this.hlang("h.categoryModal.total"),
          key: fe
        }
      ],
      tab: fe,
      categoryDatas: [],
      categoryObj: {},
      searchValue: null,
      tabIndex: 0,
      list: [],
      valueBak: null
    };
  },
  computed: {
    showPlaceholder() {
      return this.placeholder || this.hlang("h.categoryPicker.placeholder");
    },
    param() {
      return this.config ? f.extend({}, $.getOption("categoryPicker.default"), $.getOption(`categoryPicker.configs.${this.config}`), this.option) : f.extend({}, $.getOption("categoryPicker.default"), this.option);
    },
    categoryCls() {
      return {
        [`${ce}`]: !0,
        [`${ce}-input-border`]: !0,
        [`${ce}-no-autosize`]: !0,
        [`${ce}-multiple`]: this.multiple,
        [`${ce}-disabled`]: this.disabled
      };
    },
    groupCls() {
      return {
        [`${ce}-group`]: !0,
        [`${ce}-multiple`]: this.multiple,
        [`${this.className}-dropdown`]: !!this.className
      };
    }
  },
  watch: {
    disabled() {
      this.dropdown && (this.disabled ? this.dropdown.disabled() : this.dropdown.enabled());
    },
    "option.datas": function() {
      this.initCategoryDatas();
    },
    modelValue() {
      this.valueBak != this.modelValue && (this.parse(), this.tab = fe, this.tabs = [
        {
          title: this.hlang("h.categoryModal.total"),
          key: fe
        }
      ], this.list = this.categoryDatas);
    }
  },
  mounted() {
    this.init(), this.initCategoryDatas();
  },
  methods: {
    init() {
      this.$nextTick(() => {
        let e = this.el = this.$el.querySelector(".h-categorypicker-show");
        this.content = this.$el.querySelector(".h-categorypicker-group");
        let t = this;
        this.dropdown = new he(e, {
          trigger: "click",
          content: this.content,
          disabled: this.disabled,
          events: {
            show() {
              t.isShow = !0;
            }
          }
        });
      });
    },
    refresh() {
      this.tab = fe, this.tabs = [
        {
          title: this.hlang("h.categoryModal.total"),
          key: fe
        }
      ], this.initCategoryDatas();
    },
    remove(e) {
      this.objects.splice(this.objects.indexOf(e), 1), this.setvalue("remove");
    },
    clear() {
      this.object = null, this.setvalue("clear");
    },
    parse() {
      if (this.multiple) {
        let e = [];
        if (f.isArray(this.modelValue) && this.modelValue.length > 0)
          for (let t of this.modelValue) {
            let i = this.getValue(t);
            i && e.push(i);
          }
        this.objects = e, this.object = null;
      } else
        this.object = this.getValue(this.modelValue), this.objects = [];
    },
    getValue(e) {
      return f.isNull(e) ? null : this.type == "key" ? this.categoryObj[e] : f.getValue(e, this.param);
    },
    getShow(e) {
      return this.showAllLevels ? (e = this.categoryObj[e.key] || e, this.getParentTitle(e).reverse().join("/")) : e.title;
    },
    getParentTitle(e) {
      let t = [e.title];
      return e.parentKey != null && this.categoryObj[e.parentKey] && t.push(...this.getParentTitle(this.categoryObj[e.parentKey])), t;
    },
    getFullData() {
      if (this.multiple) {
        let e = [];
        for (let t of this.objects) {
          let i = this.categoryObj[t.key] || this.object;
          e.push(this.getParent(i));
        }
        return e;
      } else if (this.object) {
        let e = this.categoryObj[this.object.key] || this.object;
        return this.getParent(e);
      }
      return null;
    },
    getParent(e) {
      let t = [f.copy(e.value)];
      return e.parentKey != null && this.categoryObj[e.parentKey] && t.push(...this.getParent(this.categoryObj[e.parentKey])), t;
    },
    dispose() {
      return this.multiple ? this.objects.map((e) => this.type == "key" ? e.key : e.value).filter((e) => e !== void 0).map((e) => this.type == "key" ? e : this.getDisposeValue(e)) : this.object ? this.type == "key" ? this.object.key : this.getDisposeValue(this.object.value) : null;
    },
    getDisposeValue(e) {
      let t = { ...e };
      return delete t[this.param.childrenName], t;
    },
    setvalue(e) {
      let t = this.dispose();
      this.$emit("input", t), this.$emit("update:modelValue", t), this.$emit("change", f.copy(this.multiple ? this.objects : this.object)), e != "clear" && (this.valueBak = t);
      let i = document.createEvent("CustomEvent");
      i.initCustomEvent("setvalue", !0, !0, t), this.$el.dispatchEvent(i), this.dropdownUpdate();
    },
    initCategoryDatas() {
      let e = [];
      if (f.isArray(this.param.datas) ? e = this.param.datas : f.isFunction(this.param.datas) && (e = this.param.datas.apply(this.param)), f.isFunction(this.param.getTotalDatas) || f.isFunction(this.param.getDatas)) {
        e = [], this.globalloading = !0;
        let t = this.param.getTotalDatas || this.param.getDatas, i = [
          (l) => {
            this.initDatas(f.copy(l)), this.globalloading = !1, this.$emit("loadDataSuccess");
          },
          () => {
            this.globalloading = !1;
          }
        ];
        this.param.getDatas && i.unshift(null), t.apply(this.param, i);
      }
      this.initDatas(e);
    },
    initDatas(e) {
      let t = f.copy(e);
      this.param.dataMode == "list" && e.length > 0 && (t = f.generateTree(t, this.param));
      let i = f.isFunction(this.param.getDatas);
      this.categoryDatas = this.initTreeModeData(t, null, i, 0), this.list = this.categoryDatas, this.parse();
    },
    initTreeModeData(e, t, i, l) {
      let n = [];
      for (let s of e) {
        let r = {
          key: s[this.param.keyName],
          title: s[this.param.titleName],
          value: s,
          parentKey: t,
          status: {
            level: l,
            loading: !1,
            isWait: i,
            opened: !1,
            selected: !1,
            selectable: this.param.selectable ? this.param.selectable(s, l) : s.selectable !== !1,
            checkable: this.param.checkable ? this.param.checkable(s, l) : s.checkable !== !1
          }
        }, o = s[this.param.childrenName] || [];
        r.children = this.initTreeModeData(o, r.key, i, l + 1), this.categoryObj[r.key] = r, n.push(r);
      }
      return n;
    },
    openNew(e, t) {
      t && (t.stopPropagation(), t.preventDefault()), e.children && e.children.length ? (this.tabIndex = this.tabIndex + 1, this.tabs.splice(this.tabIndex), this.tabs.push(e), this.tab = e.key, this.list = e.children, this.multiple || this.change(e), this.dropdownUpdate()) : e.status.isWait ? (e.status.loading = !0, this.param.getDatas.call(
        this.param,
        e.value,
        (i) => {
          e.children = this.initTreeModeData(i, e.key, !0, e.status.level + 1), e.status.isWait = !1, e.status.loading = !1, e.status.opened = !0, this.openNew(e);
        },
        () => {
          e.status.loading = !1;
        }
      )) : this.change(e);
    },
    focusTab(e, t) {
      this.tab = e.key, this.tabIndex = t, e.key === fe ? this.list = this.categoryDatas : this.list = e.children;
    },
    change(e) {
      if (!(!this.multiple && e.status.selectable === !1) && !(this.multiple && e.status.checkable === !1)) {
        if (this.multiple) {
          if (this.objects.length >= this.limit && !this.param.objects.some((t) => t.key === e.key)) {
            R.error(
              this.hlang("h.categoryPicker.limitWords", {
                size: this.limit
              })
            );
            return;
          }
          f.toggleValueByKey(this.objects, "key", e);
        } else
          this.object = e;
        this.multiple ? this.dropdownUpdate() : e.children && e.children.length || this.dropdown.hide(), this.setvalue("picker");
      }
    },
    dropdownUpdate() {
      this.$nextTick(() => {
        this.dropdown.update();
      });
    },
    isChecked(e) {
      return this.multiple ? this.objects.some((t) => t.key == e.key) : this.object ? this.object.key == e.key : !1;
    }
  }
}, pn = ["disabled"], gn = { class: "h-categorypicker-show" }, yn = {
  key: 0,
  class: "h-categorypicker-multiple-tags"
}, bn = ["onClick"], vn = {
  key: 1,
  class: "h-categorypicker-value-single"
}, wn = {
  key: 2,
  class: "h-categorypicker-placeholder"
}, kn = {
  key: 0,
  class: "h-icon-loading"
}, Sn = ["onClick"], Cn = { key: 0 };
function xn(e, t, i, l, n, s) {
  const r = L("Tabs"), o = L("Checkbox");
  return a(), h("div", {
    class: S(s.categoryCls),
    disabled: i.disabled
  }, [
    m("div", gn, [
      i.multiple && n.objects.length ? (a(), h("div", yn, [
        (a(!0), h(O, null, E(n.objects, (c, u) => (a(), h("span", {
          key: u + "" + c.key
        }, [
          m("span", null, _(s.getShow(c)), 1),
          i.disabled ? k("", !0) : (a(), h("i", {
            key: 0,
            class: "h-icon-close-min",
            onClick: B((y) => s.remove(c), ["stop"])
          }, null, 8, bn))
        ]))), 128))
      ])) : !i.multiple && n.object ? (a(), h("div", vn, [
        m("span", null, _(s.getShow(n.object)), 1),
        n.object && !i.disabled ? (a(), h("i", {
          key: 0,
          class: "h-icon-close",
          onMousedown: t[0] || (t[0] = (...c) => s.clear && s.clear(...c))
        }, null, 32)) : k("", !0)
      ])) : (a(), h("div", wn, _(s.showPlaceholder), 1))
    ]),
    m("div", {
      class: S(s.groupCls)
    }, [
      I(r, {
        modelValue: n.tab,
        "onUpdate:modelValue": t[1] || (t[1] = (c) => n.tab = c),
        datas: n.tabs,
        class: "h-categorypicker-tabs",
        "key-name": "key",
        "title-name": "title",
        onChange: s.focusTab
      }, null, 8, ["modelValue", "datas", "onChange"]),
      m("div", {
        class: S(["h-categorypicker-ul", { "h-categorypicker-single-picker": !i.multiple }])
      }, [
        (a(!0), h(O, null, E(n.list, (c) => (a(), h("div", {
          key: c.key,
          class: S(["h-categorypicker-item", { "h-categorypicker-item-selected": n.object && c.key == n.object.key }])
        }, [
          c.status.loading ? (a(), h("i", kn)) : c.status.checkable && i.multiple ? (a(), A(o, {
            key: 1,
            checked: s.isChecked(c),
            onChange: (u) => s.change(c),
            onClick: t[2] || (t[2] = B(() => {
            }, ["stop"]))
          }, null, 8, ["checked", "onChange"])) : k("", !0),
          m("span", {
            class: "h-categorypicker-item-title",
            onClick: (u) => s.openNew(c, u)
          }, [
            F(_(c.title), 1),
            i.showChildCount && c.children.length ? (a(), h("span", Cn, "(" + _(c.children.length) + ")", 1)) : k("", !0)
          ], 8, Sn)
        ], 2))), 128))
      ], 2)
    ], 2)
  ], 10, pn);
}
const _n = /* @__PURE__ */ V(mn, [["render", xn]]);
var us = { exports: {} };
(function(e) {
  (function(t) {
    e.exports ? e.exports = t() : this.manba = t();
  })(function() {
    var t = { l: "YYYY-MM-DD", ll: "YYYY\u5E74MM\u6708DD\u65E5", k: "YYYY-MM-DD hh:mm", kk: "YYYY\u5E74MM\u6708DD\u65E5 hh\u70B9mm\u5206", kkk: "YYYY\u5E74MM\u6708DD\u65E5 hh\u70B9mm\u5206 q", f: "YYYY-MM-DD hh:mm:ss", ff: "YYYY\u5E74MM\u6708DD\u65E5 hh\u70B9mm\u5206ss\u79D2", fff: "YYYY\u5E74MM\u6708DD\u65E5 hh\u70B9mm\u5206ss\u79D2 \u661F\u671Fw", n: "MM-DD", nn: "MM\u6708DD\u65E5" }, i = 0, l = 36e5, n = 864e5, s = new Date(1970, 0, 1, 0, 0, 0).getTime(), r = ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"], o = ["\u4E0A\u5348", "\u4E0B\u5348"];
    function c(d, v) {
      return u.initmanba(this, d, v), this;
    }
    c.prototype.format = function(d) {
      var v = this.isValid();
      return v !== !0 ? v : u.format(this._date, t[d = d || "l"] || d);
    }, c.prototype.UTCformat = function(d) {
      var v = this.isValid();
      return v !== !0 ? v : u.UTCformat(this._date, t[d = d || "l"] || d);
    }, c.prototype.toString = function() {
      var d = this.isValid();
      return d !== !0 ? d : this._date.toString();
    }, c.prototype.toISOString = function(d) {
      var v = this.isValid();
      return v !== !0 ? v : (v = 0, d = 0 <= (v = d !== void 0 ? 60 * d : -new Date().getTimezoneOffset()) ? "+" : "-", b(this.time() + 60 * v * 1e3).UTCformat("yyyy-MM-ddThh:mm:ss") + d + u.pad(parseInt(v / 60)) + ":" + u.pad(v % 60));
    }, c.prototype.toLocalString = function() {
      var v = this.isValid();
      if (v !== !0)
        return v;
      var d = -new Date().getTimezoneOffset(), v = 0 <= d ? "+" : "-";
      return this.format("yyyy-MM-ddThh:mm:ss") + v + u.pad(parseInt(d / 60)) + ":" + u.pad(d % 60);
    }, c.prototype.distance = function(d, v, T) {
      var C = this.isValid();
      if (C !== !0)
        return C;
      var M = this;
      if (v = v || b.DAY, (C = (d = b(d)).isValid()) !== !0)
        return C;
      switch (v) {
        case b.MINUTE:
          return Math.floor((M.time() - d.time()) / 60 / 1e3);
        case b.HOUR:
          return u.getHours(M._date) - u.getHours(d._date);
        case b.DAY:
          return u.getDays(M._date) - u.getDays(d._date);
        case b.WEEK:
          return (u.getDays(M.startOf(b.WEEK, T)._date) - u.getDays(d.startOf(b.WEEK, T)._date)) / 7;
        case b.MONTH:
          return u.getMonths(M._date) - u.getMonths(d._date);
        case b.YEAR:
          return M._date.getYear() - d._date.getYear();
      }
      return 0;
    }, c.prototype.getWeekOfYear = function(v) {
      v = +(v || 0), (isNaN(v) || 6 < v) && (v = 0);
      var T = this.startOf(b.YEAR), v = (7 - T.day() + v) % 7, T = (this.startOf(b.DAY).time() - T.time()) / 864e5 + 1;
      return Math.ceil((T - v) / 7);
    }, c.prototype.getWeekOfMonth = function(d) {
      d = +(d || 0), (isNaN(d) || 6 < d) && (d = 0);
      var v = this.day(), T = this.date();
      return Math.ceil((T - v - 1) / 7) + (d <= v ? 1 : 0);
    }, c.prototype.isLeapYear = function() {
      var d = this.isValid();
      return d !== !0 ? d : u.isLeapYear(this.year());
    }, c.prototype.isThisYear = function() {
      var d = this.isValid();
      return d !== !0 ? d : u.timestamp(this._date);
    }, c.prototype.isBefore = function() {
      var d = this.isValid();
      return d !== !0 ? d : u.timestamp(this._date);
    }, c.prototype.isAfter = function() {
      var d = this.isValid();
      return d !== !0 ? d : u.timestamp(this._date);
    }, c.prototype.month = function(d) {
      var v = this.isValid();
      return v !== !0 ? v : d == null ? this._date.getMonth() + 1 : (d = parseInt(d), d = this._date.setMonth(d - 1), this);
    }, c.prototype.add = function(d, v) {
      var T = this.isValid();
      if (T !== !0)
        return T;
      var C = this;
      switch (d = parseInt(d), v = v || b.DAY) {
        case b.DAY:
          C.time(C.time() + d * n);
          break;
        case b.MONTH:
          var M = C.date(), ie = C.month() + d;
          C.month(ie), C.date() != M && (C.add(-1, b.MONTH), C.date(C.endOf(b.MONTH).date()));
          break;
        case b.QUARTER:
          C.month(C.month() + 3 * d);
          break;
        case b.YEAR:
          C.year(C.year() + d);
          break;
        case b.WEEK:
          C.time(C.time() + 6048e5 * d);
          break;
        case b.HOUR:
          C.time(C.time() + d * l);
          break;
        case b.MINUTE:
          C.time(C.time() + 6e4 * d);
          break;
        case b.SECOND:
          C.time(C.time() + 1e3 * d);
          break;
        case b.TIME:
          C.time(C.time() + d);
      }
      return C;
    }, c.prototype.clone = function() {
      return new c(this);
    }, c.prototype.endOf = function(d, v) {
      var T = this.isValid();
      return T !== !0 ? T : (T = new c(this), d = d || b.DAY, (T = T.startOf(d, v)).add(1, d), T.add(-1, b.SECOND), T);
    }, c.prototype.startOf = function(d, v) {
      var T = this.isValid();
      if (T !== !0)
        return T;
      var C = new c(this);
      switch (d = d || b.DAY) {
        case b.DAY:
          C.milliseconds(0), C.seconds(0), C.minutes(0), C.hours(0);
          break;
        case b.MONTH:
          C.date(1), C = C.startOf(b.DAY);
          break;
        case b.QUARTER:
          (C = C.startOf(b.MONTH)).add(-(C.month() - 1) % 3, b.MONTH);
          break;
        case b.WEEK:
          var C = C.startOf(b.DAY), M = (v = v || b.SUNDAY) == b.SUNDAY ? 0 : 1;
          C.day() == 0 && M == 1 && (M = -6), C.add(-C.day() + M, b.DAY);
          break;
        case b.YEAR:
          (C = C.startOf(b.DAY)).month(1), C.date(1);
          break;
        case b.HOUR:
          C.time(Math.floor(C.time() / l) * l);
      }
      return C;
    }, c.prototype.isValid = function() {
      return !!u.isDate(this._date) || "Invalid Date";
    }, c.prototype.getServerTime = function() {
      return i != 0 ? this.add(i, b.TIME) : this;
    };
    var u = { initmanba: function(d, v, T) {
      var C = new Date();
      v != null && (u.isNumber(v) ? C.setTime(v) : u.isArray(v) ? (u.padMonth(v), C = u.initDateWithArray(v)) : u.isDate(v) ? C = v : u.isString(v) ? C = u.parse(v, T) : v instanceof c && (C = new Date(v.time()))), d._date = C;
    }, initDateWithArray: function(d) {
      return 1 < d.length ? new Date(new (Function.prototype.bind.apply(Date, [0].concat(d)))().setFullYear(d[0])) : new Date();
    }, pad: function(d, v) {
      v = v || 2;
      var T = "0";
      return (d = String(Math.abs(d) || 0)).length >= v ? d : (v -= d.length, (T += Array(v + 1).join(T)).slice(0, v) + String(d));
    }, parse: function(d, M) {
      if (u.isString(M)) {
        var T = { Y: 0, M: 1, D: 1, H: 0, m: 0, S: 0 };
        return M.replace(/([^YyMDdHhmsS]*?)(([YyMDdHhmsS])\3*)([^YyMDdHhmsS]*?)/g, function(ie, ue, we, de, P, ee, ke) {
          return we = parseInt(d.substr(ee + ue.length, we.length), 10), de.toLowerCase() == "m" ? T[de] = we : T[de.toUpperCase()] = we, "";
        }), T.M--, C = u.initDateWithArray([T.Y, T.M, T.D, T.H, T.m, T.S]);
      }
      var C, M = /^(\d{4,})\-(\d{2})\-(\d{2})\s?\:?(\d{2})?\:?(\d{2})?\:?(\d{2})?$/i.exec(d);
      if (M !== null)
        return M.shift(), u.padMonth(M), u.popUndefined(M), u.initDateWithArray(M);
      if ((C = new Date(d)) == "Invalid Date")
        throw new Error("Invalid date parse from " + d);
      return C;
    }, popUndefined: function(d) {
      return 0 < d.length && d[d.length - 1] == null ? (d.pop(), u.popUndefined(d)) : d;
    }, padMonth: function(d) {
      1 < d.length && 0 < d[1] && --d[1];
    }, isLeapYear: function(d) {
      return d % 4 == 0 && d % 100 != 0 || d % 400 == 0;
    }, format: function(d, v) {
      return v.replace(/yyyy|YYYY/, this.pad(d.getFullYear(), 4)).replace(/yy|YY/, 8 < d.getFullYear() % 100 ? (d.getFullYear() % 100).toString() : "0" + d.getFullYear() % 100).replace(/MM/, 8 < d.getMonth() ? (d.getMonth() + 1).toString() : "0" + (d.getMonth() + 1)).replace(/M/g, d.getMonth() + 1).replace(/w|W/g, r[d.getDay()]).replace(/dd|DD/, this.pad(d.getDate())).replace(/d|D/g, d.getDate()).replace(/hh|HH/, this.pad(d.getHours())).replace(/h|H/g, d.getHours()).replace(/mm/, this.pad(d.getMinutes())).replace(/m/g, d.getMinutes()).replace(/ss|SS/, this.pad(d.getSeconds())).replace(/s|S/g, d.getSeconds()).replace(/q|Q/g, 12 < d.getHours() ? o[1] : o[0]);
    }, UTCformat: function(d, v) {
      return v.replace(/yyyy|YYYY/, this.pad(d.getUTCFullYear(), 4)).replace(/yy|YY/, 8 < d.getUTCFullYear() % 100 ? (d.getUTCFullYear() % 100).toString() : "0" + d.getUTCFullYear() % 100).replace(/MM/, 8 < d.getUTCMonth() ? (d.getUTCMonth() + 1).toString() : "0" + (d.getUTCMonth() + 1)).replace(/M/g, d.getUTCMonth() + 1).replace(/w|W/g, r[d.getUTCDay()]).replace(/dd|DD/, this.pad(d.getUTCDate())).replace(/d|D/g, d.getUTCDate()).replace(/hh|HH/, this.pad(d.getUTCHours())).replace(/h|H/g, d.getUTCHours()).replace(/mm/, this.pad(d.getUTCMinutes())).replace(/m/g, d.getUTCMinutes()).replace(/ss|SS/, this.pad(d.getUTCSeconds())).replace(/s|S/g, d.getUTCSeconds()).replace(/q|Q/g, 12 < d.getUTCHours() ? o[1] : o[0]);
    }, timestamp: function(d) {
      return Math.floor(d.getTime() / 1e3);
    }, getDays: function(d) {
      return Math.floor((d.getTime() - s) / n);
    }, getHours: function(d) {
      return Math.floor((d.getTime() - s) / l);
    }, getMonths: function(d) {
      return 12 * d.getYear() + d.getMonth() + 1;
    }, isObject: function(d) {
      return Object.prototype.toString.call(d) === "[object Object]";
    }, isArray: function(d) {
      return d instanceof Array || Object.prototype.toString.call(d) === "[object Array]";
    }, isDate: function(d) {
      return d instanceof Date || Object.prototype.toString.call(d) === "[object Date]";
    }, isNumber: function(d) {
      return d instanceof Number || Object.prototype.toString.call(d) === "[object Number]";
    }, isString: function(d) {
      return d instanceof String || Object.prototype.toString.call(d) === "[object String]";
    }, extend: function(d, v) {
      for (var T in v)
        y(v, T) && (d[T] = v[T]);
      return y(v, "toString") && (d.toString = v.toString), y(v, "valueOf") && (d.valueOf = v.valueOf), d;
    }, makeGetSet: function(d) {
      return function(v) {
        return v != null ? (Date.prototype["set" + d].call(this._date, v), this) : Date.prototype["get" + d].call(this._date);
      };
    } };
    function y(d, v) {
      return Object.prototype.hasOwnProperty.call(d, v);
    }
    var g, p = c.prototype, w = { year: "FullYear", day: "Day", date: "Date", hours: "Hours", milliseconds: "Milliseconds", seconds: "Seconds", minutes: "Minutes", time: "Time" };
    for (g in w)
      p[g] = u.makeGetSet(w[g]);
    var b = function(d, v) {
      return d instanceof c ? new c(d) : u.isObject(d) ? (d.formatString && u.isObject(d.formatString) && u.extend(t, d.formatString), void (d.now && (i = b(d.now).time() - b().time()))) : new c(d, v);
    };
    return b.config = function(d) {
      d.formatString && u.isObject(d.formatString) && u.extend(t, d.formatString), d.now && (i = b(d.now).time() - b().time());
    }, b.SECOND = "SECOND", b.MINUTE = "MINUTE", b.HOUR = "HOUR", b.DAY = "DAY", b.MONTH = "MONTH", b.YEAR = "YEAR", b.WEEK = "WEEK", b.TIME = "TIME", b.QUARTER = "QUARTER", b.MONDAY = 1, b.TUESDAY = 2, b.WEDNESDAY = 3, b.THURSDAY = 4, b.FRIDAY = 5, b.SATURDAY = 6, b.SUNDAY = 7, b;
  });
})(us);
const x = us.exports, ci = "h-date", Tn = ["year", "month", "date", "hour", "minute", "second"], On = ["year", "month", "week"], Nn = ["year", "quarter"], fi = $.getOption("datepicker"), kt = {
  year: "year",
  month: "month",
  date: "date",
  week: "week",
  quarter: "quarter",
  datetime: "date",
  datehour: "date",
  time: "hour"
}, $n = {
  year: "year",
  month: "month",
  date: "date",
  week: "week",
  quarter: "quarter",
  datetime: "minute",
  datehour: "hour",
  time: "minute"
}, Vn = {
  year: 10,
  month: 10,
  date: 10,
  week: 10,
  quarter: 10,
  hour: 13,
  minute: 16
}, se = (e) => {
  let { date: t, type: i, show: l, vm: n, isNowDays: s, view: r } = e, o = !1;
  f.isObject(n.option) && (n.option.start && (o = t.distance(n.option.start, i) < 0), n.option.end && !o && (o = t.distance(n.option.end, i) > 0), n.option.disabled && !o && (o = n.option.disabled.call(null, t)));
  let c = t.distance(n.today, i), u = c == 0;
  return r == "quarter" && (u = c >= -2 && c <= 0), {
    date: t,
    show: l,
    string: t.format(n.format),
    disabled: o,
    isToday: u,
    isNowDays: s
  };
}, Dn = {
  name: "HDateBase",
  mixins: [Y],
  emits: ["updateValue", "updateView", "updateRangeEnd", "changeValue", "changeView"],
  props: {
    type: {
      type: [String],
      default: "date"
    },
    option: Object,
    format: String,
    value: [Object, String],
    nowView: Object,
    range: String,
    rangeEnd: String,
    startWeek: {
      type: Number,
      default: () => $.getOption("datepicker.startWeek")
    }
  },
  data() {
    return {
      options: f.extend({}, fi.datetimeOptions, this.option),
      today: x(),
      view: kt[this.type]
    };
  },
  computed: {
    valueTime() {
      return this.value ? {
        start: this.value.start ? x(this.value.start, this.format).time() : null,
        end: this.value.end ? x(this.value.end, this.format).time() : null
      } : {
        start: null,
        end: null
      };
    },
    rangeEndTime() {
      return this.rangeEnd ? x(this.rangeEnd, this.format).time() : null;
    },
    dateBodyCls() {
      return {
        [`${ci}-body`]: !0,
        [`${ci}-body-${this.view}`]: !0
      };
    },
    weeks() {
      let e = [
        this.hlang("h.date.weeks.monday"),
        this.hlang("h.date.weeks.tuesday"),
        this.hlang("h.date.weeks.wednesday"),
        this.hlang("h.date.weeks.thursday"),
        this.hlang("h.date.weeks.friday"),
        this.hlang("h.date.weeks.saturday"),
        this.hlang("h.date.weeks.sunday")
      ], t = e.splice(0, this.startWeek - 1);
      return e.push(...t), e;
    },
    months() {
      return [
        this.hlang("h.date.months.january"),
        this.hlang("h.date.months.february"),
        this.hlang("h.date.months.march"),
        this.hlang("h.date.months.april"),
        this.hlang("h.date.months.may"),
        this.hlang("h.date.months.june"),
        this.hlang("h.date.months.july"),
        this.hlang("h.date.months.august"),
        this.hlang("h.date.months.september"),
        this.hlang("h.date.months.october"),
        this.hlang("h.date.months.november"),
        this.hlang("h.date.months.december")
      ];
    },
    dates() {
      let e = this.nowView;
      if (this.view == "date") {
        let t = e.endOf(x.MONTH), i = e.startOf(x.MONTH), l = i.day();
        l == this.startWeek ? l = -1 : this.startWeek > l ? l = 7 - (this.startWeek - l) - 1 : l = l - this.startWeek - 1;
        let n = i.add(-1, x.DAY), s = [], r = n.date() - l;
        for (let u = r; u <= n.date(); u++)
          s.push(
            se({
              date: x([n.year(), n.month(), u]),
              type: x.DAY,
              show: u,
              vm: this,
              isNowDays: !1
            })
          );
        for (let u = 1; u <= t.date(); u++)
          s.push(
            se({
              date: x([t.year(), t.month(), u]),
              type: x.DAY,
              show: u,
              vm: this,
              isNowDays: !0
            })
          );
        let o = t.add(1, x.DAY), c = 7 * 6 - s.length;
        for (let u = 1; u <= c; u++)
          s.push(
            se({
              date: x([o.year(), o.month(), u]),
              type: x.DAY,
              show: u,
              vm: this,
              isNowDays: !1
            })
          );
        return s;
      } else if (this.view == "month") {
        let t = [];
        for (let i = 1; i <= 12; i++)
          t.push(
            se({
              date: x([e.year(), i, 1]),
              type: x.MONTH,
              show: this.months[i - 1],
              vm: this,
              isNowDays: !0
            })
          );
        return t;
      } else if (this.view == "year") {
        let t = [], i = e.year();
        for (let l = i - 6; l <= i + 5; l++)
          t.push(
            se({
              date: x([l, 1, 1]),
              type: x.YEAR,
              show: l,
              vm: this,
              isNowDays: !0
            })
          );
        return t;
      } else if (this.view == "hour") {
        let t = [], i = [];
        f.isFunction(this.options.hours) ? i = this.options.hours.call(null) : i = f.numList(0, 24, 1);
        for (let l of i)
          t.push(
            se({
              date: x(e.time()).hours(l).minutes(0),
              type: x.HOUR,
              show: f.padLeft(l, 2) + ":00",
              vm: this,
              isNowDays: !0
            })
          );
        return t;
      } else if (this.view == "minute") {
        let t = [], i = e.hours(), l = [];
        f.isFunction(this.options.minutes) ? l = this.options.minutes.call(null, i) : l = f.numList(0, 60, this.options.minuteStep);
        for (let n of l)
          t.push(
            se({
              date: x(e.time()).minutes(n),
              type: x.MINUTE,
              show: f.padLeft(i, 2) + ":" + f.padLeft(n, 2),
              vm: this,
              isNowDays: !0
            })
          );
        return t;
      } else if (this.view == "week") {
        let t = [], i = x(e).add(-1, x.MONTH).endOf(x.MONTH).endOf(x.WEEK, this.startWeek), l = 0;
        i.month() == e.month() ? (i = i.startOf(x.WEEK, this.startWeek), l = 1) : i = i.add(7, x.DATE).startOf(x.WEEK, this.startWeek);
        let n = i.month(), s = l + n;
        for (s = s > 12 ? 1 : s; i.month() == n || i.month() == s; )
          t.push(
            se({
              date: x(i.time()),
              type: x.WEEK,
              show: this.hlang("h.date.show.week", {
                year: i.year(),
                weeknum: i.getWeekOfYear(this.startWeek),
                daystart: i.format("MM-DD"),
                dayend: x(i).add(6).format("MM-DD")
              }),
              vm: this,
              isNowDays: !0
            })
          ), i = i.add(7);
        return t;
      } else if (this.view == "quarter") {
        let t = [], i = e.startOf(x.YEAR);
        for (let l = 1; l < 5; l++)
          t.push(
            se({
              date: x(i.time()),
              type: x.MONTH,
              show: this.hlang("h.date.show.quarter", {
                year: i.year(),
                quarter: l
              }),
              vm: this,
              isNowDays: !0,
              view: this.view
            })
          ), i = i.add(3, x.MONTH);
        return t;
      }
      return [];
    }
  },
  watch: {
    type() {
      this.options = f.extend({}, fi.datetimeOptions, this.option), this.view = kt[this.type];
    }
  },
  mounted() {
    this.$nextTick(() => {
      this.range && (this.$el.addEventListener(
        "mouseenter",
        (e) => {
          if (this.view == "date" && !!this.value.start && !this.value.end) {
            let t = e.target;
            if (t.tagName == "SPAN") {
              let i = t.getAttribute("string");
              i && this.$emit("updateRangeEnd", i);
            }
          }
        },
        !0
      ), this.$el.addEventListener(
        "mouseout",
        () => {
          this.view == "date" && !!this.value.start && !this.value.end && this.$emit("updateRangeEnd", "");
        },
        !0
      ));
    });
  },
  methods: {
    hoursString(e) {
      return `${f.padLeft(e.hours(), 2)}:00`;
    },
    changeView(e) {
      this.view = e, this.$emit("changeView");
    },
    resetView() {
      this.view = kt[this.type];
    },
    updateView(e, t) {
      let i = x.DAY, l = x(this.nowView);
      e == "month" ? (i = x.MONTH, l = l.startOf(x.MONTH)) : e == "hour" ? i = x.HOUR : (i = x.YEAR, this.view == "hour" || this.view == "minute" ? i = x.DAY : this.view == "year" && (t = t * 12, i = x.YEAR)), l.add(t, i), this.$emit("updateView", l.time(), this.range);
    },
    getDateCls(e) {
      let t = !1, i = !1, l = !1, n = !1, s = e.date.time();
      if (f.isObject(this.value))
        t = this.value.start == e.string, i = this.value.end == e.string;
      else {
        let r = Vn[this.view];
        n = this.value.substring(0, r) == e.string.substring(0, r);
      }
      return this.range && f.isObject(this.value) && !!this.value.start && !!this.rangeEnd && (l = this.valueTime.start < s && this.rangeEndTime > s || this.valueTime.start > s && this.rangeEndTime < s), {
        "h-date-not-now-day": !e.isNowDays,
        "h-date-today": e.isToday,
        "h-date-selected": n || t || i,
        "h-date-range-selected": l,
        "h-date-start-selected": t,
        "h-date-end-selected": i,
        "h-date-disabled": e.disabled
      };
    },
    chooseDate(e) {
      if (this.view == $n[this.type])
        this.setvalue(e.date, !0);
      else {
        let t = e.date;
        if (!(this.view == "month" && this.type != "month") && !(this.view == "year" && this.type != "year")) {
          if (this.value) {
            if (this.range)
              try {
                t = x(this.value[this.range]);
              } catch {
                t = x(e.date);
              }
            else
              t = x(this.value);
            switch (this.view) {
              case "minutes":
                t.minutes(e.date.minutes());
                break;
              case "hour":
                t.hours(e.date.hours());
                break;
              case "date":
                t.year(e.date.year()), t.month(e.date.month()), t.date(e.date.date());
                break;
              case "month":
                t.month(e.date.month()), t.month() > e.date.month() && (t.date(1), t = t.add(-1, x.DAY));
                break;
              case "year":
                t.year(e.date.year());
                break;
            }
          }
          this.options.start && x(t).time() < x(this.options.start).time() && (t = this.options.start), this.options.end && x(t).time() > x(this.options.end).time() && (t = this.options.end), this.range || this.setvalue(t, !1);
        }
        let i = Tn;
        this.type == "week" ? i = On : this.type == "quarter" && (i = Nn);
        let l = i.indexOf(this.view);
        this.view = i[l + 1], this.$emit("updateView", x(t).time(), this.range);
      }
    },
    setvalue(e, t = !1) {
      let i = "";
      f.isNull(e) || (i = x(e).format(this.format)), this.$emit("updateValue", i, t, this.range);
    }
  }
}, En = { class: "h-date-content" }, Mn = {
  key: 0,
  class: "h-date-header"
}, jn = /* @__PURE__ */ m("i", { class: "h-icon-left" }, null, -1), Ln = /* @__PURE__ */ m("i", { class: "h-icon-left" }, null, -1), An = [
  jn,
  Ln
], Bn = /* @__PURE__ */ m("i", { class: "h-icon-left" }, null, -1), In = [
  Bn
], Hn = {
  key: 1,
  class: "h-date-header-show"
}, Fn = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), Pn = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), Wn = [
  Fn,
  Pn
], Rn = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), Un = [
  Rn
], zn = { class: "h-date-header" }, Yn = /* @__PURE__ */ m("i", { class: "h-icon-left" }, null, -1), qn = [
  Yn
], Kn = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), Xn = [
  Kn
], Gn = {
  key: 0,
  class: "h-date-body-weeks"
}, Jn = { class: "h-date-body-pickers" }, Qn = ["string", "onClick"];
function Zn(e, t, i, l, n, s) {
  return a(), h("div", En, [
    i.type != "time" ? (a(), h("div", Mn, [
      m("span", {
        class: "h-date-year-left-picker",
        onClick: t[0] || (t[0] = B((r) => s.updateView("default", -1), ["stop"]))
      }, An),
      W(m("span", {
        class: "h-date-month-left-picker",
        onClick: t[1] || (t[1] = B((r) => s.updateView("month", -1), ["stop"]))
      }, In, 512), [
        [Q, n.view == "date" || n.view == "week"]
      ]),
      n.view != "year" ? (a(), h("span", {
        key: 0,
        class: "h-date-header-show",
        onClick: t[2] || (t[2] = B((r) => s.changeView("year"), ["stop"]))
      }, _(i.nowView.year()), 1)) : k("", !0),
      n.view == "year" ? (a(), h("span", Hn, _(i.nowView.year() - 6) + "\xA0\xA0-\xA0\xA0" + _(i.nowView.year() + 5), 1)) : k("", !0),
      W(m("span", {
        class: "h-date-header-show",
        onClick: t[3] || (t[3] = B((r) => s.changeView("month"), ["stop"]))
      }, _(s.months[i.nowView.month() - 1]), 513), [
        [Q, n.view != "year" && n.view != "month" && n.view != "quarter"]
      ]),
      W(m("span", {
        class: "h-date-header-show",
        onClick: t[4] || (t[4] = B((r) => s.changeView("date"), ["stop"]))
      }, _(i.nowView.date()), 513), [
        [Q, n.view == "hour" || n.view == "minute"]
      ]),
      m("span", {
        class: "h-date-year-right-picker",
        onClick: t[5] || (t[5] = B((r) => s.updateView("default", 1), ["stop"]))
      }, Wn),
      W(m("span", {
        class: "h-date-month-right-picker",
        onClick: t[6] || (t[6] = B((r) => s.updateView("month", 1), ["stop"]))
      }, Un, 512), [
        [Q, n.view == "date" || n.view == "week"]
      ])
    ])) : k("", !0),
    W(m("div", zn, [
      m("span", {
        class: "h-date-month-left-picker",
        onClick: t[7] || (t[7] = B((r) => s.updateView("hour", -1), ["stop"]))
      }, qn),
      m("span", {
        class: "h-date-header-show",
        onClick: t[8] || (t[8] = B((r) => s.changeView("hour"), ["stop"]))
      }, _(s.hoursString(i.nowView)), 1),
      m("span", {
        class: "h-date-month-right-picker",
        onClick: t[9] || (t[9] = B((r) => s.updateView("hour", 1), ["stop"]))
      }, Xn)
    ], 512), [
      [Q, n.view == "minute"]
    ]),
    m("div", {
      class: S(s.dateBodyCls)
    }, [
      n.view == "date" ? (a(), h("div", Gn, [
        (a(!0), h(O, null, E(s.weeks, (r) => (a(), h("span", { key: r }, _(r), 1))), 128))
      ])) : k("", !0),
      m("div", Jn, [
        (a(!0), h(O, null, E(s.dates, (r) => (a(), h("span", {
          key: r.string,
          string: r.string,
          class: S(s.getDateCls(r)),
          onClick: B((o) => s.chooseDate(r), ["stop"])
        }, _(r.show), 11, Qn))), 128))
      ])
    ], 2)
  ]);
}
const zt = /* @__PURE__ */ V(Dn, [["render", Zn]]), Ce = "h-datetime", er = {
  year: x.YEAR,
  month: x.MONTH,
  date: x.DAY,
  datetime: x.MINUTE,
  time: x.MINUTE,
  datehour: x.HOUR
}, St = $.getOption("datepicker"), tr = {
  name: "HDatePicker",
  components: {
    dateBase: zt
  },
  mixins: [Y],
  props: {
    disabled: {
      type: Boolean,
      default: !1
    },
    readonly: {
      type: Boolean,
      default: !1
    },
    type: {
      type: [String],
      default: "date"
    },
    option: Object,
    format: String,
    noBorder: {
      type: Boolean,
      default: !1
    },
    hasSeconds: {
      type: Boolean,
      default: !1
    },
    placeholder: {
      type: String
    },
    hasButtons: {
      type: Boolean,
      default: !1
    },
    modelValue: String,
    inline: {
      type: Boolean,
      default: !1
    },
    placement: {
      type: String,
      default: "bottom-start"
    },
    startWeek: {
      type: Number,
      default: () => $.getOption("datepicker.startWeek")
    },
    clearable: {
      type: Boolean,
      default: () => $.getOption("datepicker.clearable")
    }
  },
  emits: ["update:modelValue", "change", "confirm", "clear"],
  data() {
    return {
      nowDate: "",
      showDate: "",
      nowView: x(),
      isShow: this.inline
    };
  },
  computed: {
    showPlaceholder() {
      return this.placeholder || this.hlang("h.datepicker.placeholder");
    },
    nowFormat() {
      let e = this.format;
      return e || (e = St.format[this.type], this.type == "datetime" && this.hasSeconds && (e = St.format.datetimesecond)), e;
    },
    hasConfirm() {
      return this.type == "datetime" || this.type == "datehour" || this.hasButtons;
    },
    shortcuts() {
      let e = [], t = null;
      if (this.option && this.option.shortcuts && (t = this.option.shortcuts), f.isArray(t))
        for (let i of t)
          f.isString(i) ? e.push(St.shortcuts[i]) : f.isObject(i) && e.push(i);
      return e;
    },
    dateCls() {
      return {
        [`${Ce}`]: !this.inline,
        [`${Ce}-inline`]: this.inline,
        [`${Ce}-input-border`]: !this.noBorder,
        [`${Ce}-disabled`]: this.disabled
      };
    },
    datePickerCls() {
      return {
        [`${Ce}-has-shortcut`]: this.shortcuts.length > 0
      };
    }
  },
  watch: {
    modelValue() {
      this.initShowDate(this.modelValue);
    },
    disabled() {
      this.disabled ? this.dropdown.disabled() : this.dropdown.enabled();
    },
    type() {
      this.initShowDate(this.modelValue);
    }
  },
  beforeMount() {
    this.initShowDate(this.modelValue);
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  mounted() {
    let e = this;
    this.$nextTick(() => {
      if (this.inline)
        return;
      let t = this.el = this.$el.querySelector(`.${Ce}>.h-datetime-show`), i = this.$el.querySelector(".h-date-picker");
      this.dropdown = new he(t, {
        trigger: "click",
        triggerOnce: !0,
        content: i,
        disabled: this.disabled,
        placement: this.placement,
        events: {
          show() {
            e.isShow = !0, e.$nextTick(() => {
              e.initShowDate(e.modelValue), e.$refs.datebase.resetView(), e.nowDate && (e.nowView = x(e.nowDate));
            });
          }
        }
      }), this.disabled && this.dropdown.disabled();
    });
  },
  methods: {
    setShortcutValue(e) {
      if (e.value && f.isFunction(e.value)) {
        let t = e.value.call(null);
        this.initShowDate(t), this.setvalue(this.nowDate);
      }
      this.hide();
    },
    clear() {
      this.$emit("clear"), this.setvalue(""), this.hide();
    },
    confirm() {
      this.$emit("confirm"), this.hide();
    },
    updateView(e) {
      this.nowView = x(e), this.$nextTick(() => {
        this.updateDropdown();
      });
    },
    updateDropdown() {
      this.dropdown && this.dropdown.update();
    },
    inputEvent(e) {
      let t = e.target.value;
      try {
        x(t);
      } catch {
        return;
      }
      this.setvalue(t);
    },
    changeEvent(e) {
      let t = e.target.value;
      if (this.initShowDate(t), this.nowDate && f.isObject(this.option) && this.type != "time") {
        let i = x(this.nowDate), l = er[this.type], n = !1;
        if (this.option.start && i.distance(this.option.start, l) < 0 && (n = !0), !n && this.option.end && i.distance(this.option.end, l) > 0 && (n = !0), !n && this.option.disabled && this.option.disabled.call(null, i) && (n = !0), n) {
          this.resetValue();
          return;
        }
      }
      this.setvalue(this.nowDate);
    },
    resetValue() {
      this.clear(), this.initShowDate();
    },
    initShowDate(e, t = !0) {
      if (e != "" && !f.isNull(e))
        try {
          this.nowView = x(e, this.nowFormat), this.nowDate = this.nowView.format("f"), t && (this.type == "week" ? this.showDate = this.hlang("h.date.show.weekInput", { year: this.nowView.year(), week: this.nowView.getWeekOfYear(this.startWeek) }) : this.type == "quarter" ? this.showDate = this.hlang("h.date.show.quarter", { year: this.nowView.year(), quarter: Math.ceil(this.nowView.month() / 3) }) : this.showDate = this.nowView.format(this.nowFormat));
          return;
        } catch (i) {
          console.error(i);
        }
      this.nowView = x(), this.nowDate = "", t && (this.showDate = "");
    },
    hide() {
      this.dropdown && this.dropdown.hide();
    },
    setvalue(e, t = !0) {
      let i = e;
      e != "" && (i = x(e).format(this.nowFormat)), this.$emit("update:modelValue", i), this.$emit("change", i);
      let l = document.createEvent("CustomEvent");
      l.initCustomEvent("setvalue", !0, !0, i), this.$el.dispatchEvent(l), t && this.hide(), this.updateDropdown();
    }
  }
}, ir = {
  key: 0,
  class: "h-datetime-show text-hover"
}, sr = {
  key: 1,
  class: "h-input h-datetime-show"
}, lr = ["disabled", "readonly", "placeholder"], nr = {
  key: 0,
  class: "h-icon-calendar"
}, rr = {
  key: 0,
  class: "h-date-container"
}, or = {
  key: 0,
  class: "h-date-shortcut"
}, ar = ["onClick"], hr = {
  key: 1,
  class: "h-date-footer"
};
function ur(e, t, i, l, n, s) {
  const r = L("date-base");
  return a(), h("div", {
    class: S(s.dateCls)
  }, [
    i.inline ? k("", !0) : (a(), h(O, { key: 0 }, [
      i.noBorder ? (a(), h("div", ir, _(n.showDate || s.showPlaceholder), 1)) : (a(), h("div", sr, [
        W(m("input", {
          "onUpdate:modelValue": t[0] || (t[0] = (o) => n.showDate = o),
          class: "h-input",
          type: "text",
          disabled: i.disabled,
          readonly: i.readonly || i.type == "week" || i.type == "quarter",
          placeholder: s.showPlaceholder,
          onChange: t[1] || (t[1] = (...o) => s.changeEvent && s.changeEvent(...o)),
          onKeydown: t[2] || (t[2] = re((...o) => s.changeEvent && s.changeEvent(...o), ["enter"]))
        }, null, 40, lr), [
          [oe, n.showDate]
        ]),
        !n.showDate || i.disabled || !i.clearable ? (a(), h("i", nr)) : (a(), h("i", {
          key: 1,
          class: "h-icon-close text-hover",
          onClick: t[3] || (t[3] = B((...o) => s.clear && s.clear(...o), ["stop"]))
        }))
      ]))
    ], 64)),
    m("div", {
      class: S([s.datePickerCls, "h-date-picker"])
    }, [
      n.isShow ? (a(), h("div", rr, [
        s.shortcuts.length > 0 ? (a(), h("div", or, [
          (a(!0), h(O, null, E(s.shortcuts, (o) => (a(), h("div", {
            key: o.title,
            onClick: (c) => s.setShortcutValue(o)
          }, _(o.title), 9, ar))), 128))
        ])) : k("", !0),
        I(r, {
          ref: "datebase",
          value: n.nowDate,
          option: i.option,
          type: i.type,
          "start-week": i.startWeek,
          "now-view": n.nowView,
          format: "k",
          onUpdateView: s.updateView,
          onUpdateValue: s.setvalue,
          onChangeView: s.updateDropdown
        }, null, 8, ["value", "option", "type", "start-week", "now-view", "onUpdateView", "onUpdateValue", "onChangeView"])
      ])) : k("", !0),
      s.hasConfirm & !i.inline ? (a(), h("div", hr, [
        m("button", {
          type: "button",
          class: "h-btn h-btn-text",
          onClick: t[4] || (t[4] = (...o) => s.clear && s.clear(...o))
        }, _(e.hlang("h.common.clear")), 1),
        m("button", {
          type: "button",
          class: "h-btn h-btn-primary h-btn-s",
          onClick: t[5] || (t[5] = (...o) => s.hide && s.hide(...o))
        }, _(e.hlang("h.common.confirm")), 1)
      ])) : k("", !0)
    ], 2)
  ], 2);
}
const dr = /* @__PURE__ */ V(tr, [["render", ur]]), me = "h-datetime", cr = {
  name: "HDateRangePicker",
  components: {
    dateBase: zt
  },
  mixins: [Y],
  props: {
    disabled: {
      type: Boolean,
      default: !1
    },
    placement: String,
    type: {
      type: [String],
      default: "date"
    },
    option: Object,
    format: String,
    noBorder: {
      type: Boolean,
      default: !1
    },
    hasSeconds: {
      type: Boolean,
      default: !1
    },
    placeholder: {
      type: String
    },
    modelValue: Object,
    startWeek: {
      type: Number,
      default: () => $.getOption("datepicker.startWeek")
    },
    bothChoose: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["update:modelValue", "change", "confirm", "clear"],
  data() {
    return {
      paramName: $.getOption("datepicker.daterangeOptions.paramName"),
      nowDate: {
        start: "",
        end: ""
      },
      nowView: {
        start: x(),
        end: x().add(1, x.MONTH)
      },
      rangeEnd: "",
      isShow: !1
    };
  },
  computed: {
    showPlaceholder() {
      return this.placeholder || this.hlang("h.datepicker.placeholder");
    },
    nowFormat() {
      let e = this.format || $.getOption("datepicker.format")[this.type];
      return this.type == "datetime" && this.hasSeconds && (e = $.getOption("datepicker.format.datetimesecond")), e;
    },
    show() {
      return f.isObject(this.modelValue) ? `${this.modelValue.start || this.hlang("h.datepicker.start")} - ${this.modelValue.end || this.hlang("h.datepicker.end")}` : "";
    },
    shortcuts() {
      return this.option && this.option.shortcuts || [];
    },
    dateCls() {
      return {
        [`${me}`]: !0,
        [`${me}-range`]: !0,
        [`${me}-input-border`]: !this.noBorder,
        [`${me}-disabled`]: this.disabled
      };
    },
    datePickerCls() {
      return {
        [`${me}-range-picker`]: !0,
        [`${me}-has-shortcut`]: this.shortcuts.length > 0
      };
    },
    startOption() {
      return this.option;
    },
    endOption() {
      return this.option;
    }
  },
  watch: {
    modelValue() {
      this.parse(this.modelValue);
    },
    disabled() {
      this.disabled ? this.dropdown.disabled() : this.dropdown.enabled();
    }
  },
  beforeMount() {
    this.parse(this.modelValue);
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  mounted() {
    let e = this;
    this.$nextTick(() => {
      let t = this.el = this.$el.querySelector(`.${me}>.h-datetime-show`), i = this.$el.querySelector(".h-date-picker");
      this.dropdown = new he(t, {
        trigger: "click",
        content: i,
        placement: this.placement,
        disabled: this.disabled,
        events: {
          show() {
            e.isShow = !0, e.$nextTick(() => {
              e.initNowView();
            });
          },
          hide: () => {
            this.hide();
          }
        }
      });
    });
  },
  methods: {
    updateRangeEnd(e) {
      this.rangeEnd = e;
    },
    setShortcutValue(e) {
      let t = e.value.call(null);
      this.parse(t), this.updateValue(this.nowDate), this.confirm();
    },
    updateView(e, t) {
      this.nowView[t] = x(e, this.nowFormat), this.nowView.start.time() >= this.nowView.end.time() && (t == "end" ? this.nowView.start = x(e, this.nowFormat).add(-1, x.MONTH) : this.nowView.end = x(e, this.nowFormat).add(1, x.MONTH)), this.dropdown.update();
    },
    changeView() {
      this.dropdown.update();
    },
    parseSingle(e, t) {
      if (f.isObject(e) && e[this.paramName[t]])
        try {
          let i = x(e[this.paramName[t]], this.nowFormat);
          this.nowDate[t] = i.format(this.nowFormat);
          return;
        } catch {
        }
      this.nowDate[t] = "";
    },
    parse(e) {
      this.parseSingle(e, "start"), this.parseSingle(e, "end"), this.rangeEnd = this.nowDate.end;
    },
    initNowView() {
      let e = x();
      this.nowDate.start && (e = x(this.nowDate.start, this.nowFormat));
      let t = 1;
      this.nowView = {
        start: e,
        end: x(e, this.nowFormat).add(t, x.MONTH)
      }, this.$refs.start.resetView(), this.$refs.end.resetView();
    },
    confirm() {
      this.$emit("confirm"), this.hide();
    },
    hide() {
      this.dropdown.hide(), setTimeout(() => {
        this.parseValue(this.modelValue);
      }, 400);
    },
    clear() {
      this.$emit("clear"), this.updateValue({}), this.initNowView(), this.hide();
    },
    setvalue(e, t = !1, i) {
      e = e || "";
      let l = f.copy(this.nowDate);
      if (t ? l.start ? l.end ? (l.start = e, l.end = "") : l.end = e : l.start = e : i == "start" ? l.start = e : i == "end" && (l.end = e), t && l.start && l.end && x(l.start, this.nowFormat).time() > x(l.end, this.nowFormat).time()) {
        let n = l.start;
        l.start = l.end, l.end = n;
      }
      if (this.bothChoose && (!l.start || !l.end)) {
        this.parseValue(l);
        return;
      }
      this.updateValue(l);
    },
    parseValue(e) {
      e = {
        [this.paramName.start]: e.start,
        [this.paramName.end]: e.end
      }, this.parse(e);
    },
    updateValue(e) {
      e = {
        [this.paramName.start]: e.start,
        [this.paramName.end]: e.end
      }, this.parse(e), this.$emit("update:modelValue", e), this.$emit("change", e);
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, e), this.$el.dispatchEvent(t), this.dropdown.update();
    }
  }
}, fr = {
  key: 0,
  class: "h-datetime-show text-hover"
}, mr = {
  key: 1,
  class: "h-input h-datetime-show"
}, pr = ["value", "placeholder", "disabled"], gr = /* @__PURE__ */ m("i", { class: "h-icon-calendar" }, null, -1), yr = {
  key: 0,
  class: "h-date-container h-date-range-container"
}, br = {
  key: 0,
  class: "h-date-shortcut"
}, vr = ["onClick"], wr = { class: "h-date-footer" };
function kr(e, t, i, l, n, s) {
  const r = L("date-base");
  return a(), h("div", {
    class: S(s.dateCls)
  }, [
    i.noBorder ? (a(), h("div", fr, _(e.showDate || s.showPlaceholder), 1)) : (a(), h("div", mr, [
      m("input", {
        type: "text",
        class: "h-input",
        value: s.show,
        readonly: "",
        placeholder: s.showPlaceholder,
        disabled: i.disabled
      }, null, 8, pr),
      gr
    ])),
    m("div", {
      class: S([s.datePickerCls, "h-date-picker"])
    }, [
      n.isShow ? (a(), h("div", yr, [
        s.shortcuts.length > 0 ? (a(), h("div", br, [
          (a(!0), h(O, null, E(s.shortcuts, (o) => (a(), h("div", {
            key: o.title,
            onClick: (c) => s.setShortcutValue(o)
          }, _(o.title), 9, vr))), 128))
        ])) : k("", !0),
        I(r, {
          ref: "start",
          value: n.nowDate,
          range: "start",
          option: s.startOption,
          type: i.type,
          "now-view": n.nowView.start,
          format: s.nowFormat,
          "start-week": i.startWeek,
          "range-end": n.rangeEnd,
          onUpdateView: s.updateView,
          onUpdateValue: s.setvalue,
          onChangeView: s.changeView,
          onUpdateRangeEnd: s.updateRangeEnd
        }, null, 8, ["value", "option", "type", "now-view", "format", "start-week", "range-end", "onUpdateView", "onUpdateValue", "onChangeView", "onUpdateRangeEnd"]),
        I(r, {
          ref: "end",
          value: n.nowDate,
          range: "end",
          option: s.endOption,
          type: i.type,
          "now-view": n.nowView.end,
          format: s.nowFormat,
          "start-week": i.startWeek,
          "range-end": n.rangeEnd,
          onUpdateView: s.updateView,
          onUpdateValue: s.setvalue,
          onChangeView: s.changeView,
          onUpdateRangeEnd: s.updateRangeEnd
        }, null, 8, ["value", "option", "type", "now-view", "format", "start-week", "range-end", "onUpdateView", "onUpdateValue", "onChangeView", "onUpdateRangeEnd"])
      ])) : k("", !0),
      m("div", wr, [
        m("button", {
          type: "button",
          class: "h-btn h-btn-text h-btn-s",
          onClick: t[0] || (t[0] = (...o) => s.clear && s.clear(...o))
        }, _(e.hlang("h.common.clear")), 1),
        m("button", {
          type: "button",
          class: "h-btn h-btn-primary h-btn-s",
          onClick: t[1] || (t[1] = (...o) => s.confirm && s.confirm(...o))
        }, _(e.hlang("h.common.confirm")), 1)
      ])
    ], 2)
  ], 2);
}
const Sr = /* @__PURE__ */ V(cr, [["render", kr]]), Ie = "h-datetime", Cr = {
  name: "HDateFullRangePicker",
  components: {
    dateBase: zt
  },
  emits: ["change", "update:modelValue", "confirm", "clear"],
  mixins: [Y],
  props: {
    defaultType: {
      type: String,
      default: "week"
    },
    option: Object,
    placement: String,
    noBorder: {
      type: Boolean,
      default: !1
    },
    hasTime: {
      type: Boolean,
      default: !1
    },
    placeholder: {
      type: String
    },
    modelValue: Object,
    startWeek: {
      type: Number,
      default: () => $.getOption("datepicker.startWeek")
    },
    layout: {
      type: Array,
      default: () => ["year", "quarter", "month", "week", "date", "customize"]
    }
  },
  data() {
    let e = $.getOption("datepicker.format"), t = this.modelValue && this.modelValue.type ? this.modelValue.type : this.defaultType;
    return {
      allviews: {
        year: this.hlang("h.date.year"),
        quarter: this.hlang("h.date.quarter"),
        month: this.hlang("h.date.month"),
        week: this.hlang("h.date.week"),
        date: this.hlang("h.date.day"),
        customize: this.hlang("h.datepicker.customize")
      },
      nowFormat: this.hasTime ? e.datetime : e.date,
      paramName: $.getOption("datepicker.daterangeOptions.paramName"),
      nowDate: {
        start: "",
        end: ""
      },
      nowView: {
        start: x(),
        end: x().add(1, x.MONTH)
      },
      view: t,
      rangeEnd: "",
      isShow: !1
    };
  },
  computed: {
    views() {
      let e = {};
      for (let t of this.layout)
        this.allviews[t] ? e[t] = this.allviews[t] : console.warn(`[HeyUI WARNING] DateFullRangePicker Component: Props ${t} for layout don't exsits.`);
      return e;
    },
    showPlaceholder() {
      return this.placeholder || this.hlang("h.datepicker.placeholder");
    },
    showValue() {
      if (!f.isObject(this.modelValue))
        return "";
      if (this.modelValue.type && this.modelValue.start) {
        let e = x(this.modelValue.start);
        switch (this.modelValue.type) {
          case "year":
            return e.year();
          case "month":
            return e.format("YYYY-MM");
          case "quarter":
            return this.hlang("h.date.show.quarter", {
              year: e.year(),
              quarter: parseInt(e.month() / 3, 10) + 1
            });
          case "week":
            return this.hlang("h.date.show.week", {
              year: e.year(),
              weeknum: e.getWeekOfYear(this.startWeek),
              daystart: e.format("MM-DD"),
              dayend: x(e).add(6).format("MM-DD")
            });
        }
      }
      return !this.modelValue.start && !this.modelValue.end ? "" : `${this.modelValue.start || this.hlang("h.datepicker.start")} - ${this.modelValue.end ? x(this.modelValue.end).add(-1).format(this.nowFormat) : this.hlang("h.datepicker.end")}`;
    },
    shortcuts() {
      let e = [], t = null;
      if (this.option && this.option.shortcuts && (t = this.option.shortcuts), f.isArray(t))
        for (let i of t)
          f.isString(i) ? e.push($.getOption("datepicker.shortcuts")[i]) : f.isObject(i) && e.push(i);
      return e;
    },
    dateCls() {
      return {
        [`${Ie}`]: !0,
        [`${Ie}-full-range`]: !0,
        [`${Ie}-input-border`]: !this.noBorder
      };
    },
    datePickerCls() {
      return {
        [`${Ie}-has-shortcut`]: this.shortcuts.length > 0
      };
    },
    startOption() {
      return this.option;
    },
    endOption() {
      return this.option;
    }
  },
  watch: {
    modelValue() {
      this.parse(this.modelValue);
    }
  },
  beforeMount() {
    this.parse(this.modelValue);
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  mounted() {
    let e = this;
    this.$nextTick(() => {
      let t = this.el = this.$el.querySelector(`.${Ie}>.h-datetime-show`), i = this.$el.querySelector(".h-date-picker");
      this.dropdown = new he(t, {
        trigger: "click",
        content: i,
        placement: this.placement,
        events: {
          show() {
            e.isShow = !0, e.$nextTick(() => {
              e.initNowView();
            });
          }
        }
      });
    });
  },
  methods: {
    setShortcutValue(e) {
      let t = e.value.call(null);
      this.parse(t), this.updateValue(this.nowDate), this.hide();
    },
    changeView() {
      this.initNowView(), this.updateDropdown();
    },
    updateView(e) {
      this.nowView.start = x(e), this.dropdown.update();
    },
    updateDropdown() {
      this.dropdown.update();
    },
    parseSingle(e, t) {
      if (f.isObject(e) && e[this.paramName[t]])
        try {
          let i = x(e[this.paramName[t]]);
          t == "end" && (i = i.add(-1)), this.nowDate[t] = i.format(this.nowFormat);
          return;
        } catch (i) {
          console.error(i);
        }
      this.nowDate[t] = "";
    },
    parse(e) {
      this.modelValue && this.modelValue.type && (this.view = this.modelValue.type), this.parseSingle(e, "start"), this.parseSingle(e, "end");
    },
    initNowView() {
      let e = x();
      this.nowDate.start && (e = x(this.nowDate.start));
      let t = x();
      this.nowDate.end && (t = x(this.nowDate.end)), this.nowView = {
        start: e,
        end: t
      };
    },
    hide() {
      this.dropdown.hide();
    },
    confirm() {
      this.$emit("confirm"), this.hide();
    },
    clear() {
      this.$emit("clear"), this.updateValue({}), this.initNowView(), this.hide();
    },
    setvalue(e, t = !1) {
      if (e = e || "", this.view == "customize") {
        let n = f.copy(this.nowDate);
        n.end && (n.end = x(n.end).add(1).format(this.nowFormat)), this.updateValue(n);
        return;
      }
      let i = {}, l = x(e);
      this.view == "week" ? i = {
        start: l.format(),
        end: l.add(7).format()
      } : this.view == "year" ? i = {
        start: l.format(),
        end: l.add(1, x.YEAR).format()
      } : this.view == "month" ? i = {
        start: l.format(),
        end: l.add(1, x.MONTH).format()
      } : this.view == "quarter" ? i = {
        start: l.format(),
        end: l.add(3, x.MONTH).format()
      } : this.view == "date" && (i = {
        start: l.format(),
        end: l.add(1, x.DAY).format()
      }), i.start || (i.start = null), i.end || (i.end = null), this.updateValue(i), t && this.hide();
    },
    updateValue(e) {
      e = {
        [this.paramName.start]: e.start,
        [this.paramName.end]: e.end,
        type: this.view
      }, this.parse(e), this.$emit("update:modelValue", e), this.$emit("change", e);
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, e), this.$el.dispatchEvent(t), this.dropdown.update();
    }
  }
}, xr = {
  key: 0,
  class: "h-datetime-show text-hover"
}, _r = {
  key: 1,
  class: "h-input h-datetime-show"
}, Tr = ["value", "placeholder"], Or = /* @__PURE__ */ m("i", { class: "h-icon-calendar" }, null, -1), Nr = { class: "h-date-container h-date-full-range-container" }, $r = {
  key: 0,
  class: "h-date-shortcut"
}, Vr = ["onClick"], Dr = {
  key: 1,
  class: "h-date-self-defined"
}, Er = { class: "h-date-footer" };
function Mr(e, t, i, l, n, s) {
  const r = L("Tabs"), o = L("DatePicker"), c = L("date-base");
  return a(), h("div", {
    class: S(s.dateCls)
  }, [
    i.noBorder ? (a(), h("div", xr, _(s.showValue || i.placeholder), 1)) : (a(), h("div", _r, [
      m("input", {
        type: "text",
        class: "h-input",
        value: s.showValue,
        readonly: "",
        placeholder: s.showPlaceholder
      }, null, 8, Tr),
      Or
    ])),
    m("div", {
      class: S([s.datePickerCls, "h-date-picker"])
    }, [
      m("div", Nr, [
        s.shortcuts.length > 0 ? (a(), h("div", $r, [
          (a(!0), h(O, null, E(s.shortcuts, (u) => (a(), h("div", {
            key: u.title,
            onClick: (y) => s.setShortcutValue(u)
          }, _(u.title), 9, Vr))), 128))
        ])) : k("", !0),
        m("div", null, [
          I(r, {
            modelValue: n.view,
            "onUpdate:modelValue": t[0] || (t[0] = (u) => n.view = u),
            datas: s.views,
            onChange: s.changeView
          }, null, 8, ["modelValue", "datas", "onChange"])
        ]),
        n.view == "customize" ? (a(), h("div", Dr, [
          I(o, {
            modelValue: n.nowDate.start,
            "onUpdate:modelValue": t[1] || (t[1] = (u) => n.nowDate.start = u),
            option: { end: n.nowDate.end },
            type: i.hasTime ? "datetime" : "date",
            placeholder: e.hlang("h.datepicker.startTime"),
            onChange: t[2] || (t[2] = (u) => s.setvalue("start"))
          }, null, 8, ["modelValue", "option", "type", "placeholder"]),
          F(" - "),
          I(o, {
            modelValue: n.nowDate.end,
            "onUpdate:modelValue": t[3] || (t[3] = (u) => n.nowDate.end = u),
            placement: "bottom-end",
            option: { start: n.nowDate.start },
            type: i.hasTime ? "datetime" : "date",
            placeholder: e.hlang("h.datepicker.endTime"),
            onChange: t[4] || (t[4] = (u) => s.setvalue("end"))
          }, null, 8, ["modelValue", "option", "type", "placeholder"])
        ])) : (a(), A(c, {
          key: 2,
          ref: "datebase",
          value: n.nowDate.start,
          option: i.option,
          type: n.view,
          "start-week": i.startWeek,
          "now-view": n.nowView.start,
          format: "k",
          onUpdateView: s.updateView,
          onUpdateValue: s.setvalue,
          onChangeView: s.updateDropdown
        }, null, 8, ["value", "option", "type", "start-week", "now-view", "onUpdateView", "onUpdateValue", "onChangeView"]))
      ]),
      m("div", Er, [
        m("button", {
          type: "button",
          class: "h-btn h-btn-text h-btn-s",
          onClick: t[5] || (t[5] = (...u) => s.clear && s.clear(...u))
        }, _(e.hlang("h.common.clear")), 1),
        m("button", {
          type: "button",
          class: "h-btn h-btn-primary h-btn-s",
          onClick: t[6] || (t[6] = (...u) => s.confirm && s.confirm(...u))
        }, _(e.hlang("h.common.confirm")), 1)
      ])
    ], 2)
  ], 2);
}
const jr = /* @__PURE__ */ V(Cr, [["render", Mr]]), He = "h-dropdowncustom", Lr = {
  name: "HDropdownCustom",
  emits: ["show", "hide"],
  props: {
    trigger: {
      type: String,
      default: "click"
    },
    equalWidth: {
      type: Boolean,
      default: !1
    },
    toggleIcon: {
      type: Boolean,
      default: !0
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    placement: {
      type: String
    },
    delay: {
      type: Number,
      default: 0
    },
    className: {
      type: String,
      default: "h-dropdownmenu-default"
    },
    offset: [String, Number],
    showClass: {
      type: Object,
      default: () => {
      }
    },
    button: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      isShow: !1,
      dropdown: null,
      el: null
    };
  },
  computed: {
    dropdowncustomCls() {
      return {
        [`${He}`]: !0,
        "h-btn": this.button
      };
    },
    showCls() {
      return {
        [`${He}-show`]: !0,
        [`${He}-disabled`]: !!this.disabled,
        [`${He}-show-toggle`]: !!this.toggleIcon,
        [this.className]: !!this.className,
        "h-dropdowncustom-empty": !this.$slots.default,
        ...this.showClass
      };
    },
    groupCls() {
      return {
        [`${He}-group`]: !0
      };
    }
  },
  watch: {
    disabled() {
      this.disabled ? this.dropdown.disabled() : this.dropdown.enabled();
    }
  },
  mounted() {
    this.$nextTick(() => {
      let e = this.el = this.$el.querySelector(".h-dropdowncustom-show"), t = this.$el.querySelector(".h-dropdowncustom-group"), i = this;
      this.dropdown = new he(e, {
        content: t,
        className: `${this.className}-dropdown-container`,
        offset: this.offset,
        trigger: this.trigger,
        equalWidth: this.equalWidth,
        placement: this.placement,
        disabled: this.disabled,
        delay: this.delay,
        events: {
          show(l) {
            i.isShow = !0, i.$emit("show", l);
          },
          hide: () => {
            i.$emit("hide");
          }
        }
      });
    });
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  methods: {
    update() {
      this.dropdown.update();
    },
    hide() {
      this.dropdown.hide();
    },
    show() {
      this.dropdown.show();
    }
  }
}, Ar = { class: "h-dropdowncustom-show-content" }, Br = {
  key: 0,
  class: "h-icon-down"
};
function Ir(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.dropdowncustomCls)
  }, [
    m("div", {
      class: S(s.showCls)
    }, [
      m("div", Ar, [
        N(e.$slots, "default")
      ]),
      i.toggleIcon ? (a(), h("i", Br)) : k("", !0)
    ], 2),
    m("div", {
      class: S(s.groupCls)
    }, [
      n.isShow ? N(e.$slots, "content", { key: 0 }) : k("", !0)
    ], 2)
  ], 2);
}
const ds = /* @__PURE__ */ V(Lr, [["render", Ir]]), mi = "h-dropdownmenu", Hr = {
  name: "HDropdownMenu",
  components: {
    Badge: Wi,
    DropdownCustom: ds
  },
  emits: ["show", "hide", "clickItem"],
  props: {
    dict: String,
    datas: [Array, Object],
    trigger: {
      type: String,
      default: "click"
    },
    equalWidth: {
      type: Boolean,
      default: !1
    },
    width: Number,
    toggleIcon: {
      type: Boolean,
      default: !0
    },
    placement: {
      type: String,
      default: "bottom-start"
    },
    showCount: {
      type: Boolean,
      default: !1
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    maxCount: {
      type: Number,
      default: 99
    },
    delay: {
      type: Number,
      default: 0
    },
    className: {
      type: String,
      default: "h-dropdownmenu-default"
    },
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    },
    offset: [String, Number],
    button: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      key: this.keyName,
      title: this.titleName,
      html: "dropdownmenuHtml",
      isShow: !1,
      el: null
    };
  },
  computed: {
    dropdownmenuCls() {
      return {
        [`${mi}`]: !0
      };
    },
    groupStyle() {
      let e = {};
      return this.width && (e.width = `${this.width}px`), e;
    },
    showCls() {
      return {
        [`${mi}-show`]: !0,
        "h-dropdownmenu-empty": !this.$slots.default
      };
    },
    groupCls() {
      return {
        [`${this.className}-dropdown`]: !!this.className,
        "h-dropdownmenu-group": !0
      };
    },
    options() {
      if (!this.datas && !this.dict)
        return console.error("[HeyUI Error] Dropdownmenu Component: Datas or dict parameters need to be defined at least."), [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), e = $.initOptions(e, this), e;
    }
  },
  mounted() {
  },
  beforeUnmount() {
  },
  methods: {
    click(e, t) {
      t.disabled || (this.$emit("clickItem", t[this.key], t, e), this.$refs.dropdown.hide());
    },
    showEvent(e) {
      this.$emit("show", e);
    },
    hideEvent(e) {
      this.$emit("hide", e);
    }
  }
}, Fr = ["onClick"];
function Pr(e, t, i, l, n, s) {
  const r = L("Badge"), o = L("DropdownCustom");
  return a(), A(o, {
    ref: "dropdown",
    button: i.button,
    delay: i.delay,
    class: S(s.dropdownmenuCls),
    trigger: i.trigger,
    "equal-width": i.equalWidth,
    "toggle-icon": i.toggleIcon,
    placement: i.placement,
    disabled: i.disabled,
    "class-name": i.className,
    offset: i.offset,
    "show-class": s.showCls,
    onShow: s.showEvent,
    onHide: s.hideEvent
  }, {
    content: z(() => [
      m("ul", {
        class: S(s.groupCls),
        style: D(s.groupStyle)
      }, [
        (a(!0), h(O, null, E(s.options, (c) => (a(), h("li", {
          key: c[n.key],
          class: S(["h-dropdownmenu-item", { "h-dropdownmenu-item-divider": !!c.divider, disabled: !!c.divider || c.disabled }]),
          onClick: (u) => s.click(u, c)
        }, [
          c.icon ? (a(), h("i", {
            key: 0,
            class: S(c.icon)
          }, null, 2)) : k("", !0),
          m("span", null, _(c[n.title]), 1),
          i.showCount && c.count ? (a(), A(r, {
            key: 1,
            count: c.count,
            "max-count": i.maxCount,
            position: "right"
          }, null, 8, ["count", "max-count"])) : k("", !0)
        ], 10, Fr))), 128))
      ], 6)
    ]),
    default: z(() => [
      N(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["button", "delay", "class", "trigger", "equal-width", "toggle-icon", "placement", "disabled", "class-name", "offset", "show-class", "onShow", "onHide"]);
}
const Wr = /* @__PURE__ */ V(Hr, [["render", Pr]]), pi = function(e) {
  return f.isString(e) ? { url: e } : f.isObject(e) ? { url: e.thumbUrl || e.url } : { url: null };
}, Rr = {
  name: "HImageList",
  emits: ["clickItem"],
  props: {
    width: {
      type: Number,
      default: 60
    },
    distance: {
      type: Number,
      default: 10
    },
    datas: {
      type: [Array, String],
      default: () => []
    },
    borderRadius: {
      type: Number,
      default: 3
    }
  },
  computed: {
    listStyles() {
      return {
        "margin-right": `-${this.distance}px`,
        "margin-bottom": `-${this.distance}px`
      };
    },
    isSingle() {
      return f.isString(this.datas);
    },
    computedList() {
      return this.isSingle ? [pi(this.datas)] : f.isArray(this.datas) ? this.datas.map((e) => pi(e)) : [];
    }
  },
  methods: {
    click(e, t) {
      this.isSingle ? this.$emit("clickItem", this.datas) : this.$emit("clickItem", e, t);
    },
    itemStyles(e) {
      return {
        height: `${this.width}px`,
        width: `${this.width}px`,
        "margin-right": `${this.distance}px`,
        "margin-bottom": `${this.distance}px`,
        "border-radius": `${this.borderRadius}px`,
        "background-image": `url(${e.url})`
      };
    }
  }
}, Ur = ["onClick"];
function zr(e, t, i, l, n, s) {
  return a(), h("div", {
    class: "h-image-list",
    style: D(s.listStyles)
  }, [
    (a(!0), h(O, null, E(s.computedList, (r, o) => (a(), h("div", {
      key: o,
      style: D(s.itemStyles(r)),
      class: "h-image-list-item",
      onClick: (c) => s.click(o, r)
    }, null, 12, Ur))), 128))
  ], 4);
}
const Yr = /* @__PURE__ */ V(Rr, [["render", zr]]), qr = {
  name: "HIcon",
  props: {
    type: String,
    color: String,
    size: Number,
    isLink: Boolean
  },
  data() {
    return {};
  },
  computed: {
    iconCls() {
      return {
        [`${this.type}`]: !!this.type,
        link: this.isLink
      };
    },
    iconStyle() {
      return {
        ["font-size"]: `${this.size}px`,
        color: this.color
      };
    }
  },
  methods: {}
};
function Kr(e, t, i, l, n, s) {
  return a(), h("i", Z({
    class: s.iconCls,
    style: s.iconStyle
  }, e.$attrs), null, 16);
}
const Xr = /* @__PURE__ */ V(qr, [["render", Kr]]), Gr = {
  name: "HInput",
  props: {
    modelValue: [String, Number]
  }
}, Jr = ["value"];
function Qr(e, t, i, l, n, s) {
  return a(), h("input", {
    class: "h-input",
    value: i.modelValue,
    onInput: t[0] || (t[0] = (r) => e.$emit("update:modelValue", r.target.value))
  }, null, 40, Jr);
}
const Zr = /* @__PURE__ */ V(Gr, [["render", Qr]]), eo = {
  name: "HTextarea",
  emits: ["update:modelValue"],
  props: {
    modelValue: String
  },
  data() {
    return {};
  },
  computed: {},
  methods: {}
}, to = ["value"];
function io(e, t, i, l, n, s) {
  return a(), h("textarea", Z({ class: "h-textarea" }, e.$attrs, {
    value: i.modelValue,
    onInput: t[0] || (t[0] = (r) => e.$emit("update:modelValue", r.target.value))
  }), null, 16, to);
}
const so = /* @__PURE__ */ V(eo, [["render", io]]);
let gi = {
  int: {
    valid(e) {
      return parseInt(e, 10) == e;
    },
    message: H.hlang("h.validation.type.int")
  },
  number: {
    valid(e) {
      return !isNaN(Number(e));
    },
    message() {
      return H.hlang("h.validation.type.number");
    }
  },
  email: {
    pattern: /^[^\s]+@[^\s]+\.[^\s]+$/,
    message() {
      return H.hlang("h.validation.type.email");
    }
  },
  url: {
    pattern: /^((\w+):\/\/)?([^\s]?[^\s]+\.)*[^\s]+-?[^\s]+\.[^\s]{2,}(\/.*)*\/?$/,
    message() {
      return H.hlang("h.validation.type.url");
    }
  },
  tel: {
    pattern: /(^(\+\d{2,3}\/)?\d{3,4}(-)?\d{7,8}(\*\d{2,6})?$)|(^1\d{10}$)/,
    message() {
      return H.hlang("h.validation.type.tel");
    }
  },
  mobile: {
    pattern: /^1\d{10}$/,
    message() {
      return H.hlang("h.validation.type.mobile");
    }
  },
  globalmobile: {
    pattern: /^[+\-0-9a]+$/,
    message() {
      return H.hlang("h.validation.type.globalmobile");
    }
  }
}, Ct = {
  required(e) {
    return (e != null && String(e).length > 0) === !0 ? !0 : H.hlang("h.validation.base.required");
  },
  maxLen(e, t) {
    return t == null || (e != null && String(e).length <= t) === !0 ? !0 : H.hlang("h.validation.base.maxLen", { value: t });
  },
  minLen(e, t) {
    return t == null || (e != null && String(e).length >= t) === !0 ? !0 : H.hlang("h.validation.base.minLen", { value: t });
  },
  max(e, t) {
    return t == null || (e != null && Number(e) <= t) === !0 ? !0 : H.hlang("h.validation.base.max", { value: t });
  },
  min(e, t) {
    return t == null || (e != null && Number(e) >= t) === !0 ? !0 : H.hlang("h.validation.base.min", { value: t });
  }
}, lo = {
  lessThan(e, t) {
    return Number(e) < Number(t);
  },
  greaterThan(e, t) {
    return Number(e) > Number(t);
  },
  equal(e, t) {
    return e == t;
  }
};
const yi = function(e, t) {
  let i = {}, l = Object.keys(e), n = Object.keys(t);
  for (let s of n)
    e[s] || l.push(s);
  for (let s of l)
    e[s] && !t[s] ? i[s] = e[s] : !e[s] && t[s] ? i[s] = t[s] : e[s].valid === !1 || t[s].valid === !0 ? i[s] = e[s] : i[s] = t[s];
  return i;
}, xe = function(e, t) {
  if (j.isFunction(e))
    return e.call(null, ...t);
  if (j.isObject(e)) {
    let i = null;
    return e.pattern ? i = e.pattern.test(String(t[0])) : j.isFunction(e.valid) && (i = e.valid.apply(null, t)), i === !0 ? !0 : j.isFunction(e.message) ? e.message() : e.message;
  }
}, Fe = function(e, t, i = "other") {
  return t === !0 || t === void 0 ? {
    [e]: { valid: !0, message: null, type: i }
  } : {
    [e]: { valid: !1, message: t, type: i }
  };
}, no = {
  rules: {},
  combineRules: []
};
class bi {
  constructor(t) {
    j.isObject(t) || console.error("[HeyUI Error] Validator: Please provide the correct validation parameters"), this.combineRuleResults = {}, this.rules = {}, this.combineRules = {}, this.initRules(t);
  }
  initRules(t) {
    let i = {};
    j.extend(!0, i, no, t);
    let l = Object.keys(gi);
    l.unshift("required");
    for (let n of l) {
      let s = t[n];
      if (j.isArray(s))
        for (let r of s) {
          let o = i.rules[r];
          j.isObject(o) || (o = i.rules[r] = {}), n == "required" ? o.required = !0 : o.type = n;
        }
    }
    this.rules = i.rules, this.initCombineRules(i.combineRules);
  }
  updateRule(t) {
    this.initRules(t || {});
  }
  initCombineRules(t) {
    let i = {};
    for (let l of t) {
      l.id = j.uuid();
      let n = "";
      l.parentRef && (n = `${l.parentRef}.`);
      for (let s of l.refs) {
        let r = n + s;
        j.isArray(i[r]) ? i[r].push(l) : i[r] = [l];
      }
    }
    this.combineRules = i;
  }
  valid(t, i, l) {
    let n = [], s = j.uuid(), r = this.validData(t, {
      uuid: s,
      next(o) {
        for (let c in o)
          n.indexOf(c) > -1 && n.splice(n.indexOf(c), 1);
        j.extend(r, o), i && i.call(this, o), l && n.length == 0 && l.call(this, r);
      }
    });
    for (let o in r)
      r[o].loading && n.push(o);
    return l && n.length == 0 && l.call(this, r), r;
  }
  validData(t, { prop: i = "", next: l, sourceData: n, uuid: s } = {}) {
    let r = {};
    if (i != "" && (r = this.validField(i, n, { next: l, uuid: s })), n == null && (n = t), j.isArray(t))
      for (let o = 0; o < t.length; o++) {
        let c = `${i}[${o}]`;
        r = yi(r, this.validData(t[o], { next: l, prop: c, sourceData: n, uuid: s }));
      }
    else if (j.isObject(t))
      for (let o in t) {
        let c = i + (i == "" ? "" : ".") + o;
        r = yi(r, this.validData(t[o], { next: l, prop: c, sourceData: n, uuid: s }));
      }
    return r;
  }
  getConfig(t) {
    let i = t;
    return t.indexOf("[") > -1 && !this.rules[t] && (i = t.replace(/\[\w+\]/, "[]")), this.rules[i];
  }
  setConfig(t, i) {
    let l = t;
    this.rules[l] = j.extend(!0, this.rules[l] || {}, i);
  }
  validFieldBase({ rule: t, value: i, parent: l }) {
    if (t && Object.keys(t).length > 0) {
      let n = xe(Ct.required, [i]);
      if (t.required && n !== !0)
        return n;
      if (n === !0) {
        if (t.type && (n = xe(gi[t.type], [i]), n !== !0))
          return n;
        let s = Object.keys(Ct);
        s.shift();
        for (let r of s)
          if (!j.isNull(t[r])) {
            let o = xe(Ct[r], [i, t[r]]);
            if (o !== !0)
              return o;
          }
        if (!j.isNull(t.valid) && (n = xe(t.valid, [i, l]), n !== !0))
          return n;
      } else if (!j.isNull(t.validAnyway) && (n = xe(t.validAnyway, [i, l]), n !== !0))
        return n;
    }
    return !0;
  }
  validField(t, i, { next: l, uuid: n } = {}) {
    if (j.isNull(t))
      return Fe(t);
    let s = j.getKeyValue(i, t), r = this.rules[t] || {}, o = this.combineRules[t] || [];
    if (t.indexOf("[") > -1) {
      let p = t.replace(/\[\w+\]/, "[]");
      r = j.extend({}, r, this.rules[t], this.rules[p]), o = j.extend([], o, this.combineRules[t], this.combineRules[p]);
    }
    let c = i, u = "";
    t.lastIndexOf(".") > -1 && (u = t.substr(0, t.lastIndexOf(".")), c = j.getKeyValue(i, u));
    let y = this.validFieldBase({ rule: r, value: s, parent: c });
    if (y !== !0)
      return Fe(t, y, "base");
    y = this.combineRulesValid(o, s, c, u, n);
    let g = Fe(t, void 0, "base");
    return y === !0 && j.isFunction(l) && j.isFunction(r.validAsync) && (r.validAsync.call(
      null,
      s,
      (p) => {
        let w = Fe(t, p, "async");
        w[t].loading = !1, l(w);
      },
      c,
      i
    ), g[t].loading = !0), j.extend(g, y);
  }
  combineRulesValid(t, i, l, n, s) {
    if (!t)
      return !0;
    let r = {}, o = 0;
    for (let c of t) {
      let u = null, y = (c.parentRef && n ? n + "." : "") + c.refs[c.refs.length - 1], g = this.combineRuleResults[c.id] || {};
      if (s && g.uuid == s + n)
        u = g.result;
      else {
        let w = [];
        for (let d of c.refs) {
          let v = j.getKeyValue(l, d), T = (c.parentRef && n ? n + "." : "") + d;
          if (this.validFieldBase({ rule: this.rules[T], value: v, parent: l }) != !0)
            break;
          w.push(v);
        }
        if (w.length < c.refs.length)
          continue;
        let b = c.valid;
        if (j.isObject(b) && j.isString(b.valid) && (b.valid = lo[b.valid], j.isNull(b.valid)))
          throw Error(`There is no validation rule named ${b}`);
        u = xe(b, w);
      }
      o += 1;
      let p = Fe(y, u, "combine");
      s && (this.combineRuleResults[c.id] = { uuid: s + n, result: u }), (!r[y] || r[y].valid) && j.extend(r, p);
    }
    return o == 0 ? !0 : r;
  }
  destroy() {
    this.rules = null, this.combineRules = null, this.combineRuleResults = null;
  }
}
const ro = "COMPLETE", vi = "CANCELED";
function oo(e) {
  if ("requestAnimationFrame" in window)
    return window.requestAnimationFrame(e);
  setTimeout(e, 16);
}
function wi(e, t, i) {
  e === window ? e.scrollTo(t, i) : (e.scrollLeft = t, e.scrollTop = i);
}
function ao(e, t, i) {
  let l = e.getBoundingClientRect(), n = null, s = null, r = null, o = null, c = null, u = null, y = null, g = i && i.left != null ? i.left : 0.5, p = i && i.top != null ? i.top : 0.5, w = i && i.leftOffset != null ? i.leftOffset : 0, b = i && i.topOffset != null ? i.topOffset : 0, d = g, v = p;
  if (t === window)
    u = Math.min(l.width, window.innerWidth), y = Math.min(l.height, window.innerHeight), s = l.left + window.pageXOffset - window.innerWidth * d + u * d, r = l.top + window.pageYOffset - window.innerHeight * v + y * v, s -= w, r -= b, o = s - window.pageXOffset, c = r - window.pageYOffset;
  else {
    u = l.width, y = l.height, n = t.getBoundingClientRect();
    let T = l.left - (n.left - t.scrollLeft), C = l.top - (n.top - t.scrollTop);
    s = T + u * d - t.clientWidth * d, r = C + y * v - t.clientHeight * v, s = Math.max(Math.min(s, t.scrollWidth - t.clientWidth), 0), r = Math.max(Math.min(r, t.scrollHeight - t.clientHeight), 0), s -= w, r -= b, o = s - t.scrollLeft, c = r - t.scrollTop;
  }
  return {
    x: s,
    y: r,
    differenceX: o,
    differenceY: c
  };
}
function cs(e) {
  oo(function() {
    let t = e.scrollOption;
    if (!t)
      return;
    let i = ao(t.target, e, t.align), l = Date.now() - t.startTime, n = Math.min(1 / t.time * l, 1);
    if (l > t.time + 20)
      return wi(e, i.x, i.y), e.scrollOption = null, t.end(ro);
    let s = 1 - t.ease(n);
    wi(e, i.x - i.differenceX * s, i.y - i.differenceY * s), cs(e);
  });
}
function ho(e, t, i, l) {
  let n = !t.scrollOption, s = t.scrollOption, r = Date.now(), o;
  s && s.end(vi);
  function c(u) {
    t.scrollOption = null, t.parentElement && t.parentElement.scrollOption && t.parentElement.scrollOption.end(u), l(u), t.removeEventListener("touchstart", o);
  }
  t.scrollOption = {
    startTime: s ? s.startTime : Date.now(),
    target: e,
    time: i.time + (s ? r - s.startTime : 0),
    ease: i.ease,
    align: i.align,
    end: c
  }, o = c.bind(null, vi), t.addEventListener("touchstart", o), n && cs(t);
}
function ki(e) {
  return e === window || (e.scrollHeight !== e.clientHeight || e.scrollWidth !== e.clientWidth) && getComputedStyle(e).overflow !== "hidden";
}
function uo() {
  return !0;
}
function co(e, t, i) {
  if (!e)
    return;
  typeof t == "function" && (i = t, t = null), t || (t = {}), t.time = isNaN(t.time) ? 1e3 : t.time, t.ease = t.ease || function(c) {
    return 1 - Math.pow(1 - c, c / 2);
  };
  let l = e.parentElement, n = 0;
  function s(c) {
    n -= 1, !n && i && i(c);
  }
  let r = t.validTarget || uo, o = t.isScrollable;
  for (; l; ) {
    if (r(l, n) && (o ? o(l, ki) : ki(l)) && (n += 1, ho(e, l, t, s)), l = l.parentElement, !l)
      return;
    l.tagName === "BODY" && (l = window);
  }
}
const et = "h-form", fo = function(e, t) {
  let i = e;
  for (; i != t; ) {
    if (f.hasClass(i, "h-form-item") && i.getAttribute("prop"))
      return i;
    i = i.parentElement;
  }
  return null;
}, mo = {
  name: "HForm",
  provide: function() {
    return {
      validField: this.validField,
      requireds: this.requireds,
      removeProp: this.removeProp,
      setConfig: this.setConfig,
      updateErrorMessage: this.updateErrorMessage,
      updateProp: this.updateProp,
      labelWidth: this.labelWidth,
      params: this.childParams
    };
  },
  props: {
    top: {
      type: Number
    },
    topOffset: {
      type: Number,
      default: 0
    },
    mode: {
      type: String,
      default: "single"
    },
    model: [Object, Array],
    labelWidth: {
      type: Number,
      default: 80
    },
    rules: {
      type: Object,
      default: () => {
      }
    },
    labelPosition: {
      type: String,
      default: "right"
    },
    readonly: {
      type: Boolean,
      default: !1
    },
    showErrorTip: {
      type: Boolean,
      default: !1
    },
    validOnChange: {
      type: Boolean,
      default: !0
    }
  },
  data() {
    return {
      modelStash: null,
      messages: {},
      dynamicRequireds: [],
      requireds: [],
      validator: null,
      childParams: {
        mode: this.mode
      }
    };
  },
  computed: {
    formCls() {
      return {
        [`${et}`]: !0,
        [`${et}-${this.mode}`]: !0,
        [`${et}-label-${this.labelPosition}`]: !!this.labelPosition,
        [`${et}-readonly`]: this.readonly
      };
    }
  },
  watch: {
    model() {
      this.modelStash = f.copy(this.model);
    },
    mode() {
      this.childParams.mode = this.mode;
    },
    rules: {
      handler() {
        this.validator ? (this.rules && this.validator.updateRule(this.rules), this.dynamicRequireds.forEach((e) => {
          this.validator.setConfig(e, { required: !0 });
        })) : this.model && this.rules && (this.validator = new bi(this.rules)), this.initRequires();
      },
      deep: !0
    }
  },
  beforeMount() {
    this.model && this.rules && (this.validator = new bi(this.rules)), this.model && (this.modelStash = f.copy(this.model));
  },
  unmounted() {
    this.validator && this.validator.destroy();
  },
  mounted() {
    this.initRequires(), this.$nextTick(() => {
      this.$el.addEventListener(
        "blur",
        (e) => {
          (e.target.tagName == "INPUT" || e.target.tagName == "TEXTAREA") && this.trigger(e.target);
        },
        !0
      ), this.$el.addEventListener("setvalue", (e) => {
        this.trigger(e.target);
      });
    });
  },
  methods: {
    initRequires() {
      if (this.requireds.splice(0), this.rules) {
        let e = f.toArray(this.rules.rules, "key").filter((t) => t.required === !0).map((t) => t.key);
        this.requireds.push(...this.rules.required || [], ...e, ...this.dynamicRequireds);
      }
    },
    resetValue() {
      return this.modelStash;
    },
    resetValid() {
      for (let e in this.messages)
        this.messages[e].valid = !0;
    },
    trigger(e) {
      if (!this.validOnChange)
        return !1;
      let t = fo(e, this.$el);
      t && t.getAttribute("validable") == "true" && this.validField(t.getAttribute("prop"));
    },
    validField(e) {
      if (!e || !this.validator || !this.model)
        return {
          valid: !0
        };
      let t = this.validator.validField(e, this.model, {
        next: (i) => {
          f.extend(!0, this.messages, i);
        }
      });
      return f.extend(!0, this.messages, t), f.extend({}, this.messages[e]);
    },
    validFieldJs(e, t) {
      if (!e || !this.validator || !this.model)
        return {
          valid: !0
        };
      let i = this.messages[e], l = this.validator.validField(e, this.model, {
        next: () => {
          t(f.extend({}, i, l[e]));
        }
      });
      return f.extend({}, i, l[e]);
    },
    setConfig(e, t) {
      let i = this.dynamicRequireds.indexOf(e);
      if (t.required ? i == -1 && this.dynamicRequireds.push(e) : i > -1 && this.dynamicRequireds.splice(i, 1), this.initRequires(), !this.validator)
        return !1;
      this.validator.setConfig(e, t);
    },
    updateErrorMessage(e, t) {
      let i = {
        valid: !0,
        message: null,
        label: t
      };
      return this.messages[e] ? (Object.assign(this.messages[e], i), this.messages[e]) : (this.messages[e] = i, this.messages[e]);
    },
    updateProp(e, t) {
      let i = f.copy(this.messages[t]);
      return f.isNull(i) && (i = {
        valid: !0,
        message: null
      }), this.messages[e] = i, i;
    },
    removeProp(e) {
      let t = this.dynamicRequireds.indexOf(e);
      t > -1 && this.dynamicRequireds.splice(t, 1), this.setConfig(e, { required: !1 });
    },
    renderMessage(e) {
      let t = !0;
      for (let l in e)
        if (!e[l].valid) {
          t = !1;
          break;
        }
      return f.extend(!0, this.messages, e), {
        result: t,
        messages: f.toArray(this.messages, "prop").filter((l) => !l.valid)
      };
    },
    tipError(e) {
      if (e && !e.result) {
        let t = e.messages[0];
        this.showErrorTip && (t.type == "base" ? R.error(`${t.label}${t.message}`) : R.error(`${t.message}`)), this.$nextTick(() => {
          let i = this.$el.querySelector(`.h-form-item-valid-error[prop='${t.prop}']`);
          i && co(i, {
            time: 500,
            align: {
              top: this.top,
              topOffset: this.topOffset
            }
          });
        });
      }
    },
    validAsync() {
      return new Promise((e) => {
        let t = this.valid((i) => {
          let l = this.renderMessage(i);
          t && t.result && this.tipError(l), e(l);
        });
      });
    },
    valid(e) {
      if (!this.validator || !this.model)
        return {
          result: !0,
          messages: []
        };
      let t = this.validator.valid(
        this.model,
        (l) => {
          f.extend(!0, this.messages, l);
        },
        (l) => {
          e && e.call(null, l);
        }
      ), i = this.renderMessage(t);
      return this.tipError(i), i;
    }
  }
};
function po(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.formCls)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const go = /* @__PURE__ */ V(mo, [["render", po]]), pe = "h-form-item", yo = {
  name: "HFormItem",
  inject: ["validField", "removeProp", "requireds", "setConfig", "updateProp", "updateErrorMessage", "labelWidth", "params"],
  props: {
    label: String,
    prop: String,
    icon: String,
    required: {
      type: Boolean,
      default: !1
    },
    readonly: {
      type: Boolean,
      default: !1
    },
    showLabel: {
      type: Boolean,
      default: !0
    },
    single: {
      type: Boolean,
      default: !1
    },
    validable: {
      type: Boolean,
      default: !0
    },
    noPadding: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      validResult: null,
      errorMessage: { valid: !0 }
    };
  },
  computed: {
    configRequired() {
      if (!this.prop)
        return !1;
      const e = this.prop.replace(/\[\w+\]/, "[]");
      return this.requireds.indexOf(this.prop) > -1 || this.requireds.indexOf(e) > -1;
    },
    initLabelWidth() {
      let e = this.params.mode, i = (!(e == "block" || e == "inline") || this.single && e == "twocolumn") && this.labelWidth || !1;
      return i ? `${i}px` : "auto";
    },
    formItemCls() {
      return {
        [`${pe}`]: !0,
        [`${pe}-single`]: this.single,
        [`${pe}-readonly`]: !!this.readonly,
        [`${pe}-required`]: this.required || this.configRequired,
        [`${pe}-valid-error`]: !this.errorMessage.valid,
        [`${pe}-no-padding`]: !!this.noPadding
      };
    },
    labelCls() {
      return {
        [`${pe}-label`]: !0
      };
    },
    labelStyleCls() {
      let e = {};
      return this.params.mode != "block" ? e.width = this.initLabelWidth : e.width = "100%", e;
    },
    contentStyleCls() {
      let e = {};
      return this.params.mode == "block" || !this.showLabel ? e["margin-left"] = "0px" : e["margin-left"] = this.initLabelWidth, e;
    }
  },
  watch: {
    prop(e, t) {
      this.prop && (this.errorMessage = this.updateProp(e, t));
    },
    label() {
      this.prop && (this.errorMessage = this.updateErrorMessage(this.prop, this.label));
    },
    required() {
      this.setConfig(this.prop, { required: this.required });
    }
  },
  beforeUnmount() {
    this.prop && this.required && this.removeProp(this.prop);
  },
  mounted() {
    this.prop && (this.required && this.setConfig(this.prop, { required: this.required }), this.errorMessage = this.updateErrorMessage(this.prop, this.label));
  },
  methods: {
    reset() {
      console.warn("[HeyUI WARNING] FormItem Component:  FormItem.reset() will be decapitated, please use method FormItem.resetValid()"), this.errorMessage.valid = !0;
    },
    resetValid() {
      this.errorMessage.valid = !0;
    },
    trigger() {
      let e = this.prop;
      !this.validable || f.isNull(e) || this.validField(e);
    }
  }
}, bo = ["prop", "validable"], vo = { key: 1 }, wo = { class: "h-form-item-wrap" }, ko = {
  key: 0,
  class: "h-form-item-error"
}, So = {
  key: 0,
  class: "h-form-item-error-label"
}, Co = { class: "h-form-item-error-message" };
function xo(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.formItemCls),
    prop: i.prop,
    validable: i.validable
  }, [
    i.showLabel ? (a(), h("label", {
      key: 0,
      style: D(s.labelStyleCls),
      class: "h-form-item-label"
    }, [
      i.icon ? (a(), h("i", {
        key: 0,
        class: S({ [i.icon]: !0, "h-form-item-label-icon": !0 })
      }, null, 2)) : k("", !0),
      e.$slots.label ? N(e.$slots, "label", {
        key: 2,
        label: i.label
      }) : (a(), h("span", vo, _(i.label), 1))
    ], 4)) : k("", !0),
    m("div", {
      class: "h-form-item-content",
      style: D(s.contentStyleCls)
    }, [
      m("div", wo, [
        N(e.$slots, "default")
      ]),
      n.errorMessage.valid ? k("", !0) : (a(), h("div", ko, [
        n.errorMessage.type == "base" ? (a(), h("span", So, _(i.label), 1)) : k("", !0),
        m("span", Co, _(n.errorMessage.message), 1),
        N(e.$slots, "error", {
          type: n.errorMessage.type
        })
      ]))
    ], 4)
  ], 10, bo);
}
const _o = /* @__PURE__ */ V(yo, [["render", xo]]);
class at extends os {
  constructor(t, i) {
    i.template = '<div class="h-tooltip" role="tooltip"><div class="h-tooltip-arrow"></div><div class="h-tooltip-inner"></div></div>', i.arrowSelector = ".h-tooltip-arrow", i.innerSelector = ".h-tooltip-inner";
    let l = [];
    i.theme && l.push(`h-tooltip-${i.theme}`), i.editable && l.push("h-tooltip-editable"), i.class = l.join(" "), i.type = "tooltip", i.trigger = i.trigger || "hover focus", super(t, i);
  }
  updateTemplate(t, i) {
    f.extend(this.options, { content: t, html: i }), this.updateContent(t, i);
  }
}
const fs = function(e, t) {
  let i = {}, l = t.props || {};
  return l.content === "" || (l.content && (i.content = l.content), l.className && (i.className = l.className), l.maxWidth && (i.maxWidth = l.maxWidth), !t.el.querySelector) ? !1 : (i.content ? (i.content = `<div class="h-tooltip-inner-content">${i.content}</div>`, i.html = !0) : e.innerText && (i.content = `<div class="h-tooltip-inner-content">${e.innerText}</div>`, i.html = !0), i);
}, Si = function(e, t, i) {
  if (t.value === !1)
    return;
  let l = fs(e, i);
  if (l == !1)
    return;
  let n = i.props || {};
  l.container = document.body, l = f.initParam(l, n, ["placement", "theme", "delay", "trigger"]), e.tooltip = new at(e, l);
}, ms = {
  mounted(e, t, i) {
    Si(e, t, i);
  },
  beforeUpdate(e, t, i) {
    e.tooltip ? $s(() => {
      if (t.value === !1) {
        e.tooltip.destory(), e.tooltip = null;
        return;
      }
      let l = fs(e, i);
      l == !1 ? e.tooltip.destory() : e.tooltip.updateTemplate(l.content, l.html);
    }) : Si(e, t, i);
  },
  beforeUnmount(e) {
    e.tooltip && (e.tooltip.destory(), delete e.tooltip);
  }
}, To = {
  name: "HMenuItemShow",
  directives: { tooltip: ms },
  emits: ["clickItem"],
  props: {
    data: Object,
    param: Object,
    status: Object,
    mode: String
  },
  data() {
    return {};
  },
  methods: {
    togglemenu(e) {
      this.$emit("clickItem", { type: "togglemenuEvent", data: e });
    }
  }
}, Oo = { class: "h-menu-show-icon" }, No = { class: "h-menu-show-desc" }, $o = {
  key: 0,
  class: "h-menu-show-count"
}, Vo = {
  key: 1,
  class: "h-menu-show-expand"
}, Do = /* @__PURE__ */ m("i", { class: "h-icon-angle-down" }, null, -1), Eo = [
  Do
];
function Mo(e, t, i, l, n, s) {
  const r = L("Badge");
  return a(), h("div", {
    class: S(["h-menu-show", { "h-menu-show-disabled": i.data.status.disabled, "h-menu-li-selected": i.data.key && i.status.selected == i.data.key }]),
    onClick: t[0] || (t[0] = (o) => s.togglemenu(i.data))
  }, [
    W(m("span", Oo, [
      m("i", {
        class: S(i.data.icon)
      }, null, 2)
    ], 512), [
      [Q, i.data.icon]
    ]),
    m("span", No, _(i.data.title), 1),
    i.data.count ? (a(), h("span", $o, [
      I(r, {
        count: i.data.count,
        "max-count": 99
      }, null, 8, ["count"])
    ])) : k("", !0),
    i.mode != "horizontal" && i.data.children && i.data.children.length > 0 ? (a(), h("span", Vo, Eo)) : k("", !0)
  ], 2);
}
const jo = /* @__PURE__ */ V(To, [["render", Mo]]), xt = "h-tooltip", Lo = {
  name: "HTooltip",
  emits: ["show", "hide"],
  props: {
    trigger: {
      type: String,
      default: "hover"
    },
    content: [String, Number],
    placement: {
      type: String,
      default: "top"
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    editable: {
      type: Boolean,
      default: !1
    },
    className: {
      type: String
    },
    theme: String,
    delay: {
      type: Number,
      default: 0
    },
    maxWidth: Number
  },
  computed: {
    tooltipCls() {
      return {
        [`${xt}`]: !0
      };
    },
    showCls() {
      return {
        [`${xt}-show`]: !0
      };
    },
    groupCls() {
      return {
        [`${xt}`]: !0
      };
    }
  },
  watch: {
    disabled() {
      !this.tooltip || (this.disabled ? this.tooltip.disabled() : this.tooltip.enabled());
    },
    content() {
      !this.tooltip || this.tooltip.update();
    }
  },
  mounted() {
    this.init();
  },
  methods: {
    show() {
      this.tooltip && this.tooltip.show();
    },
    hide() {
      this.tooltip && this.tooltip.hide();
    },
    update() {
      this.tooltip && this.tooltip.update();
    },
    init() {
      this.$nextTick(() => {
        let e = this.$el.nextElementSibling, t = this.$refs.content;
        this.tooltip = new at(e, {
          content: t,
          theme: this.theme,
          html: !0,
          trigger: this.trigger,
          editable: this.editable,
          className: this.className,
          container: document.body,
          placement: this.placement,
          disabled: this.disabled,
          maxWidth: this.maxWidth,
          delay: this.delay,
          events: {
            show: () => {
              this.$emit("show");
            },
            hide: () => {
              this.$emit("hide");
            }
          }
        });
      });
    }
  }
}, Ao = {
  class: "h-tooltip-inner-content",
  ref: "content"
};
function Bo(e, t, i, l, n, s) {
  return a(), h(O, null, [
    N(e.$slots, "default", Hi(Fi(e.$attrs))),
    (a(), A(Ft, { to: "body" }, [
      m("div", Ao, [
        F(_(i.content), 1),
        N(e.$slots, "content")
      ], 512)
    ]))
  ], 64);
}
const ct = /* @__PURE__ */ V(Lo, [["render", Bo]]), Io = {
  name: "HMenuItem",
  components: {
    MenuItemShow: jo,
    Tooltip: ct
  },
  emits: ["trigger"],
  props: {
    data: Object,
    param: Object,
    status: Object,
    mode: String
  },
  data() {
    return {};
  },
  computed: {
    href() {
      let e = this.data.value.href;
      if (e) {
        if (f.isString(e))
          return e;
        if (this.$router)
          return this.$router.resolve(e).href;
      }
      return null;
    }
  },
  methods: {
    clickItem(e) {
      this.$emit("trigger", e);
    },
    triggerClick(e) {
      this.data.value.nativeLink !== !0 && !(e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) && e.preventDefault();
    }
  }
}, Ho = ["target", "href"], Fo = {
  key: 3,
  class: "h-menu-other-levels"
};
function Po(e, t, i, l, n, s) {
  const r = L("MenuItemShow"), o = L("Tooltip"), c = L("hMenuItem");
  return a(), h("li", {
    class: S(["h-menu-li", { "h-menu-li-opened": i.status.opened.indexOf(i.data.key) != -1 }])
  }, [
    i.data.value.href ? (a(), h("a", {
      key: 0,
      target: i.data.value.target,
      class: "h-menu-link",
      href: s.href,
      onClick: t[0] || (t[0] = (...u) => s.triggerClick && s.triggerClick(...u))
    }, [
      I(r, Z(e.$props, { onClickItem: s.clickItem }), null, 16, ["onClickItem"])
    ], 8, Ho)) : i.mode === "collapse" && !i.data.children.length ? (a(), A(o, {
      key: 1,
      content: i.data.title,
      placement: "right"
    }, {
      default: z(() => [
        I(r, Z(e.$props, { onClickItem: s.clickItem }), null, 16, ["onClickItem"])
      ]),
      _: 1
    }, 8, ["content"])) : (a(), A(r, Z({ key: 2 }, e.$props, { onClickItem: s.clickItem }), null, 16, ["onClickItem"])),
    i.data.children && i.data.children.length > 0 ? (a(), h("ul", Fo, [
      (a(!0), h(O, null, E(i.data.children, (u) => (a(), A(c, {
        key: u.key,
        data: u,
        param: i.param,
        status: i.status,
        onTrigger: s.clickItem
      }, null, 8, ["data", "param", "status", "onTrigger"]))), 128))
    ])) : k("", !0)
  ], 2);
}
const Wo = /* @__PURE__ */ V(Io, [["render", Po]]), Ci = "h-menu", ps = (e = [], t, i) => {
  let l = [];
  for (let n of e) {
    let s = {
      key: n[t.keyName],
      title: n[t.titleName],
      icon: n.icon,
      count: n.count,
      value: n,
      status: { opened: !1, disabled: !!n.disabled },
      parent: i
    }, r = n[t.childrenName] || [];
    s.children = ps(r, t, s), l.push(s);
  }
  return l;
}, gs = (e = [], t) => {
  let i = {};
  for (let l of e) {
    let n = l.key;
    n && (i[n] = l);
    let s = l.children;
    s && s.length && f.extend(i, gs(s));
  }
  return i;
}, ys = (e) => {
  let t = [];
  return e.parent && (t.push(e.parent.key), t.push(...ys(e.parent))), t;
}, Ro = {
  mode: ["vertical", "horizontal", "collapse", "half-collapse"]
}, Uo = {
  name: "HMenu",
  components: {
    hMenuItem: Wo
  },
  emits: ["clickItem", "select"],
  props: {
    option: Object,
    datas: {
      type: Array,
      default: () => []
    },
    className: {
      type: String,
      default: "h-menu-dark"
    },
    accordion: {
      type: Boolean,
      default: !1
    },
    mode: {
      type: String,
      validator(e) {
        return Ro.mode.indexOf(e) > -1;
      },
      default: "vertical"
    },
    activeAll: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    let e = {};
    return e = f.extend({}, $.getOption("menu"), this.option), {
      param: e,
      status: {
        selected: null,
        opened: []
      }
    };
  },
  computed: {
    classes() {
      return {
        [`${Ci}`]: !0,
        [this.className]: !0,
        [`${Ci}-mode-${this.mode}`]: this.mode
      };
    },
    menuobj() {
      return gs(this.menuDatas);
    },
    menuDatas() {
      return ps(this.datas, this.param);
    }
  },
  methods: {
    select(e) {
      let t = this.menuobj[e];
      t ? (this.status.selected = e, this.status.opened = ys(t)) : (this.status.selected = null, this.status.opened = []);
    },
    trigger(e) {
      if (e.type == "togglemenuEvent") {
        let t = e.data;
        if (this.status.opened = f.toggleValue(this.status.opened, t.key), this.accordion && this.status.opened.indexOf(t.key) > -1)
          for (let l in this.menuobj) {
            let n = this.menuobj[l];
            n.parent === t.parent && t.key != l && this.status.opened.indexOf(n.key) > -1 && this.status.opened.splice(this.status.opened.indexOf(n.key), 1);
          }
        if (this.$emit("clickItem", t), t.children && t.children.length > 0 && (!this.activeAll || this.status.selected == t.key))
          return;
        this.status.selected = t.key, this.$emit("select", t.value);
      }
    }
  }
};
function zo(e, t, i, l, n, s) {
  const r = L("hMenuItem");
  return a(), h("ul", {
    class: S(s.classes)
  }, [
    (a(!0), h(O, null, E(s.menuDatas, (o) => (a(), A(r, {
      key: o.key,
      class: "h-menu-first-level",
      data: o,
      param: n.param,
      status: n.status,
      mode: i.mode,
      onTrigger: s.trigger
    }, null, 8, ["data", "param", "status", "mode", "onTrigger"]))), 128))
  ], 2);
}
const Yo = /* @__PURE__ */ V(Uo, [["render", zo]]), ge = "h-modal", _e = "h-notify", qo = {
  name: "HModal",
  emits: ["open", "close", "update:modelValue"],
  props: {
    hasCloseIcon: {
      type: Boolean,
      default: !1
    },
    hasMask: {
      type: Boolean,
      default: !0
    },
    hasDivider: {
      type: Boolean,
      default: () => $.getOption("modal", "hasDivider")
    },
    closeOnMask: {
      type: Boolean,
      default: !0
    },
    middle: {
      type: Boolean,
      default: !1
    },
    modelValue: {
      type: Boolean,
      default: !1
    },
    fullScreen: {
      type: Boolean,
      default: !1
    },
    draggable: {
      type: Boolean,
      default: !1
    },
    transparent: {
      type: Boolean,
      default: !1
    },
    className: String,
    type: String,
    title: String
  },
  data() {
    return {
      isOpened: this.modelValue,
      isShow: this.modelValue,
      el: null
    };
  },
  computed: {
    noticeCls() {
      return {
        [ge]: !0,
        [_e]: !0,
        [`${ge}-type-default`]: !this.type,
        [`${_e}-show`]: this.isOpened,
        [`${_e}-has-mask`]: this.hasMask,
        [`${_e}-no-mask`]: !this.hasMask,
        [`${_e}-has-close`]: this.hasCloseIcon,
        [`${_e}-draggable`]: this.draggable,
        [`${ge}-has-divider`]: this.hasDivider,
        [`${ge}-container-center`]: !!this.middle,
        [`${ge}-type-${this.type}`]: this.type,
        [`${ge}-transparent`]: this.transparent,
        [`${ge}-full-screen`]: this.fullScreen,
        [this.className]: !!this.className
      };
    },
    hasHeader() {
      return !!this.$slots.header;
    },
    hasFooter() {
      return !!this.$slots.footer;
    }
  },
  watch: {
    modelValue() {
      this.modelValue ? this.show() : this.hide();
    },
    draggable() {
      this.doDraggable();
    }
  },
  mounted() {
    let e = this.$refs.modal;
    this.modelElement = e, this.$nextTick(() => {
      this.modelValue || (e.style.display = "none"), this.doDraggable();
    });
  },
  beforeUnmount() {
    let e = this.modelElement;
    e && (e.style.display = "none", this.removeDraggable());
  },
  methods: {
    removeDraggable() {
      this.drag && this.drag.destroy();
    },
    doDraggable() {
      if (this.drag && this.drag.destroy(), !this.draggable)
        return;
      const e = this.modelElement.querySelector(".h-notify-container");
      if (!e)
        return;
      let t = 0, i = 0, l = null, n = e.querySelector(".h-modal-header");
      n && (this.drag = new as(n, {
        start(s) {
          t = s.clientX, i = s.clientY, l = e.getBoundingClientRect(), e.style.left = `${l.left}px`, e.style.top = `${l.top}px`, e.style.transform = "initial", e.style.transition = "none";
        },
        drag(s) {
          let r = s.clientX - t, o = s.clientY - i;
          e.style.left = `${l.left + r}px`, e.style.top = `${l.top + o}px`;
        }
      }));
    },
    show() {
      let e = this.modelElement;
      if (e.style.display = "block", this.isShow = !0, this.hasMask) {
        let t = document.documentElement, i = window.innerWidth - t.clientWidth;
        t.style.overflow = "hidden", t.style.paddingRight = `${i}px`;
      }
      setTimeout(() => {
        this.isOpened = !0, this.doDraggable(), this.$emit("open");
      }, 100);
    },
    hide() {
      let e = this.modelElement;
      this.isOpened = !1, setTimeout(() => {
        e.style.display = "none", this.isShow = !1, this.removeDraggable(), this.$emit("close");
      }, 200);
      let t = document.documentElement;
      t.style.overflow = "", t.style.paddingRight = "";
    },
    setvalue(e) {
      (!e || e && this.hasMask && this.closeOnMask) && this.$emit("update:modelValue", !1);
    }
  }
}, Ko = {
  key: 0,
  class: "h-notify-container"
}, Xo = { class: "h-notify-content" }, Go = {
  key: 1,
  class: "h-modal-header"
}, Jo = {
  key: 0,
  class: "h-modal-title"
}, Qo = { class: "h-notify-body" }, Zo = {
  key: 2,
  class: "h-modal-footer"
};
function ea(e, t, i, l, n, s) {
  return a(), A(Ft, { to: "body" }, [
    m("div", {
      ref: "modal",
      class: S(s.noticeCls)
    }, [
      i.hasMask ? (a(), h("div", {
        key: 0,
        class: "h-notify-mask",
        onClick: t[0] || (t[0] = (r) => s.setvalue(!0))
      })) : k("", !0),
      m("div", {
        class: "h-notify-wrap",
        onClick: t[2] || (t[2] = B((r) => s.setvalue(!0), ["self"]))
      }, [
        I(ut, {
          name: i.type,
          persisted: !1
        }, {
          default: z(() => [
            n.isShow ? (a(), h("div", Ko, [
              m("div", Xo, [
                i.hasCloseIcon ? (a(), h("span", {
                  key: 0,
                  class: "h-notify-close h-icon-close",
                  onClick: t[1] || (t[1] = (r) => s.setvalue(!1))
                })) : k("", !0),
                s.hasHeader || i.title ? (a(), h("header", Go, [
                  i.title ? (a(), h("span", Jo, _(i.title), 1)) : k("", !0),
                  N(e.$slots, "header")
                ])) : k("", !0),
                m("div", Qo, [
                  N(e.$slots, "default")
                ]),
                s.hasFooter ? (a(), h("footer", Zo, [
                  N(e.$slots, "footer")
                ])) : k("", !0)
              ])
            ])) : k("", !0)
          ]),
          _: 3
        }, 8, ["name"])
      ])
    ], 2)
  ]);
}
const bs = /* @__PURE__ */ V(qo, [["render", ea]]), Yt = "h-notice", Pe = "h-notify";
let tt = document.querySelector(`.${Yt}-container`);
tt || (tt = document.createElement("div"), f.addClass(tt, `${Yt}-container`), document.body.appendChild(tt));
const ta = {
  name: "HNotice",
  emits: ["update:modelValue"],
  props: {
    hasCloseIcon: {
      type: Boolean,
      default: !0
    },
    modelValue: {
      type: Boolean,
      default: !1
    },
    fullScreen: {
      type: Boolean,
      default: !1
    },
    className: String,
    timeout: {
      type: Number,
      default: 4e3
    }
  },
  data() {
    return {
      isOpened: this.modelValue,
      isShow: this.modelValue,
      el: null
    };
  },
  computed: {
    noticeCls() {
      return {
        [Yt]: !0,
        [Pe]: !0,
        [`${Pe}-no-mask`]: !0,
        [`${Pe}-has-close`]: this.hasCloseIcon,
        [`${Pe}-has-icon`]: !0,
        [`${Pe}-show`]: this.isOpened,
        [this.className]: !!this.className
      };
    },
    hasHeader() {
      return !!this.$slots.header;
    },
    hasFooter() {
      return !!this.$slots.footer;
    }
  },
  watch: {
    modelValue() {
      this.modelValue ? this.show() : this.hide();
    }
  },
  mounted() {
    this.$nextTick(() => {
      let e = this.el = this.$refs.notice;
      this.modelValue ? this.show() : e.style.display = "none";
    });
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none");
  },
  methods: {
    show() {
      let e = this.el;
      e.style.display = "block", this.isShow = !0, setTimeout(() => {
        this.isOpened = !0;
      }, 100), this.timeout && setTimeout(() => {
        this.close();
      }, this.timeout);
    },
    hide() {
      let e = this.el;
      this.isOpened = !1, setTimeout(() => {
        e.style.display = "none", this.isShow = !1;
      }, 200);
    },
    close() {
      this.$emit("update:modelValue", !1);
    }
  }
}, ia = {
  key: 0,
  class: "h-notify-container"
}, sa = { class: "h-notify-content" }, la = { class: "h-notify-body" };
function na(e, t, i, l, n, s) {
  return a(), A(Ft, { to: ".h-notice-container" }, [
    m("div", {
      ref: "notice",
      class: S(s.noticeCls)
    }, [
      m("div", null, [
        I(ut, null, {
          default: z(() => [
            n.isShow ? (a(), h("div", ia, [
              m("div", sa, [
                i.hasCloseIcon ? (a(), h("span", {
                  key: 0,
                  class: "h-notify-close h-icon-close",
                  onClick: t[0] || (t[0] = (...r) => s.close && s.close(...r))
                })) : k("", !0),
                m("div", la, [
                  N(e.$slots, "default")
                ])
              ])
            ])) : k("", !0)
          ]),
          _: 3
        })
      ])
    ], 2)
  ]);
}
const ra = /* @__PURE__ */ V(ta, [["render", na]]), U = "h-select", oa = {
  name: "HSelect",
  mixins: [Y],
  emits: ["update:modelValue", "change"],
  props: {
    multiple: {
      type: Boolean,
      default: !1
    },
    datas: [Array, Object],
    type: {
      type: [String],
      default: "key"
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    dict: String,
    limit: {
      type: Number
    },
    deletable: {
      type: Boolean,
      default: () => $.getOption("select.deletable")
    },
    noBorder: {
      type: Boolean,
      default: !1
    },
    placeholder: {
      type: String
    },
    emptyContent: {
      type: String
    },
    filterable: {
      type: Boolean,
      default: !1
    },
    filter: [Function, String, Array],
    autosize: {
      type: Boolean,
      default: !1
    },
    equalWidth: {
      type: Boolean,
      default: !0
    },
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    },
    optionRender: Function,
    modelValue: [Number, String, Array, Object],
    className: String
  },
  data() {
    return {
      html: "select_render_html",
      codes: [],
      label: null,
      objects: {},
      searchInput: "",
      nowSelected: -1,
      isShow: !1,
      content: null
    };
  },
  computed: {
    hasClose() {
      return this.deletable && !this.multiple && this.hasValue && !this.disabled;
    },
    hasValue() {
      return this.multiple ? this.codes.length > 0 : !f.isNull(this.codes) && this.objects;
    },
    singleValue() {
      return this.hasValue ? this.objects[this.titleName] : null;
    },
    showEmptyContent() {
      return this.emptyContent || this.hlang("h.select.emptyContent");
    },
    hasLabel() {
      return this.options.some((e) => e.isLabel);
    },
    labels() {
      return this.multiple ? [] : this.options.filter((e) => e.isLabel).map((e) => (e.children = this.getLabelOptions(e), e));
    },
    selectCls() {
      let e = this.autosize || !!this.noBorder;
      return {
        [`${U}`]: !0,
        [`${U}-input-border`]: !this.noBorder,
        [`${U}-input-no-border`]: this.noBorder,
        [`${U}-multiple`]: this.multiple,
        [`${U}-no-autosize`]: !e,
        [`${U}-disabled`]: this.disabled
      };
    },
    showCls() {
      return {
        [`${U}-show`]: !0,
        [`${this.className}-show`]: !!this.className
      };
    },
    groupCls() {
      return {
        [`${U}-group`]: !0,
        [`${U}-group-has-label`]: this.hasLabel,
        [`${U}-multiple`]: this.multiple,
        [`${U}-single`]: !this.multiple,
        [`${this.className}-dropdown`]: !!this.className
      };
    },
    optionsMap() {
      let e = f.toObject(this.options, this.keyName);
      return delete e.null, e;
    },
    filterOptions() {
      if (this.searchInput) {
        this.dropdown && this.dropdown.update();
        let e = this.searchInput.toLowerCase();
        return this.options.filter((t) => {
          if (t.isLabel)
            return !0;
          if (this.filter) {
            if (typeof this.filter == "function")
              return this.filter.call(this, t, e);
            if (typeof this.filter == "string")
              return !!this.filter.split(",").find((i) => t[i] && t[i].toLowerCase().indexOf(e) !== -1);
            if (Array.isArray(this.filter))
              return !!this.filter.find((i) => t[i] && t[i].toLowerCase().indexOf(e) !== -1);
          }
          return (t[this.html] || t[this.titleName]).toLowerCase().indexOf(e) !== -1;
        });
      }
      return this.labels.length && this.label ? this.label.children : this.options;
    },
    options() {
      if (!this.datas && !this.dict)
        return console.error("[HeyUI Error] Select Component: Datas or dict parameters need to be defined at least."), [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), e = $.initOptions(e, this), e;
    }
  },
  watch: {
    datas() {
      this.parse();
    },
    modelValue() {
      this.parse();
    },
    disabled() {
      this.dropdown && (this.disabled ? this.dropdown.disabled() : this.dropdown.enabled());
    },
    searchInput() {
      this.nowSelected = -1;
    },
    nowSelected() {
      this.$nextTick(() => {
        if (this.content && this.nowSelected > -1) {
          let e = this.content.querySelector(".h-select-item-picked"), t = this.content.querySelector(".h-select-list");
          e && t && (e.offsetTop + e.offsetHeight - t.scrollTop > t.offsetHeight ? t.scrollTop = e.offsetTop + e.offsetHeight - t.offsetHeight : e.offsetTop - t.scrollTop < 0 && (t.scrollTop = e.offsetTop));
        }
      });
    }
  },
  beforeMount() {
    this.parse();
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  mounted() {
    this.labels.length && (this.label = this.labels[0]), this.$nextTick(() => {
      let e = this.el = this.$el.querySelector(".h-select-show"), t = this.content = this.$el.querySelector(".h-select-group"), i = this;
      this.dropdown = new he(e, {
        content: t,
        disabled: this.disabled,
        equalWidth: this.equalWidth,
        trigger: "click foucs",
        triggerOnce: this.filterable || this.filter,
        events: {
          show: () => {
            i.isShow = !0, this.codes && !this.multiple && this.labels.length && (this.label = this.labels.find((l) => l.children.find((n) => this.isEqual(this.codes, n[this.keyName]))));
          }
        }
      });
    });
  },
  methods: {
    getLabelOptions(e) {
      let t = this.options.findIndex((l) => l[this.titleName] === e[this.titleName] && l.isLabel), i = [];
      for (let l = t + 1; l < this.options.length; l++) {
        let n = this.options[l];
        if (n.isLabel)
          break;
        i.push(n);
      }
      return i;
    },
    changeLable(e) {
      this.label = e;
    },
    focusSearchInput() {
      this.$el.querySelector(".h-select-search-input").focus();
    },
    handle(e) {
      let t = e.keyCode || e.which || e.charCode;
      t === 38 ? this.nowSelected > 0 && (this.nowSelected -= 1) : t === 40 ? this.nowSelected < this.filterOptions.length - 1 && (this.nowSelected += 1) : e.code === "Enter" && (this.nowSelected < 0 && (this.nowSelected += 1), this.enterHandle(e));
    },
    enterHandle(e) {
      e.preventDefault(), this.nowSelected >= 0 && (this.setvalue(this.filterOptions[this.nowSelected], "enter"), this.multiple || e.target.blur());
    },
    blurHandle() {
      this.nowSelected = -1, setTimeout(() => {
        this.searchInput = "";
      }, 300);
    },
    search(e) {
      this.searchInput = e;
    },
    clear() {
      this.setvalue(
        {
          [`${this.keyName}`]: null
        },
        "clear"
      );
    },
    setObjects() {
      if (this.multiple) {
        let e = [];
        for (let t of this.codes)
          this.optionsMap[t] != null && e.push(this.optionsMap[t]);
        this.objects = e;
      } else
        this.objects = this.optionsMap[this.codes];
    },
    parse() {
      if (this.multiple) {
        let e = this.modelValue || [];
        f.isArray(e) || (console.warn(`[HeyUI WARNING] Select Component: value '${e}' can't be a value of a multiple select`), e = []), this.codes = e.map((t) => this.type == "key" ? this.getValue(t) : t[this.keyName]).filter((t) => t !== null);
      } else
        this.type == "key" ? this.codes = this.getValue(this.modelValue) : f.isObject(this.modelValue) ? this.codes = this.modelValue[this.keyName] : this.codes = null;
      this.setObjects();
    },
    getValue(e) {
      return f.isNull(e) ? null : e;
    },
    setvalue(e) {
      if (this.disabled || e.disabled || e.isLabel)
        return;
      let t = e[this.keyName];
      if (this.multiple) {
        if (!f.isNull(this.limit) && !this.isIncludes(t) && this.codes.length >= this.limit) {
          R.error(this.hlang("h.select.limitSize", { limitSize: this.limit }));
          return;
        }
        this.codes = f.toggleValue(this.codes, t);
      } else
        this.codes = t;
      this.setObjects();
      let i = this.type == "key" ? this.codes : this.objects;
      this.$emit("update:modelValue", i), this.$emit("change", this.objects);
      let l = document.createEvent("CustomEvent");
      l.initCustomEvent("setvalue", !0, !0, this.objects), this.$el.dispatchEvent(l), this.nowSelected = -1, this.multiple ? (this.searchInput = "", this.$nextTick(() => {
        this.dropdown.update();
      })) : (this.dropdown.hide(), setTimeout(() => {
        this.searchInput = "";
      }, 100));
    },
    isIncludes(e) {
      return this.codes.some((t) => this.isEqual(t, e));
    },
    isEqual(e, t) {
      return e == t && String(e) == String(t);
    },
    getLiCls(e, t) {
      let i = e[this.keyName];
      return e.isLabel ? {
        [`${U}-item-label`]: e.isLabel
      } : {
        [`${U}-item-disabled`]: e.disabled,
        [`${U}-item`]: !0,
        [`${U}-item-selected`]: this.multiple ? this.isIncludes(i) : this.isEqual(this.codes, i),
        [`${U}-item-picked`]: this.nowSelected === t
      };
    }
  }
}, aa = { class: "h-select-multiple-tags" }, ha = ["onClick"], ua = ["disabled", "placeholder"], da = {
  key: 0,
  class: "h-select-placeholder"
}, ca = ["disabled", "placeholder"], fa = {
  key: 0,
  class: "h-select-value-single"
}, ma = {
  key: 1,
  class: "h-select-placeholder"
}, pa = { class: "h-icon-down" }, ga = {
  key: 0,
  class: "h-select-group-container"
}, ya = { class: "h-select-list" }, ba = { style: { display: "flex" } }, va = {
  key: 0,
  class: "h-select-ul h-select-ul-labels h-select-ul-scroll"
}, wa = ["onClick"], ka = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), Sa = ["onClick"], Ca = ["innerHTML"], xa = {
  key: 3,
  class: "h-icon-check"
}, _a = {
  key: 0,
  class: "h-select-ul-empty"
};
function Ta(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.selectCls)
  }, [
    m("div", {
      class: S(s.showCls)
    }, [
      i.multiple ? (a(), h(O, { key: 0 }, [
        m("div", aa, [
          (a(!0), h(O, null, E(n.objects, (r) => (a(), h("span", {
            key: r[i.keyName]
          }, [
            m("span", null, _(r[i.titleName]), 1),
            i.disabled ? k("", !0) : (a(), h("i", {
              key: 0,
              class: "h-icon-close-min",
              onClick: B((o) => s.setvalue(r), ["stop"])
            }, null, 8, ha))
          ]))), 128)),
          i.filterable || i.filter ? W((a(), h("input", {
            key: 0,
            "onUpdate:modelValue": t[0] || (t[0] = (r) => n.searchInput = r),
            type: "text",
            class: "h-select-search-input h-input",
            disabled: i.disabled,
            placeholder: i.placeholder,
            onKeyup: t[1] || (t[1] = (...r) => s.handle && s.handle(...r)),
            onBlur: t[2] || (t[2] = (...r) => s.blurHandle && s.blurHandle(...r)),
            onKeypress: t[3] || (t[3] = re((...r) => s.enterHandle && s.enterHandle(...r), ["enter"]))
          }, null, 40, ua)), [
            [oe, n.searchInput]
          ]) : k("", !0)
        ]),
        i.placeholder && !s.hasValue && !(i.filterable || i.filter) ? (a(), h("div", da, _(i.placeholder), 1)) : k("", !0)
      ], 64)) : (a(), h(O, { key: 1 }, [
        i.filterable || i.filter ? (a(), h(O, { key: 0 }, [
          W(m("input", {
            "onUpdate:modelValue": t[4] || (t[4] = (r) => n.searchInput = r),
            type: "text",
            disabled: i.disabled,
            class: S([{ "h-select-search-input-value": s.hasValue }, "h-select-search-input h-select-single-search-input h-input"]),
            placeholder: s.hasValue ? "" : i.placeholder,
            onKeyup: t[5] || (t[5] = (...r) => s.handle && s.handle(...r)),
            onBlur: t[6] || (t[6] = (...r) => s.blurHandle && s.blurHandle(...r))
          }, null, 42, ca), [
            [oe, n.searchInput]
          ]),
          s.hasValue && n.searchInput === "" ? (a(), h("div", {
            key: 0,
            class: "h-select-filterable-value",
            onClick: t[7] || (t[7] = (...r) => s.focusSearchInput && s.focusSearchInput(...r))
          }, [
            e.$slots.show ? N(e.$slots, "show", {
              key: 1,
              value: n.objects
            }) : (a(), h(O, { key: 0 }, [
              F(_(s.singleValue), 1)
            ], 64))
          ])) : k("", !0)
        ], 64)) : (a(), h(O, { key: 1 }, [
          s.hasValue ? (a(), h("div", fa, [
            e.$slots.show ? N(e.$slots, "show", {
              key: 1,
              value: n.objects
            }) : (a(), h(O, { key: 0 }, [
              F(_(s.singleValue), 1)
            ], 64))
          ])) : (a(), h("div", ma, _(i.placeholder), 1))
        ], 64))
      ], 64)),
      W(m("i", {
        class: "h-icon-close text-hover",
        onClick: t[8] || (t[8] = B((...r) => s.clear && s.clear(...r), ["stop"]))
      }, null, 512), [
        [Q, s.hasClose]
      ]),
      W(m("i", pa, null, 512), [
        [Q, !s.hasClose]
      ])
    ], 2),
    m("div", {
      class: S(s.groupCls)
    }, [
      n.isShow ? (a(), h("div", ga, [
        m("div", ya, [
          N(e.$slots, "top", { results: s.filterOptions }),
          m("div", ba, [
            s.labels.length && !n.searchInput && !i.multiple ? (a(), h("ul", va, [
              (a(!0), h(O, null, E(s.labels, (r) => (a(), h("li", {
                class: S(["h-select-item", { "h-select-item-selected": n.label && n.label[i.titleName] === r[i.titleName] }]),
                onClick: (o) => s.changeLable(r)
              }, [
                F(_(r[i.titleName]) + " ", 1),
                ka
              ], 10, wa))), 256))
            ])) : k("", !0),
            m("ul", {
              style: { flex: "1" },
              class: S(["h-select-ul", { "h-select-ul-scroll": s.labels.length && !n.searchInput && !i.multiple }])
            }, [
              (a(!0), h(O, null, E(s.filterOptions, (r, o) => (a(), h(O, null, [
                r.hidden ? k("", !0) : (a(), h("li", {
                  key: r[i.keyName],
                  class: S(s.getLiCls(r, o)),
                  onClick: (c) => s.setvalue(r)
                }, [
                  i.optionRender ? (a(), h("div", {
                    key: 0,
                    innerHTML: r[n.html]
                  }, null, 8, Ca)) : e.$slots.item ? N(e.$slots, "item", {
                    key: 2,
                    item: r
                  }) : (a(), h(O, { key: 1 }, [
                    F(_(r[i.titleName]), 1)
                  ], 64)),
                  i.multiple ? (a(), h("i", xa)) : k("", !0)
                ], 10, Sa))
              ], 64))), 256)),
              s.filterOptions.length == 0 ? (a(), h("li", _a, _(s.showEmptyContent), 1)) : k("", !0)
            ], 2)
          ]),
          N(e.$slots, "bottom", { results: s.filterOptions })
        ])
      ])) : k("", !0)
    ], 2)
  ], 2);
}
const vs = /* @__PURE__ */ V(oa, [["render", Ta]]), le = "h-page", Oa = {
  name: "HPagination",
  components: {
    Select: vs
  },
  emits: ["input", "change", "update:modelValue", "changeSize"],
  mixins: [Y],
  props: {
    size: {
      type: Number,
      default: () => $.getOption("page.size")
    },
    sizes: {
      type: Array,
      default: () => $.getOption("page.sizes")
    },
    align: {
      type: String,
      default: "left"
    },
    cur: {
      type: Number,
      default: 1
    },
    total: {
      type: Number,
      default: 0
    },
    pagerSize: {
      type: Number,
      default: 5
    },
    small: {
      type: Boolean,
      default: () => $.getOption("page.small")
    },
    layout: {
      type: String,
      default: () => $.getOption("page.layout")
    },
    modelValue: {
      type: Object,
      default: () => ({})
    }
  },
  data() {
    let e = this.layout.replace(" ", "").split(","), t = { total: -1, pager: -1, jumper: -1, sizes: -1 };
    for (let i in t)
      t[i] = e.indexOf(i);
    return {
      sizeNow: this.modelValue.size || this.size,
      orders: t,
      curValue: null
    };
  },
  computed: {
    sizesShow() {
      const e = $.getOption("dict", "keyName"), t = $.getOption("dict", "titleName");
      return this.sizes.map((i) => ({
        [e]: i,
        [t]: this.hlang("h.pagination.sizeOfPage", { size: i })
      }));
    },
    curNow() {
      return this.curValue || this.modelValue.page || this.cur;
    },
    totalNow() {
      return this.modelValue.total || this.total || 0;
    },
    count() {
      return Math.ceil(this.totalNow / this.sizeNow);
    },
    pagers() {
      if (this.count < 3)
        return [];
      let e = this.curNow - Math.floor(this.pagerSize / 2);
      e = Math.max(2, e);
      let t = e + this.pagerSize - 1;
      t = Math.min(this.count - 1, t), e = Math.min(e, t - this.pagerSize + 1), e = Math.max(2, e);
      let i = [];
      for (let l = e; l <= t; l++)
        i.push(l);
      return i;
    },
    prefix() {
      return le;
    },
    prevCls() {
      return {
        [`${le}-pager-disabled`]: this.curNow == 1,
        "h-page-pager": !0
      };
    },
    nextCls() {
      return {
        [`${le}-pager-disabled`]: this.curNow == this.count,
        "h-page-pager": !0
      };
    },
    pagerCls() {
      return {
        [`${le}-pager`]: !0
      };
    },
    pageCls() {
      return {
        [`${le}`]: !0,
        [`${le}-small`]: this.small,
        [`${le}-align-${this.align}`]: !!this.align
      };
    },
    containerCls() {
      return {};
    },
    noticeCls() {
      return {};
    }
  },
  watch: {
    cur() {
      this.curValue = null;
    },
    size() {
      this.sizeNow = this.modelValue.size || this.size;
    },
    "modelValue.page"() {
      this.curValue = null;
    },
    "modelValue.size"() {
      this.sizeNow = this.modelValue.size || this.size;
    }
  },
  methods: {
    prev() {
      this.curNow != 1 && this.change(this.curNow - 1);
    },
    next() {
      this.curNow != this.count && this.change(this.curNow + 1);
    },
    jump(e) {
      let t = parseInt(e.target.value, 10);
      if (isNaN(t)) {
        R.error(this.hlang("h.pagination.incorrectFormat"));
        return;
      }
      if (t > this.count || t < 1) {
        R.error(this.hlang("h.pagination.overSize"));
        return;
      }
      let i = parseInt(e.target.value, 10);
      i != (this.modelValue.page || this.cur) && this.setvalue({ cur: i, size: this.sizeNow });
    },
    change(e) {
      if (this.curNow == e)
        return;
      let t = $.getOption("page.onChange");
      f.isFunction(t) && t({ cur: e, size: this.sizeNow }), this.setvalue({ cur: e, size: this.sizeNow });
    },
    setvalue(e) {
      let t = { page: e.cur, total: this.totalNow };
      Object.assign(t, e), this.curValue = e.cur;
      let i = { ...t };
      delete i.cur, this.$emit("input", i), this.$emit("update:modelValue", i), this.$emit("change", t);
    },
    changeSize() {
      this.setvalue({ cur: 1, size: this.sizeNow }), this.$emit("changeSize", this.sizeNow);
      let e = $.getOption("page.onChangeSize");
      f.isFunction(e) && e(this.sizeNow);
    },
    genPagerCls(e) {
      return {
        [`${le}-pager`]: !0,
        [`${le}-pager-selected`]: this.curNow == e
      };
    }
  }
}, Na = /* @__PURE__ */ m("i", { class: "h-icon-angle-left" }, null, -1), $a = [
  Na
], Va = {
  key: 0,
  class: "h-page-pager h-page-ellipsis"
}, Da = ["onClick"], Ea = {
  key: 1,
  class: "h-page-pager h-page-ellipsis"
}, Ma = /* @__PURE__ */ m("i", { class: "h-icon-angle-right" }, null, -1), ja = [
  Ma
], La = ["value"];
function Aa(e, t, i, l, n, s) {
  const r = L("Select");
  return a(), h("div", {
    class: S(s.pageCls)
  }, [
    n.orders.total != -1 ? (a(), h("span", {
      key: 0,
      class: S(s.prefix + "-total"),
      style: D({ order: n.orders.total })
    }, [
      F(_(e.hlang("h.pagination.totalBefore")) + " ", 1),
      m("span", {
        class: S(s.prefix + "-total-num")
      }, _(s.totalNow), 3),
      F(" " + _(e.hlang("h.pagination.totalAfter")), 1)
    ], 6)) : k("", !0),
    n.orders.sizes != -1 ? (a(), A(r, {
      key: 1,
      modelValue: n.sizeNow,
      "onUpdate:modelValue": t[0] || (t[0] = (o) => n.sizeNow = o),
      "no-border": i.small,
      autosize: !0,
      deletable: !1,
      datas: s.sizesShow,
      style: D({ order: n.orders.sizes }),
      class: "h-page-select-size",
      onChange: s.changeSize
    }, null, 8, ["modelValue", "no-border", "datas", "style", "onChange"])) : k("", !0),
    n.orders.pager != -1 && this.count > 0 ? (a(), h("span", {
      key: 2,
      class: "h-page-pager-container",
      style: D({ order: n.orders.pager })
    }, [
      m("span", {
        class: S(s.prevCls),
        onClick: t[1] || (t[1] = (o) => s.prev())
      }, $a, 2),
      m("span", {
        class: S(s.genPagerCls(1)),
        onClick: t[2] || (t[2] = (o) => s.change(1))
      }, "1", 2),
      s.pagers.length > 0 && 1 < s.pagers[0] - 1 ? (a(), h("span", Va, "...")) : k("", !0),
      (a(!0), h(O, null, E(s.pagers, (o) => (a(), h("span", {
        key: o,
        class: S(s.genPagerCls(o)),
        onClick: (c) => s.change(o)
      }, _(o), 11, Da))), 128)),
      s.pagers.length > 0 && s.count > s.pagers[s.pagers.length - 1] + 1 ? (a(), h("span", Ea, "...")) : k("", !0),
      this.count > 1 ? (a(), h("span", {
        key: 2,
        class: S(s.genPagerCls(s.count)),
        onClick: t[3] || (t[3] = (o) => s.change(s.count))
      }, _(s.count), 3)) : k("", !0),
      m("span", {
        class: S(s.nextCls),
        onClick: t[4] || (t[4] = (o) => s.next())
      }, ja, 2)
    ], 4)) : k("", !0),
    n.orders.jumper != -1 && s.count > 0 ? (a(), h("input", {
      key: 3,
      type: "text",
      style: D({ order: n.orders.jumper }),
      class: "h-page-jumper-input h-input",
      value: s.curNow,
      onBlur: t[5] || (t[5] = (...o) => s.jump && s.jump(...o)),
      onKeyup: t[6] || (t[6] = re((...o) => s.jump && s.jump(...o), ["enter"]))
    }, null, 44, La)) : k("", !0)
  ], 2);
}
const Ba = /* @__PURE__ */ V(Oa, [["render", Aa]]), Ia = {
  name: "HPoptip",
  components: { Tooltip: ct },
  emits: ["confirm"],
  mixins: [Y],
  props: {
    content: String,
    placement: {
      type: String,
      default: "top"
    },
    trigger: {
      type: String,
      default: "click"
    },
    theme: {
      type: String,
      default: "white"
    },
    disabled: {
      type: Boolean,
      default: !1
    }
  },
  methods: {
    close() {
      this.$refs.tooltip.hide();
    },
    confirm() {
      this.$emit("confirm"), this.close();
    }
  }
}, Ha = { class: "h-poptip" }, Fa = { class: "h-poptip-content" }, Pa = /* @__PURE__ */ m("i", { class: "yellow-color h-icon-warn" }, null, -1), Wa = /* @__PURE__ */ m("i", { class: "h-poptip-split" }, null, -1), Ra = { class: "clearfix" }, Ua = { class: "float-right" };
function za(e, t, i, l, n, s) {
  const r = L("Tooltip");
  return a(), A(r, {
    ref: "tooltip",
    theme: i.theme,
    disabled: i.disabled,
    placement: i.placement,
    trigger: i.trigger
  }, {
    content: z(() => [
      m("div", Ha, [
        m("div", Fa, [
          Pa,
          Wa,
          F(_(i.content), 1)
        ]),
        m("div", Ra, [
          m("div", Ua, [
            m("button", {
              type: "button",
              class: "h-btn h-btn-text h-btn-xs",
              onClick: t[0] || (t[0] = (...o) => s.close && s.close(...o))
            }, _(e.hlang("h.common.cancel")), 1),
            m("button", {
              type: "button",
              class: "h-btn h-btn-text h-btn-xs h-btn-primary",
              onClick: t[1] || (t[1] = (...o) => s.confirm && s.confirm(...o))
            }, _(e.hlang("h.common.confirm")), 1)
          ])
        ])
      ])
    ]),
    default: z(() => [
      N(e.$slots, "default")
    ]),
    _: 3
  }, 8, ["theme", "disabled", "placement", "trigger"]);
}
const Ya = /* @__PURE__ */ V(Ia, [["render", za]]), xi = ["red", "blue", "primary", "gray", "yellow", "green"], qa = {
  name: "HProgress",
  props: {
    color: {
      type: String,
      default: "primary"
    },
    percent: {
      type: Number,
      default: 0
    },
    strokeWidth: {
      type: Number,
      default: 10
    }
  },
  data() {
    return {};
  },
  computed: {
    progressInnerStyle() {
      let e = {};
      return e.height = `${this.strokeWidth}px`, e;
    },
    progressBgStyle() {
      let e = {};
      return !xi.indexOf(this.color) > -1 && (e["background-color"] = this.color), e.width = `${Math.min(this.percent, 100)}%`, e.height = `${this.strokeWidth}px`, e;
    },
    progressBgClass() {
      let e = {};
      return xi.indexOf(this.color) > -1 && (e[`bg-${this.color}-color`] = !0), e;
    }
  }
}, Ka = { class: "h-progress" }, Xa = {
  key: 0,
  class: "h-progress-title"
}, Ga = {
  key: 1,
  class: "h-progress-text"
};
function Ja(e, t, i, l, n, s) {
  return a(), h("div", Ka, [
    e.$slots.title ? (a(), h("div", Xa, [
      N(e.$slots, "title")
    ])) : k("", !0),
    m("div", {
      class: "h-progress-inner",
      style: D(s.progressInnerStyle)
    }, [
      m("div", {
        class: S(["h-progress-bg", s.progressBgClass]),
        style: D(s.progressBgStyle)
      }, null, 6)
    ], 4),
    e.$slots.text ? (a(), h("div", Ga, [
      N(e.$slots, "text")
    ])) : k("", !0)
  ]);
}
const Qa = /* @__PURE__ */ V(qa, [["render", Ja]]), Za = {
  name: "HRadio",
  emits: ["input", "change", "update:modelValue"],
  props: {
    modelValue: [Object, String, Boolean, Number],
    datas: [Object, Array],
    disabled: {
      type: Boolean,
      default: !1
    },
    value: [Object, String, Boolean, Number],
    dict: String,
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    }
  },
  data() {
    return {
      key: this.keyName,
      title: this.titleName
    };
  },
  computed: {
    isSingle() {
      return !f.isNull(this.value) && this.arr.length == 0;
    },
    arr() {
      if (!this.datas && !this.dict)
        return [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), $.initOptions(e, this);
    }
  },
  methods: {
    setvalue(e) {
      if (this.disabled)
        return;
      let t = null;
      this.isSingle ? t = this.value : t = e[this.key], this.$emit("input", t), this.$emit("update:modelValue", t), this.$emit("change", e);
      let i = document.createEvent("CustomEvent");
      i.initCustomEvent("setvalue", !0, !0, t), this.$el.dispatchEvent(i);
    }
  }
}, eh = ["onClick"], th = /* @__PURE__ */ m("span", { class: "radio-icon h-radio-icon" }, null, -1), ih = {
  key: 0,
  class: "h-radio-text"
}, sh = /* @__PURE__ */ m("span", { class: "radio-icon h-radio-icon" }, null, -1);
function lh(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(["h-radio", { "h-radio-disabled": i.disabled, "h-radio-single": s.isSingle }])
  }, [
    s.isSingle ? (a(), h("label", {
      key: 1,
      class: S({ "h-radio-label": !0, "h-radio-checked": i.value == i.modelValue, "h-radio-un-checked": i.value !== i.modelValue }),
      onClick: t[0] || (t[0] = (r) => s.setvalue())
    }, [
      sh,
      m("span", null, [
        N(e.$slots, "default")
      ])
    ], 2)) : (a(!0), h(O, { key: 0 }, E(s.arr, (r) => (a(), h("label", {
      key: r[n.key],
      class: S({
        "h-radio-label": !0,
        "h-radio-checked": r[n.key] == i.modelValue,
        "h-radio-un-checked": r[n.key] != i.modelValue,
        "h-radio-item-disabled": r.disabled
      }),
      onClick: (o) => s.setvalue(r)
    }, [
      th,
      e.$slots.item ? N(e.$slots, "item", {
        key: 1,
        item: r
      }) : (a(), h("span", ih, _(r[n.title]), 1))
    ], 10, eh))), 128))
  ], 2);
}
const ws = /* @__PURE__ */ V(Za, [["render", lh]]), nh = {
  name: "HRate",
  emits: ["input", "change", "update:modelValue"],
  props: {
    readonly: {
      type: Boolean,
      default: !1
    },
    showText: {
      type: Boolean,
      default: !1
    },
    iconClass: {
      type: String,
      default: "h-icon-star-on"
    },
    modelValue: {
      type: [String, Number],
      default: 0
    }
  },
  data() {
    return {
      mouseValue: !1
    };
  },
  computed: {},
  methods: {
    setvalue(e) {
      if (this.readonly)
        return;
      this.$emit("input", e), this.$emit("update:modelValue", e), this.$emit("change", e);
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, this.modelValue), this.$el.dispatchEvent(t);
    },
    mouseover(e) {
      this.readonly || (this.mouseValue = e);
    },
    mouseleave() {
      this.readonly || (this.mouseValue = !1);
    },
    starCls(e) {
      let t = this.mouseValue || Number(this.modelValue);
      return {
        "h-rate-star": !0,
        "h-rate-star-on": t >= e,
        "h-rate-star-off": t < e
      };
    }
  }
}, rh = ["onClick", "onMouseover"], oh = {
  key: 0,
  class: "h-rate-value"
};
function ah(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S({ "h-rate": !0, "h-rate-readonly": i.readonly }),
    onMouseleave: t[0] || (t[0] = (r) => s.mouseleave())
  }, [
    (a(), h(O, null, E(5, (r) => m("span", {
      key: r,
      class: S(s.starCls(r)),
      onClick: (o) => s.setvalue(r),
      onMouseover: (o) => s.mouseover(r)
    }, [
      m("i", {
        class: S(i.iconClass)
      }, null, 2)
    ], 42, rh)), 64)),
    i.showText ? (a(), h("span", oh, _(i.modelValue), 1)) : k("", !0)
  ], 34);
}
const hh = /* @__PURE__ */ V(nh, [["render", ah]]), uh = "h-slider", dh = {
  name: "HSlider",
  emits: ["update:modelValue", "change"],
  props: {
    readonly: {
      type: Boolean,
      default: !1
    },
    step: {
      type: Number,
      default: 1
    },
    modelValue: {
      type: [Number, Object],
      default: 0
    },
    show: Function,
    multiple: {
      type: Boolean,
      default: !1
    },
    showtip: {
      type: Boolean,
      default: !0
    },
    range: {
      default: () => ({
        start: 0,
        end: 100
      })
    },
    trackStyle: Object
  },
  data() {
    return {
      eventControl: {
        type: null,
        x: null,
        init: null
      },
      tooltip: {
        start: null,
        end: null
      }
    };
  },
  computed: {
    hasStart() {
      return this.multiple;
    },
    computedTrackStyle() {
      let e = this.range.end - this.range.start;
      return Object.assign(
        {
          left: `${parseInt((this.values.start - this.range.start) / e * 100, 10)}%`,
          right: `${parseInt((this.range.end - this.values.end) / e * 100, 10)}%`
        },
        this.trackStyle
      );
    },
    nodePosition() {
      let e = this.range.end - this.range.start;
      return {
        start: `${parseInt((this.values.start - this.range.start) / e * 100, 10)}%`,
        end: `${100 - parseInt((this.range.end - this.values.end) / e * 100, 10)}%`
      };
    },
    values() {
      return this.multiple ? f.extend(
        {
          start: this.range.start,
          end: this.range.start
        },
        this.modelValue
      ) : {
        start: this.range.start,
        end: this.modelValue || this.range.start
      };
    },
    sliderCls() {
      return {
        [`${uh}`]: !0
      };
    }
  },
  mounted() {
    this.$nextTick(() => {
      if (!this.showtip)
        return;
      if (this.hasStart) {
        let t = this.$el.querySelector(".h-slider-start-node");
        this.tooltip.start = new at(t, {
          content: this.$el.querySelector(".h-slider-start-node-modelValue"),
          html: !0,
          trigger: "manual hover",
          container: document.body,
          placement: this.placement
        });
      }
      let e = this.$el.querySelector(".h-slider-end-node");
      this.tooltip.end = new at(e, {
        content: this.$el.querySelector(".h-slider-end-node-modelValue"),
        html: !0,
        trigger: "manual hover",
        container: document.body,
        placement: this.placement
      });
    });
  },
  methods: {
    choosePosition(e) {
      if (this.multiple)
        return;
      this.eventControl.type = "end";
      let t = this.$el.querySelector(".h-slider-end-node").getBoundingClientRect();
      this.eventControl.x = t.left + t.width / 2, this.eventControl.init = this.values.end, this.mousemove(e), document.body.addEventListener("mousemove", this.mousemove), document.body.addEventListener("mouseup", this.mouseup), document.body.addEventListener("click", this.click);
    },
    showContent(e) {
      return this.show ? this.show.call(null, e) : e || this.range.start;
    },
    mousedown(e, t) {
      this.readonly || (f.addClass(t.target, "h-slider-node-dragging"), this.eventControl.type = e, this.eventControl.x = t.clientX, this.eventControl.init = this.values[e], document.body.addEventListener("mousemove", this.mousemove), document.body.addEventListener("mouseup", this.mouseup), document.body.addEventListener("click", this.click), this.tooltip[e] && this.tooltip[e].show());
    },
    mouseup(e) {
      if (e.stopPropagation(), this.readonly)
        return;
      document.body.removeEventListener("mousemove", this.mousemove), document.body.removeEventListener("mouseup", this.mouseup), setTimeout(() => {
        document.body.removeEventListener("click", this.click);
      }, 200);
      let t = this.$el.querySelector(".h-slider-node-dragging");
      t && f.removeClass(t, "h-slider-node-dragging");
      let i = this.eventControl.type;
      this.tooltip[i] && this.tooltip[i].hide();
    },
    click(e) {
      e.stopPropagation();
    },
    mousemove(e) {
      if (this.readonly)
        return;
      let t = e.clientX - this.eventControl.x;
      if (t == 0)
        return;
      let i = t / this.$el.querySelector(".h-slider-line").clientWidth;
      i = parseInt(i * (this.range.end - this.range.start), 10), i = this.eventControl.init + i;
      let l = i % this.step;
      l != 0 && (i = i - l), i = Math.max(i, this.range.start), i = Math.min(i, this.range.end);
      let n = null, s = this.eventControl.type;
      this.hasStart ? (n = {}, this.values.start > i && s == "end" ? (s = "start", n = f.extend(this.values, { start: i, end: this.values.start })) : this.values.end < i && s == "start" ? (s = "end", n = f.extend(this.values, { start: this.values.end, end: i })) : n = f.extend(this.values, { [s]: i })) : (n = i, this.$emit("update:modelValue", n), this.$emit("change", n), s = "end"), this.eventControl.type != s && (f.removeClass(this.$el.querySelector(".h-slider-node-dragging"), "h-slider-node-dragging"), f.addClass(this.$el.querySelector(`.h-slider-${s}-node`), "h-slider-node-dragging"), this.tooltip[this.eventControl.type] && this.tooltip[this.eventControl.type].hide(), this.eventControl.type = s), this.$emit("update:modelValue", n), this.$emit("change", n);
      let r = document.createEvent("CustomEvent");
      r.initCustomEvent("setvalue", !0, !0, n), this.$el.dispatchEvent(r), this.tooltip[s] && (this.tooltip[s].show(), this.tooltip[s].update());
    }
  }
}, ch = { class: "h-slider-container" }, fh = {
  key: 1,
  class: "h-slider-end-node-modelValue h-tooltip-inner-content"
}, mh = {
  key: 2,
  class: "h-slider-start-node-modelValue h-tooltip-inner-content"
};
function ph(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.sliderCls)
  }, [
    m("div", ch, [
      m("div", {
        class: "h-slider-line",
        onMousedown: t[0] || (t[0] = (...r) => s.choosePosition && s.choosePosition(...r))
      }, null, 32),
      m("div", {
        class: "h-slider-track",
        style: D(s.computedTrackStyle),
        onMousedown: t[1] || (t[1] = (...r) => s.choosePosition && s.choosePosition(...r))
      }, null, 36),
      s.hasStart ? (a(), h("div", {
        key: 0,
        class: "h-slider-node h-slider-start-node",
        style: D({ left: s.nodePosition.start }),
        onClick: t[2] || (t[2] = B(() => {
        }, ["stop"])),
        onMousedown: t[3] || (t[3] = (r) => s.mousedown("start", r))
      }, null, 36)) : k("", !0),
      m("div", {
        class: "h-slider-node h-slider-end-node",
        style: D({ left: s.nodePosition.end }),
        onClick: t[4] || (t[4] = B(() => {
        }, ["stop"])),
        onMousedown: t[5] || (t[5] = (r) => s.mousedown("end", r))
      }, null, 36),
      i.showtip ? (a(), h("span", fh, _(s.showContent(s.values.end)), 1)) : k("", !0),
      i.showtip && s.hasStart ? (a(), h("span", mh, _(s.showContent(s.values.start)), 1)) : k("", !0)
    ])
  ], 2);
}
const gh = /* @__PURE__ */ V(dh, [["render", ph]]), _t = "h-loading", yh = {
  name: "HLoading",
  props: {
    loading: {
      type: Boolean,
      default: !1
    },
    text: String
  },
  data() {
    return {
      isSetStyle: !1
    };
  },
  unbind() {
  },
  computed: {
    circularCls() {
      return {
        [`${_t}-circular`]: !0
      };
    },
    textCls() {
      return {
        [`${_t}-text`]: !0
      };
    },
    loadingCls() {
      return {
        [`${_t}`]: !0
      };
    }
  },
  watch: {
    loading() {
      this.initStyle();
    }
  },
  mounted() {
    this.initStyle();
  },
  beforeUnmounted() {
    this.timeout && (clearTimeout(this.timeout), this.timeout = null);
  },
  methods: {
    initStyle() {
      this.loading ? (this.timeout && (clearTimeout(this.timeout), this.timeout = null), this.$nextTick(() => {
        f.addClass(this.$el, "h-loading-loading"), f.addClass(this.$el, "h-loading-visible");
        let e = this.$el.parentNode;
        e && f.addClass(e, "h-loading-parent");
      })) : (f.removeClass(this.$el, "h-loading-loading"), this.timeout = setTimeout(() => {
        f.removeClass(this.$el, "h-loading-visible");
        let e = this.$el.parentNode;
        e && f.removeClass(e, "h-loading-parent");
      }, 500));
    }
  }
}, bh = /* @__PURE__ */ m("svg", { viewBox: "25 25 50 50" }, [
  /* @__PURE__ */ m("circle", {
    cx: "50",
    cy: "50",
    r: "20",
    fill: "none",
    class: "circle"
  })
], -1);
function vh(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.loadingCls)
  }, [
    m("div", {
      class: S(s.circularCls)
    }, [
      bh,
      i.text ? (a(), h("p", {
        key: 0,
        class: S(s.textCls)
      }, _(i.text), 3)) : k("", !0)
    ], 2)
  ], 2);
}
const qt = /* @__PURE__ */ V(yh, [["render", vh]]), _i = "h-steps", wh = {
  name: "HSteps",
  props: {
    dict: String,
    datas: [Object, Array],
    step: {
      type: [String, Number],
      default: 0
    },
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    },
    contentLayout: {
      type: String,
      default: "vertical"
    }
  },
  data() {
    return {
      key: this.keyName,
      title: this.titleName
    };
  },
  computed: {
    stepsCls() {
      return {
        [`${_i}`]: !0,
        [`${_i}-${this.contentLayout}`]: !0
      };
    },
    stepIndex() {
      if (f.isNumber(this.step))
        return this.step;
      let e = 0;
      for (let t of this.arr) {
        if (t[this.key] == this.step)
          return e;
        e = e + 1;
      }
      return e;
    },
    arr() {
      if (!this.datas && !this.dict)
        return console.error("[HeyUI Error] Steps Component: Datas or dict parameters need to be defined at least."), [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), $.initOptions(e, this);
    }
  }
}, kh = { class: "h-steps-content" }, Sh = { class: "h-steps-icon" }, Ch = {
  key: 1,
  class: "h-steps-icon-custom"
}, xh = {
  key: 2,
  class: "h-steps-index"
}, _h = { class: "h-steps-index-num" }, Th = /* @__PURE__ */ m("i", { class: "h-icon-check h-steps-success" }, null, -1), Oh = { class: "h-steps-words" }, Nh = { class: "h-steps-title" }, $h = { class: "h-steps-desc" }, Vh = /* @__PURE__ */ m("div", { class: "h-steps-tail" }, null, -1);
function Dh(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.stepsCls)
  }, [
    (a(!0), h(O, null, E(s.arr, (r, o) => (a(), h("div", {
      key: o,
      class: S({
        "h-steps-process": o == s.stepIndex,
        "h-steps-actived": o < s.stepIndex,
        "h-steps-item": !0,
        "h-steps-item-first": o == 0,
        "h-steps-item-last": o + 1 == s.arr.length
      })
    }, [
      m("div", kh, [
        m("div", Sh, [
          e.$slots.icon ? N(e.$slots, "icon", {
            key: 0,
            item: r,
            index: o
          }) : r.icon ? (a(), h("span", Ch, [
            m("i", {
              class: S(r.icon)
            }, null, 2)
          ])) : (a(), h("span", xh, [
            m("i", _h, _(o + 1), 1),
            Th
          ]))
        ]),
        m("div", Oh, [
          m("div", Nh, [
            e.$slots.title ? N(e.$slots, "title", {
              key: 0,
              item: r,
              index: o
            }) : (a(), h(O, { key: 1 }, [
              F(_(r[n.title]), 1)
            ], 64))
          ]),
          m("div", $h, [
            e.$slots.desc ? N(e.$slots, "desc", {
              key: 0,
              item: r,
              index: o
            }) : r.desc ? (a(), h(O, { key: 1 }, [
              F(_(r.desc), 1)
            ], 64)) : k("", !0)
          ])
        ])
      ]),
      Vh
    ], 2))), 128))
  ], 2);
}
const Eh = /* @__PURE__ */ V(wh, [["render", Dh]]), We = "h-search", Mh = {
  name: "HSearch",
  mixins: [Y],
  emits: ["change", "search", "update:modelValue"],
  props: {
    position: {
      type: String,
      default: "end"
    },
    placeholder: {
      type: String
    },
    block: {
      type: Boolean,
      default: !1
    },
    triggerType: {
      type: String,
      default: "enter"
    },
    modelValue: String,
    showSearchButton: {
      type: Boolean,
      default: !1
    },
    searchButtonText: {
      type: String
    },
    searchButtonTheme: {
      type: String,
      default: "h-btn-primary"
    },
    height: Number,
    width: Number
  },
  data() {
    return {
      inputValue: this.modelValue
    };
  },
  computed: {
    searchButtonTextShow() {
      return this.searchButtonText || this.hlang("h.search.searchButtonText");
    },
    widthStyles() {
      let e = {};
      return this.width && (e.width = `${this.width}px`), e;
    },
    heightStyles() {
      let e = {};
      return this.height && (e.height = `${this.height}px`), e;
    },
    cls() {
      return {
        [`${We}`]: !0,
        [`${We}-block`]: this.block,
        [`${We}-searching`]: this.modelValue !== "" && this.modelValue !== null && this.modelValue !== void 0,
        [`${We}-has-button`]: this.showSearchButton,
        [`${We}-${this.position}`]: !0
      };
    }
  },
  watch: {
    modelValue() {
      this.inputValue = this.modelValue;
    }
  },
  methods: {
    search(e) {
      const t = e == null ? "" : e;
      this.inputValue = t, this.$emit("update:modelValue", t), this.$emit("search", t.trim()), this.$emit("change", t.trim());
    },
    inputTrigger(e) {
      this.triggerType == "input" ? this.search(e) : this.$emit("update:modelValue", e);
    }
  }
}, jh = {
  key: 0,
  class: "h-icon-search"
}, Lh = { class: "h-search-container" }, Ah = { class: "h-search-input" }, Bh = ["placeholder"];
function Ih(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.cls),
    style: D(s.widthStyles)
  }, [
    i.position == "front" ? (a(), h("i", jh)) : k("", !0),
    m("div", Lh, [
      m("div", Ah, [
        W(m("input", {
          "onUpdate:modelValue": t[0] || (t[0] = (r) => n.inputValue = r),
          type: "text",
          class: "h-input",
          style: D(s.heightStyles),
          placeholder: i.placeholder,
          onInput: t[1] || (t[1] = (r) => s.inputTrigger(n.inputValue)),
          onKeyup: t[2] || (t[2] = re((r) => s.search(n.inputValue), ["enter"]))
        }, null, 44, Bh), [
          [oe, n.inputValue]
        ]),
        m("i", {
          class: "h-icon-close",
          onClick: t[3] || (t[3] = (r) => s.search(""))
        })
      ]),
      i.showSearchButton ? (a(), h("button", {
        key: 0,
        type: "button",
        style: D(s.heightStyles),
        class: S(`h-btn ${i.searchButtonTheme}`),
        onClick: t[4] || (t[4] = (r) => s.search(n.inputValue))
      }, [
        e.$slots.default ? N(e.$slots, "default", { key: 0 }) : (a(), h(O, { key: 1 }, [
          F(_(s.searchButtonTextShow), 1)
        ], 64))
      ], 6)) : k("", !0)
    ]),
    i.position == "end" ? (a(), h("i", {
      key: 1,
      class: "h-icon-search h-icon-search-end",
      onClick: t[5] || (t[5] = (r) => s.search(n.inputValue))
    })) : k("", !0)
  ], 6);
}
const Kt = /* @__PURE__ */ V(Mh, [["render", Ih]]), Hh = {
  name: "HSwitch",
  emits: ["input", "change", "update:modelValue"],
  props: {
    disabled: {
      type: Boolean,
      default: !1
    },
    small: {
      type: Boolean,
      default: !1
    },
    modelValue: {
      type: [Boolean, String, Number],
      default: !1
    },
    trueValue: {
      default: !0
    },
    falseValue: {
      default: !1
    }
  },
  data() {
    return {};
  },
  computed: {
    isChecked() {
      return this.modelValue == this.trueValue;
    }
  },
  methods: {
    setvalue() {
      if (this.disabled)
        return;
      let e = this.isChecked ? this.falseValue : this.trueValue;
      this.$emit("input", e), this.$emit("update:modelValue", e), this.$emit("change", e);
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, this.modelValue), this.$el.dispatchEvent(t);
    }
  }
}, Fh = { class: "h-switch-span" }, Ph = { class: "h-switch-inner" }, Wh = { class: "h-switch-text" };
function Rh(e, t, i, l, n, s) {
  return a(), h("label", {
    class: S({ "h-switch": !0, "h-switch-small": i.small, "h-switch-disabled": i.disabled, "h-switch-checked": s.isChecked }),
    onClick: t[0] || (t[0] = (...r) => s.setvalue && s.setvalue(...r))
  }, [
    m("span", Fh, [
      m("span", Ph, [
        s.isChecked ? N(e.$slots, "open", { key: 0 }) : N(e.$slots, "close", { key: 1 })
      ])
    ]),
    m("span", Wh, [
      N(e.$slots, "default")
    ])
  ], 2);
}
const Ti = /* @__PURE__ */ V(Hh, [["render", Rh]]), Uh = {
  name: "HSwitchList",
  emits: ["update:modelValue", "change", "input"],
  props: {
    small: {
      type: Boolean,
      default: !1
    },
    datas: [Object, Array],
    disabled: {
      type: Boolean,
      default: !1
    },
    dict: String,
    modelValue: [String, Boolean, Number, Object],
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    }
  },
  data() {
    return {
      key: this.keyName,
      title: this.titleName
    };
  },
  computed: {
    arr() {
      if (!this.datas && !this.dict)
        return console.error("[HeyUI Error] Switchlist Component: Datas or dict parameters need to be defined at least."), [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), $.initOptions(e, this);
    }
  },
  methods: {
    setvalue(e) {
      let t = e[this.key];
      if (this.disabled || t == this.modelValue)
        return;
      this.$emit("update:modelValue", t), this.$emit("input", t), this.$emit("change", e);
      let i = document.createEvent("CustomEvent");
      i.initCustomEvent("setvalue", !0, !0, this.modelValue), this.$el.dispatchEvent(i);
    }
  }
}, zh = ["onClick"];
function Yh(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S({ "h-switch-list": !0, "h-switch-list-small": i.small, "h-switch-list-disabled": i.disabled })
  }, [
    (a(!0), h(O, null, E(s.arr, (r) => (a(), h("span", {
      key: r[n.key],
      class: S({ "h-switch-list-span": !0, "h-switch-list-span-checked": r[n.key] == i.modelValue }),
      onClick: (o) => s.setvalue(r)
    }, [
      e.$slots.title ? N(e.$slots, "title", {
        key: 0,
        item: r
      }) : (a(), h(O, { key: 1 }, [
        r.icon ? (a(), h("i", {
          key: 0,
          class: S(r.icon)
        }, null, 2)) : k("", !0),
        F(_(r[n.title]), 1)
      ], 64))
    ], 10, zh))), 128))
  ], 2);
}
const qh = /* @__PURE__ */ V(Uh, [["render", Yh]]), Kh = {
  name: "HSkeleton",
  props: {
    loading: {
      type: Boolean,
      default: !1
    },
    active: {
      type: Boolean,
      default: !1
    },
    title: {
      type: Boolean,
      default: !0
    },
    paragraph: {
      type: Boolean,
      default: !0
    },
    titleWidth: {
      type: String,
      default: "38%"
    },
    rows: {
      type: Number,
      default: 3
    },
    avatar: {
      type: Boolean,
      default: !1
    },
    avatarSize: {
      type: Number,
      default: 48
    },
    avatarShape: {
      type: String,
      default: "circle"
    }
  },
  data() {
    return {};
  },
  computed: {},
  mounted() {
    this.init();
  },
  methods: {
    init() {
    }
  }
}, Xh = {
  key: 0,
  class: "h-skeleton-avatar"
}, Gh = {
  key: 1,
  class: "h-skeleton-content"
}, Jh = {
  key: 1,
  class: "h-skeleton-paragraph"
};
function Qh(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(["h-skeleton", { "h-skeleton-active": i.active }])
  }, [
    i.loading ? (a(), h(O, { key: 0 }, [
      i.avatar ? (a(), h("div", Xh, [
        m("span", {
          class: S("h-skeleton-avatar-" + i.avatarShape),
          style: D({ width: i.avatarSize + "px", height: i.avatarSize + "px" })
        }, null, 6)
      ])) : k("", !0),
      i.title || i.paragraph ? (a(), h("div", Gh, [
        i.title ? (a(), h("h3", {
          key: 0,
          class: "h-skeleton-title",
          style: D({ width: i.titleWidth })
        }, null, 4)) : k("", !0),
        i.paragraph ? (a(), h("ul", Jh, [
          (a(!0), h(O, null, E(i.rows, (r, o) => (a(), h("li", { key: o }))), 128))
        ])) : k("", !0)
      ])) : k("", !0)
    ], 64)) : N(e.$slots, "default", { key: 1 })
  ], 2);
}
const Zh = /* @__PURE__ */ V(Kh, [["render", Qh]]), eu = {
  name: "HTableTd",
  emits: ["toggleTree"],
  props: {
    index: Number,
    prop: String,
    dict: String,
    data: [Object, Array],
    align: String,
    attrs: Function,
    unit: String,
    render: Function,
    format: Function,
    isTreeOpener: Boolean,
    className: String
  },
  data() {
    return {};
  },
  computed: {
    tdAttrs() {
      let e = {};
      return this.attrs && (e = this.attrs.call(null, this.data, this.index)), e;
    },
    level() {
      return this.data._level || 0;
    },
    cls() {
      return {
        [`text-${this.align}`]: !!this.align,
        [this.className]: !!this.className
      };
    },
    show() {
      if (this.prop == "$index")
        return this.index;
      if (this.prop == "$serial")
        return this.index + 1;
      if (this.render)
        return this.render.call(null, this.data);
      let e = this.data[this.prop];
      return this.dict ? $.dictMapping(e, this.dict) : this.unit ? e === "" || e === null || e === void 0 ? "" : `${e}${this.unit}` : this.format ? this.format(e) : e;
    }
  },
  methods: {
    toggleTree() {
      this.$emit("toggleTree", this.data);
    }
  }
}, tu = {
  key: 1,
  class: "h-table-tree-empty"
};
function iu(e, t, i, l, n, s) {
  return s.tdAttrs.colspan !== 0 && s.tdAttrs.rowspan !== 0 ? (a(), h("td", Z({
    key: 0,
    class: s.cls
  }, s.tdAttrs), [
    i.isTreeOpener ? (a(), h("span", {
      key: 0,
      class: S(["h-table-tree-expand", { "h-table-tree-opened": i.data._opened }])
    }, [
      (a(!0), h(O, null, E(s.level, (r) => (a(), h("i", {
        key: r,
        class: "h-table-tree-expand-space"
      }))), 128)),
      i.data.children && i.data.children.length ? (a(), h("i", {
        key: 0,
        class: S({ "h-table-tree-icon": !0, "h-icon-plus": !i.data._opened, "h-icon-minus": i.data._opened }),
        onClick: t[0] || (t[0] = (...r) => s.toggleTree && s.toggleTree(...r))
      }, null, 2)) : (a(), h("i", tu))
    ], 2)) : k("", !0),
    i.prop || i.render ? (a(), h(O, { key: 1 }, [
      F(_(s.show), 1)
    ], 64)) : k("", !0),
    N(e.$slots, "default", {
      data: i.data,
      index: i.index
    })
  ], 16)) : k("", !0);
}
const Oi = /* @__PURE__ */ V(eu, [["render", iu]]), su = {
  name: "hTableTr",
  emits: ["toggleTree", "trClick", "trDblClick"],
  props: {
    datas: [Object, Array],
    index: Number,
    computeColumns: Array
  },
  render() {
    let e = [];
    if (this.$slots.default && e.push(...this.$slots.default()), this.$parent.$slots.default) {
      for (let t of this.$parent.$slots.default() || [])
        if (t.type.name === "HTableItem") {
          let i = { ...t.props };
          i.data = this.datas, i.index = this.index, i.onToggleTree = (n) => {
            this.$emit("toggleTree", n);
          };
          const l = {};
          t.children && t.children.default && (l.default = t.children.default), e.push(Ke(Oi, i, l));
        }
    } else if (this.computeColumns)
      for (let t of this.computeColumns || []) {
        let i = { ...t };
        i.data = this.datas, i.index = this.index, i.onToggleTree = (l) => {
          this.$emit("toggleTree", l);
        }, e.push(Ke(Oi, i));
      }
    return Ke(
      "tr",
      {
        onClick: this.clickHandler,
        onDblClick: this.dblclickHandler
      },
      e
    );
  },
  methods: {
    clickHandler(e) {
      this.$emit("trClick", this.datas, this.index, e);
    },
    dblclickHandler(e) {
      this.$emit("trDblclick", this.datas, this.index, e);
    }
  }
}, lu = {
  name: "HTableTh",
  components: { Tooltip: ct },
  props: {
    rowspan: Number,
    colspan: Number,
    title: String,
    width: Number,
    className: String,
    fixed: String,
    label: String,
    prop: String,
    dict: String,
    align: String,
    format: Function,
    render: Function,
    unit: String,
    tooltip: {
      type: [Boolean, Object],
      default: !1
    },
    sortProp: String,
    sort: {
      type: [Boolean, String],
      default: !1
    },
    sortStatus: {
      type: Object,
      default: () => ({ type: null, prop: null })
    },
    placement: String,
    content: String
  },
  data() {
    return {};
  },
  computed: {
    tooltipParam() {
      return this.tooltip === !0 ? {
        disabled: !1,
        content: this.title
      } : f.isObject(this.tooltip) ? {
        disabled: !1,
        content: this.title,
        ...this.tooltip
      } : {
        disabled: !0
      };
    },
    cls() {
      return {
        "h-table-th": !0,
        [this.className]: !!this.className,
        "h-table-th-active": this.sort
      };
    },
    sortUseProp() {
      return this.sortProp || this.prop;
    }
  },
  methods: {
    triggerSort() {
      if (!this.sort)
        return !1;
      let e = f.copy(this.sortStatus);
      const { type: t } = this.sortStatus;
      t && this.sortStatus.prop == this.sortUseProp ? e.type = t === "desc" ? "asc" : t === "asc" ? null : "desc" : (e.type = "desc", e.prop = this.sortUseProp);
      let i = this.$parent;
      i.$options.name == "HTable" && i.triggerSort(e, this.sort);
    }
  }
}, nu = ["rowspan", "colspan"], ru = { class: "h-table-th-container" }, ou = {
  key: 0,
  class: "h-table-sort-handler"
};
function au(e, t, i, l, n, s) {
  const r = L("Tooltip");
  return a(), A(r, Hi(Fi(s.tooltipParam)), {
    default: z(() => [
      m("th", {
        rowspan: i.rowspan,
        colspan: i.colspan,
        onClick: t[0] || (t[0] = (o) => s.triggerSort()),
        class: S(s.cls)
      }, [
        m("div", ru, [
          m("div", {
            class: S({ [`text-${this.align}`]: !!this.align, "h-table-th-title": !0 })
          }, _(i.title), 3),
          i.sort ? (a(), h("span", ou, [
            m("i", {
              class: S({
                "h-table-sort-asc": !0,
                "h-table-sort-selected": i.sortStatus.type == "asc" && i.sortStatus.prop == s.sortUseProp,
                "h-icon-triangle-up": !0
              })
            }, null, 2),
            m("i", {
              class: S({
                "h-table-sort-desc": !0,
                "h-table-sort-selected": i.sortStatus.type == "desc" && i.sortStatus.prop == s.sortUseProp,
                "h-icon-triangle-down": !0
              })
            }, null, 2)
          ])) : k("", !0)
        ])
      ], 10, nu)
    ]),
    _: 1
  }, 16);
}
const hu = /* @__PURE__ */ V(lu, [["render", au]]);
function uu(e, t = 0, i) {
  const l = Math.max, n = Math.min;
  let s, r, o, c, u, y, g = 0, p = !1, w = !1, b = !0;
  if (!f.isFunction(e))
    throw new TypeError("debounce: func is not Function");
  f.isObject(i) && (p = !!i.leading, w = "maxWait" in i, o = w ? l(i.maxWait || 0, t) : o, b = "trailing" in i ? !!i.trailing : b);
  function d(P) {
    let ee = s, ke = r;
    return s = r = void 0, g = P, c = e.apply(ke, ee), c;
  }
  function v(P) {
    return g = P, u = setTimeout(M, t), p ? d(P) : c;
  }
  function T(P) {
    let ee = P - y, ke = P - g, Xt = t - ee;
    return w ? n(Xt, o - ke) : Xt;
  }
  function C(P) {
    let ee = P - y, ke = P - g;
    return y === void 0 || ee >= t || ee < 0 || w && ke >= o;
  }
  function M() {
    let P = new Date().getTime();
    if (C(P))
      return ie(P);
    u = setTimeout(M, T(P));
  }
  function ie(P) {
    return u = void 0, b && s ? d(P) : (s = r = void 0, c);
  }
  function ue() {
    u !== void 0 && clearTimeout(u), g = 0, s = y = r = u = void 0;
  }
  function we() {
    return u === void 0 ? c : ie(new Date().getTime());
  }
  function de() {
    let P = new Date().getTime(), ee = C(P);
    if (s = arguments, r = this, y = P, ee) {
      if (u === void 0)
        return v(y);
      if (w)
        return u = setTimeout(M, t), d(y);
    }
    return u === void 0 && (u = setTimeout(M, t)), c;
  }
  return de.cancel = ue, de.flush = we, de;
}
const du = {
  components: { Checkbox: je },
  emits: ["checkAll"],
  props: {
    checks: {
      type: Array,
      default: () => []
    },
    checkableDatas: {
      type: Array,
      default: () => []
    }
  },
  data() {
    return {};
  },
  computed: {},
  methods: {
    checkAll() {
      this.$emit("checkAll");
    }
  }
}, cu = { class: "h-table-checkbox-wrap" };
function fu(e, t, i, l, n, s) {
  const r = L("Checkbox");
  return a(), h("div", cu, [
    I(r, {
      indeterminate: i.checks.length > 0 && i.checks.length < i.checkableDatas.length,
      checked: i.checkableDatas.length > 0 && i.checks.length == i.checkableDatas.length,
      onClick: s.checkAll
    }, null, 8, ["indeterminate", "checked", "onClick"])
  ]);
}
const mu = /* @__PURE__ */ V(du, [["render", fu]]), Tt = "h-table", pu = {
  name: "HTable",
  components: {
    TableTr: su,
    TableTh: hu,
    Checkbox: je,
    Radio: ws,
    Loading: qt,
    CheckboxAll: mu
  },
  emits: ["select", "selectAll", "sort", "trClick", "rowSelect", "trDblClick"],
  mixins: [Y],
  props: {
    columns: {
      type: Array,
      default: () => []
    },
    datas: {
      type: Array,
      default: () => []
    },
    border: {
      type: Boolean,
      default: !1
    },
    height: Number,
    checkbox: {
      type: Boolean,
      default: !1
    },
    radio: {
      type: Boolean,
      default: !1
    },
    isStripe: {
      type: Boolean,
      default: !1
    },
    loading: {
      type: Boolean,
      default: !1
    },
    selectWhenClickTr: {
      type: Boolean,
      default: !1
    },
    ths: Array,
    isSelectRow: {
      type: Boolean,
      default: !1
    },
    getTrClass: Function
  },
  data() {
    return {
      uuid: `uuid-${f.uuid()}`,
      isMounted: !1,
      update: {
        datas: 0,
        columns: 0
      },
      scrollWidth: 0,
      scrollHeight: 0,
      scrollLeft: 0,
      scrollTop: 0,
      checks: [],
      hoveredTr: null,
      leftWidth: 0,
      rightWidth: 0,
      tableWidth: 400,
      computeColumns: [],
      datasBak: [...this.datas],
      sortStatus: {
        type: null,
        prop: null
      },
      tableDatas: [...this.datas],
      rowSelected: null,
      emptyWidth: 0
    };
  },
  computed: {
    checkableDatas() {
      return this.tableDatas.filter((e) => !e._disabledSelect);
    },
    totalCol() {
      return (this.checkbox || this.radio ? 1 : 0) + this.computeColumns.length;
    },
    fixedColumnLeft() {
      let e = [];
      for (let t of this.computeColumns)
        t.fixed == "left" && e.push(t);
      return e;
    },
    fixedColumnRight() {
      let e = [];
      for (let t of this.computeColumns)
        t.fixed == "right" && e.push(t);
      return e;
    },
    tableCls() {
      return {
        [Tt]: !0,
        [`${Tt}-border`]: !!this.border,
        [`${Tt}-stripe`]: this.isStripe
      };
    },
    fixedBodyStyle() {
      let e = {};
      return e.bottom = `${this.scrollHeight}px`, this.height && (e.maxHeight = `${this.height}px`), this.leftWidth && (e.width = `${this.leftWidth}px`), e;
    },
    fixedRightBodyStyle() {
      let e = {};
      return e["margin-right"] = `${this.scrollWidth}px`, e.bottom = `${this.scrollHeight}px`, this.height && (e.maxHeight = `${this.height}px`), this.rightWidth && (e.width = `${this.rightWidth}px`), e;
    },
    bodyStyle() {
      let e = {};
      return this.height && (e.maxHeight = `${this.height}px`), e;
    }
  },
  watch: {
    datas: {
      handler() {
        (this.height || this.fixedColumnLeft.length || this.fixedColumnRight.length) && this.resize();
        let e = this.datasBak.length != this.datas.length, t = 0;
        for (; !e && this.datas.length > t; )
          e = this.datas[t] !== this.datasBak[t], t += 1;
        e && (this.labelDatas(this.datas), this.update.datas += 1, this.checks.splice(0, this.checks.length), this.tableDatas = [...this.datas]), this.datasBak = [...this.datas];
      },
      deep: !0
    },
    columns: {
      handler() {
        this.initColumns(), (this.height || this.fixedColumnLeft.length || this.fixedColumnRight.length) && this.resize(), this.update.columns += 1;
      },
      deep: !0
    },
    checks: {
      handler() {
        this.$emit("select", this.checks);
      },
      deep: !0
    },
    checkbox() {
      (this.height || this.fixedColumnLeft.length || this.fixedColumnRight.length) && this.resize();
    },
    radio() {
      (this.height || this.fixedColumnLeft.length || this.fixedColumnRight.length) && this.resize();
    }
  },
  beforeUnmount() {
    window.removeEventListener("resize", this.resize);
  },
  beforeMount() {
    this.labelDatas(this.datas);
  },
  mounted() {
    this.isMounted = !0, this.initColumns(), this.$nextTick(() => {
      let e = this.$el.querySelector(".h-table-body");
      if (e) {
        let i = (s) => {
          e.scrollLeft = e.scrollLeft + s.deltaX, e.scrollTop = e.scrollTop + s.deltaY, this.scrollTop != e.scrollTop && (s.stopPropagation(), s.preventDefault()), this.scrollLeft = e.scrollLeft, this.scrollTop = e.scrollTop;
        };
        e.addEventListener("scroll", () => {
          this.scrollLeft = e.scrollLeft, this.scrollTop = e.scrollTop;
        });
        let l = this.$el.querySelector(".h-table-fixed-right"), n = this.$el.querySelector(".h-table-fixed-left");
        l && l.addEventListener("mousewheel", i), n && n.addEventListener("mousewheel", i);
      }
      (this.fixedColumnLeft.length || this.fixedColumnRight.length) && window.addEventListener("resize", this.resize), this.resize(), setTimeout(() => {
        this.resize();
      }, 100);
      let t = this.$el.querySelectorAll(".h-table-tbody");
      for (let i of t)
        i.addEventListener(
          "mouseover",
          (l) => {
            let n = null, s = l.target;
            for (; s.parentNode != window.document.body; ) {
              if (s.tagName == "TH")
                return;
              if (s.tagName == "TR") {
                n = s;
                break;
              }
              s = s.parentNode;
            }
            if (n) {
              f.addClass(n, "h-table-tr-hovered");
              let r = n.getAttribute("tr-index");
              for (let o of this.$el.querySelectorAll(`.h-table-tbody>tr[tr-index='${r}']`) || [])
                f.addClass(o, "h-table-tr-hovered");
            }
          },
          !1
        ), i.addEventListener(
          "mouseout",
          () => {
            for (let l of this.$el.querySelectorAll(".h-table-tr-hovered") || [])
              f.removeClass(l, "h-table-tr-hovered");
          },
          !1
        );
    });
  },
  methods: {
    labelDatas(e, t = 0) {
      for (let i of e)
        i._heyui_uuid || (i._heyui_uuid = f.uuid(), i._opened = !1, i._expand = i._expand || !1, i._level = t);
    },
    toggleTree(e) {
      e._opened ? this.foldTree(e) : this.expandTree(e);
    },
    foldAll() {
      this.tableDatas.forEach((e) => {
        this.foldTree(e);
      });
    },
    expandAll() {
      this.datas.forEach((e) => {
        this.expandTree(e, { expandAll: !0 });
      });
    },
    expandTree(e, t = {}) {
      if (e._opened)
        return !1;
      if (e.children && e.children.length) {
        this.labelDatas(e.children, (e._level || 0) + 1), e._opened = !0;
        let i = this.tableDatas.indexOf(e);
        this.tableDatas.splice(i + 1, 0, ...e.children), e.children.forEach((l) => {
          l._opened = !1, t.expandAll && this.expandTree(l);
        });
      }
    },
    foldTree(e) {
      if (!e._opened)
        return !1;
      e.children && e.children.length && (e.children.forEach((t) => {
        this.foldTree(t);
        let i = this.tableDatas.indexOf(t), l = this.checks.indexOf(t);
        i > -1 && this.tableDatas.splice(i, 1), l > -1 && this.checks.splice(l, 1);
      }), e._opened = !1);
    },
    getTrCls(e, t) {
      let i = {
        "h-table-tr-selected": this.isChecked(e),
        "h-table-tr-select-disabled": e._disabledSelect
      };
      if (this.getTrClass) {
        let l = this.getTrClass(e, t);
        f.isString(l) ? i[l] = !0 : f.isArray(l) && l.forEach((n) => {
          i[n] = !0;
        });
      }
      return i;
    },
    isChecked(e) {
      return this.checks.indexOf(e) > -1 || this.isSelectRow && e == this.rowSelected;
    },
    setRowSelect(e) {
      this.rowSelected = e;
    },
    clearRowSelect() {
      this.rowSelected = null;
    },
    invereSelection() {
      this.checks = this.tableDatas.filter((e) => this.checks.indexOf(e) == -1);
    },
    clearSelection() {
      this.checks = [];
    },
    clearSort() {
      this.sortStatus.prop = null, this.sortStatus.type = null;
    },
    triggerSort(e, t) {
      this.sortStatus.prop = e.prop, this.sortStatus.type = e.type, t === !0 ? this.$emit("sort", f.copy(e)) : t == "auto" && this.tableDatas.sort((i, l) => {
        let n = i[e.prop], s = l[e.prop], r = n == s ? 0 : n > s ? 1 : -1;
        return e.type == "asc" ? r : -r;
      });
    },
    setSelection(e) {
      f.isArray(e) && (this.checks = [...e]);
    },
    getSelection() {
      return [...this.checks || []];
    },
    checkAll() {
      this.checks.length == this.checkableDatas.length ? this.checks.splice(0, this.checkableDatas.length) : this.checks = f.extend([], this.checkableDatas), this.$emit("selectAll", this.checks);
    },
    getWidth(e) {
      return f.isObject(e) && e.width ? e.width : "";
    },
    resize() {
      this.$nextTick(() => {
        let e = this.$el.querySelector(".h-table-body");
        e && (this.scrollWidth = e.offsetWidth - e.clientWidth, this.scrollHeight = e.offsetHeight - e.clientHeight), this.emptyWidth = this.$el.querySelector(".h-table-header-table").clientWidth, this.tableWidth = this.$el.querySelector(".h-table-container").clientWidth, this.initFixedWidth();
      });
    },
    mouseover(e) {
      this.hoveredTr = e;
    },
    mouseout() {
      this.hoveredTr = null;
    },
    initFixedWidth() {
      let e = this.$el.querySelectorAll(".h-table-header table>tr>th"), t = this.fixedColumnLeft.length + (this.checkbox || this.radio ? 1 : 0), i = 0;
      for (let s = 0; s < t; s++)
        i += e[s].clientWidth || 0;
      this.leftWidth = i;
      let l = this.fixedColumnRight.length, n = 0;
      for (let s = e.length - 1; s > e.length - l - 1; s--)
        n += e[s].clientWidth || 0;
      this.rightWidth = n;
    },
    refresh() {
      this.isMounted && uu(() => {
        this.initColumns(), this.$nextTick(() => {
          this.resize();
        });
      }, 10)();
    },
    initColumns() {
      if (this.columns.length) {
        this.computeColumns = this.columns;
        return;
      }
      let e = [];
      if (this.$slots.default)
        for (let t of this.$slots.default())
          t.type.name === "HTableItem" && e.push(t.props);
      this.computeColumns = e;
    },
    triggerTrClicked(e, t, i) {
      if (!e._disabledSelect) {
        if (this.isSelectRow && (this.rowSelected = e, this.$emit("rowSelect", e)), this.checkbox && this.selectWhenClickTr && !f.hasClass(i.target, "h-checkbox-native")) {
          let l = this.checks;
          l.some((n) => n == e) ? l.splice(l.indexOf(e), 1) : l.push(e);
        }
        this.$emit("trClick", e, i, t);
      }
    },
    triggerTrDblclicked(e, t, i) {
      this.$emit("trDblClick", e, i, t);
    }
  }
}, gu = {
  key: 0,
  width: "60"
}, yu = ["width"], bu = ["rowspan"], vu = ["rowspan"], wu = { key: 1 }, ku = {
  key: 0,
  class: "h-table-th-checkbox"
}, Su = {
  key: 1,
  class: "h-table-th-radio"
}, Cu = { class: "h-table-container" }, xu = { class: "relative" }, _u = { class: "h-table-content-empty" }, Tu = { key: 0 }, Ou = { class: "h-table-body-table" }, Nu = {
  key: 0,
  width: "60"
}, $u = {
  key: 1,
  width: "60"
}, Vu = ["width"], Du = { class: "h-table-tbody" }, Eu = {
  key: 0,
  class: "h-table-td-checkbox"
}, Mu = { class: "h-table-checkbox-wrap" }, ju = {
  key: 1,
  class: "h-table-td-radio"
}, Lu = ["colspan"], Au = {
  key: 0,
  width: "60"
}, Bu = {
  key: 1,
  width: "60"
}, Iu = ["width"], Hu = { class: "h-table-tbody" }, Fu = {
  key: 0,
  class: "h-table-td-checkbox"
}, Pu = { class: "h-table-checkbox-wrap" }, Wu = {
  key: 1,
  class: "h-table-td-radio"
}, Ru = ["width"], Uu = { class: "h-table-tbody" }, zu = {
  key: 0,
  class: "h-table-fixed-header-left"
}, Yu = {
  key: 0,
  width: "60"
}, qu = {
  key: 1,
  width: "60"
}, Ku = ["width"], Xu = {
  key: 0,
  class: "h-table-th-checkbox"
}, Gu = {
  key: 1,
  class: "h-table-th-radio"
}, Ju = ["width"], Qu = { class: "h-table-items" };
function Zu(e, t, i, l, n, s) {
  const r = L("CheckboxAll"), o = L("TableTh"), c = L("Checkbox"), u = L("Radio"), y = L("TableTr"), g = L("Loading");
  return a(), h("div", {
    class: S(s.tableCls)
  }, [
    m("div", {
      class: "h-table-header",
      style: D({ "padding-right": n.scrollWidth + "px" })
    }, [
      m("table", {
        class: "h-table-header-table",
        style: D({ "margin-left": -n.scrollLeft + "px" })
      }, [
        m("colgroup", null, [
          i.checkbox || i.radio ? (a(), h("col", gu)) : k("", !0),
          (a(!0), h(O, null, E(n.computeColumns, (p, w) => (a(), h("col", {
            key: w + n.update.columns,
            width: s.getWidth(p)
          }, null, 8, yu))), 128))
        ]),
        i.ths ? (a(!0), h(O, { key: 0 }, E(i.ths, (p, w) => (a(), h("tr", {
          key: w + n.update.columns
        }, [
          i.checkbox && w == 0 ? (a(), h("th", {
            key: 0,
            class: "h-table-th-checkbox",
            rowspan: i.ths.length
          }, [
            s.fixedColumnLeft.length == 0 ? (a(), A(r, {
              key: 0,
              checks: n.checks,
              "checkable-datas": s.checkableDatas,
              onCheckAll: s.checkAll
            }, null, 8, ["checks", "checkable-datas", "onCheckAll"])) : k("", !0)
          ], 8, bu)) : k("", !0),
          i.radio && w == 0 ? (a(), h("th", {
            key: 1,
            class: "h-table-th-radio",
            rowspan: i.ths.length
          }, null, 8, vu)) : k("", !0),
          (a(!0), h(O, null, E(p, (b, d) => (a(), A(o, Z({
            key: d + n.update.columns
          }, b, { "sort-status": n.sortStatus }), null, 16, ["sort-status"]))), 128))
        ]))), 128)) : (a(), h("tr", wu, [
          i.checkbox ? (a(), h("th", ku, [
            s.fixedColumnLeft.length == 0 ? (a(), A(r, {
              key: 0,
              checks: n.checks,
              "checkable-datas": s.checkableDatas,
              onCheckAll: s.checkAll
            }, null, 8, ["checks", "checkable-datas", "onCheckAll"])) : k("", !0)
          ])) : i.radio ? (a(), h("th", Su)) : k("", !0),
          (a(!0), h(O, null, E(n.computeColumns, (p, w) => (a(), A(o, Z({
            key: w + n.update.columns
          }, p, { "sort-status": n.sortStatus }), null, 16, ["sort-status"]))), 128))
        ]))
      ], 4),
      m("div", {
        class: "h-table-fixed-cover",
        style: D({ width: n.scrollWidth + "px" })
      }, null, 4)
    ], 4),
    m("div", Cu, [
      m("div", xu, [
        m("div", {
          class: "h-table-body",
          style: D(s.bodyStyle)
        }, [
          n.tableDatas.length == 0 ? (a(), h(O, { key: 0 }, [
            m("div", _u, [
              N(e.$slots, "empty"),
              e.$slots.empty ? k("", !0) : (a(), h("div", Tu, _(e.hlang("h.table.empty")), 1))
            ]),
            m("div", {
              class: "h-table-content-empty-width",
              style: D({ width: n.emptyWidth + "px" })
            }, null, 4)
          ], 64)) : k("", !0),
          W(m("table", Ou, [
            m("colgroup", null, [
              i.checkbox ? (a(), h("col", Nu)) : k("", !0),
              i.radio ? (a(), h("col", $u)) : k("", !0),
              (a(!0), h(O, null, E(n.computeColumns, (p, w) => (a(), h("col", {
                key: w + n.update.columns,
                width: s.getWidth(p)
              }, null, 8, Vu))), 128))
            ]),
            m("tbody", Du, [
              (a(!0), h(O, null, E(n.tableDatas, (p, w) => (a(), h(O, {
                key: p._heyui_uuid
              }, [
                I(y, {
                  "compute-columns": n.computeColumns,
                  datas: p,
                  index: w,
                  "tr-index": p._heyui_uuid,
                  class: S(s.getTrCls(p, w)),
                  onTrClick: s.triggerTrClicked,
                  onTrDblclick: s.triggerTrDblclicked,
                  onToggleTree: s.toggleTree
                }, {
                  default: z(() => [
                    i.checkbox ? (a(), h("td", Eu, [
                      m("div", Mu, [
                        s.fixedColumnLeft.length == 0 ? (a(), A(c, {
                          key: p._heyui_uuid,
                          modelValue: n.checks,
                          "onUpdate:modelValue": t[0] || (t[0] = (b) => n.checks = b),
                          disabled: p._disabledSelect,
                          value: p
                        }, null, 8, ["modelValue", "disabled", "value"])) : k("", !0)
                      ])
                    ])) : k("", !0),
                    i.radio ? (a(), h("td", ju, [
                      s.fixedColumnLeft.length == 0 ? (a(), A(u, {
                        key: p._heyui_uuid,
                        modelValue: n.rowSelected,
                        "onUpdate:modelValue": t[1] || (t[1] = (b) => n.rowSelected = b),
                        value: p
                      }, null, 8, ["modelValue", "value"])) : k("", !0)
                    ])) : k("", !0)
                  ]),
                  _: 2
                }, 1032, ["compute-columns", "datas", "index", "tr-index", "class", "onTrClick", "onTrDblclick", "onToggleTree"]),
                e.$slots.expand && p._expand ? (a(), h("tr", {
                  key: p._heyui_uuid + "expand",
                  class: "h-table-expand-tr"
                }, [
                  m("td", {
                    class: "h-table-expand-cell",
                    colspan: s.totalCol
                  }, [
                    N(e.$slots, "expand", {
                      data: p,
                      index: w
                    })
                  ], 8, Lu)
                ])) : k("", !0)
              ], 64))), 128))
            ])
          ], 512), [
            [Q, n.tableDatas.length]
          ])
        ], 4),
        s.fixedColumnLeft.length ? (a(), h("div", {
          key: 0,
          class: "h-table-fixed-left",
          style: D(s.fixedBodyStyle)
        }, [
          m("table", {
            class: "h-table-fixed-left-table",
            style: D({ "margin-top": -n.scrollTop + "px", width: n.tableWidth + "px" })
          }, [
            m("colgroup", null, [
              i.checkbox ? (a(), h("col", Au)) : k("", !0),
              i.radio ? (a(), h("col", Bu)) : k("", !0),
              (a(!0), h(O, null, E(n.computeColumns, (p, w) => (a(), h("col", {
                key: w + n.update.columns,
                width: s.getWidth(p)
              }, null, 8, Iu))), 128))
            ]),
            m("tbody", Hu, [
              (a(!0), h(O, null, E(n.tableDatas, (p, w) => (a(), A(y, {
                key: p._heyui_uuid,
                "compute-columns": n.computeColumns,
                datas: p,
                index: w,
                "tr-index": p._heyui_uuid,
                class: S(s.getTrCls(p, w)),
                onTrClick: s.triggerTrClicked,
                onTrDblclick: s.triggerTrDblclicked,
                onToggleTree: s.toggleTree
              }, {
                default: z(() => [
                  i.checkbox ? (a(), h("td", Fu, [
                    m("div", Pu, [
                      (a(), A(c, {
                        key: p._heyui_uuid,
                        modelValue: n.checks,
                        "onUpdate:modelValue": t[2] || (t[2] = (b) => n.checks = b),
                        disabled: p._disabledSelect,
                        value: p
                      }, null, 8, ["modelValue", "disabled", "value"]))
                    ])
                  ])) : k("", !0),
                  i.radio ? (a(), h("td", Wu, [
                    (a(), A(u, {
                      key: p._heyui_uuid,
                      modelValue: n.rowSelected,
                      "onUpdate:modelValue": t[3] || (t[3] = (b) => n.rowSelected = b),
                      value: p
                    }, null, 8, ["modelValue", "value"]))
                  ])) : k("", !0)
                ]),
                _: 2
              }, 1032, ["compute-columns", "datas", "index", "tr-index", "class", "onTrClick", "onTrDblclick", "onToggleTree"]))), 128))
            ])
          ], 4)
        ], 4)) : k("", !0),
        s.fixedColumnRight.length ? (a(), h("div", {
          key: 1,
          class: "h-table-fixed-right",
          style: D(s.fixedRightBodyStyle)
        }, [
          m("table", {
            class: "h-table-fixed-right-table",
            style: D({ "margin-top": -n.scrollTop + "px", width: n.tableWidth + "px" })
          }, [
            m("colgroup", null, [
              (a(!0), h(O, null, E(n.computeColumns, (p, w) => (a(), h("col", {
                key: w + n.update.columns,
                width: s.getWidth(p)
              }, null, 8, Ru))), 128))
            ]),
            m("tbody", Uu, [
              (a(!0), h(O, null, E(n.tableDatas, (p, w) => (a(), A(y, {
                key: p._heyui_uuid,
                "compute-columns": n.computeColumns,
                datas: p,
                index: w,
                "tr-index": p._heyui_uuid,
                class: S(s.getTrCls(p, w)),
                onTrClick: s.triggerTrClicked,
                onTrDblclick: s.triggerTrDblclicked,
                onToggleTree: s.toggleTree
              }, null, 8, ["compute-columns", "datas", "index", "tr-index", "class", "onTrClick", "onTrDblclick", "onToggleTree"]))), 128))
            ])
          ], 4)
        ], 4)) : k("", !0)
      ]),
      I(g, { loading: i.loading }, null, 8, ["loading"])
    ]),
    s.fixedColumnLeft.length ? (a(), h("div", zu, [
      m("table", {
        style: D({ width: n.leftWidth + "px" })
      }, [
        m("colgroup", null, [
          i.checkbox ? (a(), h("col", Yu)) : k("", !0),
          i.radio ? (a(), h("col", qu)) : k("", !0),
          (a(!0), h(O, null, E(s.fixedColumnLeft, (p, w) => (a(), h("col", {
            key: w + n.update.columns,
            width: s.getWidth(p)
          }, null, 8, Ku))), 128))
        ]),
        m("tr", null, [
          i.checkbox ? (a(), h("th", Xu, [
            I(r, {
              checks: n.checks,
              "checkable-datas": s.checkableDatas,
              onCheckAll: s.checkAll
            }, null, 8, ["checks", "checkable-datas", "onCheckAll"])
          ])) : k("", !0),
          i.radio ? (a(), h("th", Gu)) : k("", !0),
          (a(!0), h(O, null, E(s.fixedColumnLeft, (p, w) => (a(), A(o, Z({
            key: w + n.update.columns
          }, p, { "sort-status": n.sortStatus }), null, 16, ["sort-status"]))), 128))
        ])
      ], 4)
    ])) : k("", !0),
    s.fixedColumnRight.length ? (a(), h("div", {
      key: 1,
      style: D({ "margin-right": n.scrollWidth + "px" }),
      class: "h-table-fixed-header-right"
    }, [
      m("table", {
        style: D({ width: n.rightWidth + "px" })
      }, [
        m("colgroup", null, [
          (a(!0), h(O, null, E(s.fixedColumnRight, (p, w) => (a(), h("col", {
            key: w + n.update.columns,
            width: s.getWidth(p)
          }, null, 8, Ju))), 128))
        ]),
        m("tr", null, [
          (a(!0), h(O, null, E(s.fixedColumnRight, (p, w) => (a(), A(o, Z({
            key: w + n.update.columns
          }, p, { "sort-status": n.sortStatus }), null, 16, ["sort-status"]))), 128))
        ])
      ], 4)
    ], 4)) : k("", !0),
    m("div", Qu, [
      N(e.$slots, "default")
    ])
  ], 2);
}
const ed = /* @__PURE__ */ V(pu, [["render", Zu]]), td = {
  name: "HTableItem",
  props: {
    rowspan: Number,
    colspan: Number,
    title: String,
    width: Number,
    fixed: String,
    label: String,
    prop: String,
    attrs: Function,
    dict: String,
    align: String,
    className: String,
    isTreeOpener: Boolean,
    unit: String,
    format: Function,
    render: Function,
    sortProp: String,
    tooltip: {
      type: [Boolean, Object],
      default: !1
    },
    sort: {
      type: [Boolean, String],
      default: !1
    },
    placement: String,
    content: String
  },
  data() {
    return {};
  },
  watch: {
    title() {
      this.init();
    },
    width() {
      this.init();
    },
    fixed() {
      this.init();
    },
    label() {
      this.init();
    },
    prop() {
      this.init();
    },
    align() {
      this.init();
    }
  },
  beforeMount() {
    this.init();
  },
  beforeUnmount() {
    this.init();
  },
  methods: {
    init() {
      let e = this.$parent;
      e.$options.name == "HTable" && e.refresh();
    }
  }
};
function id(e, t, i, l, n, s) {
  return a(), h("div");
}
const sd = /* @__PURE__ */ V(td, [["render", id]]), ld = "h-tabs", nd = {
  name: "HTabs",
  emits: ["update:modelValue", "input", "change", "clickItem"],
  props: {
    dict: String,
    datas: [Object, Array],
    modelValue: [String, Number],
    className: {
      type: String,
      default: "h-tabs-default"
    },
    keyName: {
      type: String,
      default: () => $.getOption("dict", "keyName")
    },
    titleName: {
      type: String,
      default: () => $.getOption("dict", "titleName")
    }
  },
  data() {
    return {
      key: this.keyName,
      title: this.titleName
    };
  },
  computed: {
    tabsCls() {
      return {
        [`${ld}`]: !0,
        [this.className]: !!this.className
      };
    },
    arr() {
      if (!this.datas && !this.dict)
        return console.error("[HeyUI Error] Tabs Component: Datas or dict parameters need to be defined at least."), [];
      let e = this.datas;
      return this.dict && (e = $.getDict(this.dict)), $.initOptions(e, this);
    }
  },
  methods: {
    trigger(e, t) {
      this.modelValue != e[this.key] && (this.$emit("input", e[this.key]), this.$emit("update:modelValue", e[this.key]), this.$emit("change", e, t)), this.$emit("clickItem", e, t);
    }
  }
}, rd = ["onClick"], od = { key: 0 };
function ad(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.tabsCls)
  }, [
    (a(!0), h(O, null, E(s.arr, (r, o) => (a(), h("div", {
      key: r[n.key],
      class: S([{ "h-tabs-selected": r[n.key] == i.modelValue, "h-tabs-item-selected": r[n.key] == i.modelValue }, "h-tabs-item"]),
      onClick: (c) => s.trigger(r, o)
    }, [
      e.$slots.item ? N(e.$slots, "item", {
        key: 1,
        tab: r
      }) : (a(), h("span", od, _(r[n.title]), 1))
    ], 10, rd))), 128))
  ], 2);
}
const hd = /* @__PURE__ */ V(nd, [["render", ad]]), it = "h-tag", ud = {
  name: "HTag",
  props: {
    type: String,
    color: String
  },
  data() {
    return {};
  },
  computed: {
    cls() {
      const e = !!this.color, t = e && this.color.indexOf("#") > -1;
      return {
        [`${it}`]: !0,
        [`${it}-${this.type}`]: !!this.type,
        [`${it}-${this.color}`]: e && !t,
        [`${it}-self-define-color`]: e && t
      };
    },
    style() {
      return !!this.color && this.color.indexOf("#") > -1 ? {
        "background-color": this.color,
        "border-color": this.color
      } : {};
    }
  },
  methods: {}
};
function dd(e, t, i, l, n, s) {
  return a(), h("span", {
    class: S(s.cls),
    style: D(s.style)
  }, [
    N(e.$slots, "default")
  ], 6);
}
const cd = /* @__PURE__ */ V(ud, [["render", dd]]), Ot = "h-taginput", fd = {
  name: "HTagInput",
  mixins: [Y],
  emits: ["input", "change", "update:modelValue"],
  props: {
    readonly: {
      type: Boolean,
      default: !1
    },
    noBorder: {
      type: Boolean,
      default: !1
    },
    placeholder: {
      type: String
    },
    type: {
      type: String,
      default: "Array"
    },
    split: {
      type: String,
      default: ","
    },
    wordlimit: {
      type: Number,
      default: 50
    },
    limit: {
      type: Number,
      default: 1e4
    },
    modelValue: [Array, String, Number]
  },
  data() {
    return {
      focusing: !1,
      tagvalue: ""
    };
  },
  computed: {
    taginputCls() {
      return {
        [`${Ot}`]: !0,
        [`${Ot}-input-border`]: !this.noBorder && !this.readonly,
        [`${Ot}-readonly`]: this.readonly,
        focusing: this.focusing
      };
    },
    values() {
      return this.type == "Array" ? this.modelValue || [] : f.isNull(this.modelValue) || this.modelValue === "" ? [] : String(this.modelValue).split(this.split);
    }
  },
  methods: {
    removeLast(e) {
      e.target.value === "" && this.values.length && this.remove(this.values.length - 1);
    },
    remove(e) {
      if (this.readonly)
        return;
      let t = f.copy(this.values);
      t.splice(e, 1), this.setvalue(t);
    },
    add() {
      if (this.wordlimit < this.tagvalue.length)
        return R.error(this.hlang("h.wordlimit.warn", [this.wordlimit])), !1;
      if (this.limit <= this.values.length)
        return R.error(this.hlang("h.taginput.limitWords")), !1;
      if (this.readonly || this.tagvalue === "")
        return !1;
      let e = f.copy(this.values);
      e.push(this.tagvalue), this.setvalue(e);
    },
    setvalue(e) {
      this.type == "string" && (e.length == 0 ? e = null : e = e.join(this.split)), this.$emit("input", e), this.$emit("update:modelValue", e), this.$emit("change", e);
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, e), this.$el.dispatchEvent(t), this.tagvalue = "";
    },
    blur() {
      this.add(), this.focusing = !1;
    }
  }
}, md = ["onClick"], pd = ["placeholder"];
function gd(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.taginputCls)
  }, [
    (a(!0), h(O, null, E(s.values, (r, o) => (a(), h("span", {
      key: r + o
    }, [
      m("span", null, _(r), 1),
      i.readonly ? k("", !0) : (a(), h("i", {
        key: 0,
        class: "h-icon-close-min",
        onClick: B((c) => s.remove(o), ["stop"])
      }, null, 8, md))
    ]))), 128)),
    i.readonly ? k("", !0) : W((a(), h("input", {
      key: 0,
      "onUpdate:modelValue": t[0] || (t[0] = (r) => n.tagvalue = r),
      type: "text",
      class: "h-taginput-input h-input",
      placeholder: i.placeholder,
      onFocus: t[1] || (t[1] = (r) => n.focusing = !0),
      onBlur: t[2] || (t[2] = (...r) => s.blur && s.blur(...r)),
      onKeyup: t[3] || (t[3] = re((...r) => s.add && s.add(...r), ["enter"])),
      onKeydown: t[4] || (t[4] = re((...r) => s.removeLast && s.removeLast(...r), ["delete"]))
    }, null, 40, pd)), [
      [oe, n.tagvalue]
    ])
  ], 2);
}
const yd = /* @__PURE__ */ V(fd, [["render", gd]]), bd = function(e) {
  let t = e.$parent;
  for (; t && t.$parent && t.$.type.name !== "HTree"; )
    t = t.$parent;
  return t || console.error("[HeyUI Error] Tree Component: Please put TreeItem component in the Tree Component"), t;
}, vd = {
  name: "hTreeSlot",
  props: {
    data: Object
  },
  render() {
    let e = bd(this);
    return e && e.$slots && e.$slots.item ? Ke(
      "div",
      {
        class: "h-tree-item-slot"
      },
      [
        e.$slots.item({
          item: this.data
        })
      ]
    ) : Ke("span");
  }
}, wd = {
  name: "HTreeItem",
  components: { TreeSlot: vd, Checkbox: je },
  emits: ["trigger"],
  mixins: [Y],
  props: {
    data: Object,
    param: Object,
    multiple: Boolean,
    status: Object,
    chooseMode: String,
    toggleOnSelect: Boolean,
    selectOnClick: Boolean,
    level: Number
  },
  data() {
    return {};
  },
  methods: {
    clickShow() {
      this.selectOnClick && this.select();
    },
    select() {
      (this.toggleOnSelect || this.multiple) && this.toggleTree(), !this.data.status.disabled && (this.$emit("trigger", { type: "selectEvent", data: this.data }), this.multiple && this.data.children.length == 0 && this.choose());
    },
    choose() {
      Object.assign(this.data.status, { choose: !this.data.status.choose, indeterminate: !1 }), this.$emit("trigger", { type: "chooseEvent", data: this.data });
    },
    trigger({ type: e, data: t }) {
      if (e == "chooseEvent" && this.chooseMode != "independent" && this.data.children) {
        let i = !0, l = !1;
        for (let n of this.data.children)
          !n.status.choose && i && (i = !1), (n.status.choose || n.status.indeterminate) && (l = !0);
        this.chooseMode == "all" ? Object.assign(this.data.status, { choose: i, indeterminate: l && !i }) : this.chooseMode == "some" && Object.assign(this.data.status, { choose: l, indeterminate: !1 });
      }
      this.$emit("trigger", { type: e, data: t });
    },
    toggleTree() {
      this.data.status.isWait ? this.loadData() : this.$emit("trigger", { type: "toggleTreeEvent", data: this.data });
    },
    loadData() {
      this.$emit("trigger", { type: "loadDataEvent", data: this.data });
    }
  }
}, kd = { class: "h-tree-show-expand" }, Sd = {
  key: 0,
  class: "h-icon-angle-right"
}, Cd = {
  key: 1,
  class: "h-icon-loading"
}, xd = /* @__PURE__ */ m("i", { class: "h-icon-angle-right" }, null, -1), _d = [
  xd
], Td = { key: 1 }, Od = { key: 2 }, Nd = {
  key: 0,
  class: "h-tree-ul"
};
function $d(e, t, i, l, n, s) {
  const r = L("Checkbox"), o = L("TreeSlot"), c = L("hTreeItem");
  return a(), h("li", {
    class: S(["h-tree-li", { "h-tree-li-opened": i.data.status.opened }])
  }, [
    W(m("div", {
      class: S(["h-tree-show", {
        "h-tree-show-disabled": i.data.status.disabled,
        "h-tree-show-choose": i.data.status.choose,
        "h-tree-show-indeterminate": i.data.status.indeterminate,
        "h-tree-show-selected": i.status.selected == i.data.key
      }]),
      onClick: t[3] || (t[3] = (...u) => s.clickShow && s.clickShow(...u))
    }, [
      (a(!0), h(O, null, E(i.level, (u) => (a(), h("span", {
        key: u,
        class: "h-tree-show-space"
      }))), 128)),
      m("span", kd, [
        i.data.status.isWait ? (a(), h("span", {
          key: 0,
          onClick: t[0] || (t[0] = B((u) => s.toggleTree(), ["stop"]))
        }, [
          i.data.status.loading ? (a(), h("i", Cd)) : (a(), h("i", Sd))
        ])) : i.data.children && i.data.children.length > 0 ? (a(), h("span", {
          key: 1,
          onClick: t[1] || (t[1] = B((u) => s.toggleTree(), ["stop"]))
        }, _d)) : k("", !0)
      ]),
      i.multiple && i.data.status.checkable ? (a(), A(r, {
        key: 0,
        modelValue: i.data.status.choose,
        disabled: i.data.status.disabled,
        indeterminate: i.data.status.indeterminate,
        onChange: s.choose
      }, null, 8, ["modelValue", "disabled", "indeterminate", "onChange"])) : k("", !0),
      m("div", {
        class: S(["h-tree-show-desc", { selected: i.status.selected == i.data.key }]),
        onClick: t[2] || (t[2] = (...u) => s.select && s.select(...u))
      }, [
        i.data.icon ? (a(), h("span", {
          key: 0,
          class: S(["h-tree-show-icon", i.data.icon])
        }, null, 2)) : k("", !0),
        i.data.title != null ? (a(), h("span", Td, _(i.data.title), 1)) : (a(), h("span", Od, _(e.hlang("h.common.empty")), 1))
      ], 2),
      I(o, {
        data: i.data.value
      }, null, 8, ["data"])
    ], 2), [
      [Q, !i.data.status.hide]
    ]),
    i.data.children && i.data.children.length > 0 ? (a(), h("ul", Nd, [
      (a(!0), h(O, null, E(i.data.children, (u) => (a(), A(c, {
        key: u.key,
        data: u,
        param: i.param,
        status: i.status,
        multiple: i.multiple,
        "choose-mode": i.chooseMode,
        "toggle-on-select": i.toggleOnSelect,
        "select-on-click": i.selectOnClick,
        level: i.level + 1,
        onTrigger: s.trigger
      }, null, 8, ["data", "param", "status", "multiple", "choose-mode", "toggle-on-select", "select-on-click", "level", "onTrigger"]))), 128))
    ])) : k("", !0)
  ], 2);
}
const Vd = /* @__PURE__ */ V(wd, [["render", $d]]), Nt = "h-tree", Bt = (e, t, i) => {
  if (e.children)
    for (let l of e.children)
      l.status[t] = i, Bt(l, t, i);
}, It = (e, t, i, l) => {
  let n = e[t.parentKey];
  !f.isNull(t.parentKey) && n && (n.status[i] = l, It(e, n, i, l));
}, ks = (e) => {
  if (e.children) {
    let t = !1, i = !!e.children.length;
    for (let l of e.children)
      ks(l), (l.status.choose || l.status.indeterminate) && (t = !0), l.status.choose || (i = !1);
    e.status.choose || (i ? e.status.choose = !0 : t && (e.status.indeterminate = !0));
  }
}, Ss = (e, t) => {
  if (e.status.choose)
    t.push(e.value);
  else
    for (let i of e.children)
      Ss(i, t);
  return t;
}, Dd = {
  name: "HTree",
  components: {
    treeItem: Vd,
    Search: Kt
  },
  props: {
    option: Object,
    multiple: {
      type: Boolean,
      default: !1
    },
    filterable: {
      type: Boolean,
      default: !1
    },
    chooseMode: {
      type: String,
      default: "all"
    },
    modelValue: [Number, String, Array, Object],
    config: String,
    toggleOnSelect: {
      type: Boolean,
      default: !0
    },
    selectOnClick: {
      type: Boolean,
      default: !1
    },
    className: {
      type: String,
      default: "h-tree-theme-item-selected"
    }
  },
  emits: ["open", "select", "choose", "update:modelValue", "change", "loadDataSuccess"],
  data() {
    return {
      updateFromInput: !1,
      globalloading: !1,
      loading: !0,
      status: {
        selected: null
      },
      treeDatas: [],
      treeObj: {},
      searchValue: null
    };
  },
  computed: {
    param() {
      return this.config ? f.extend({}, $.getOption("tree.default"), $.getOption(`tree.configs.${this.config}`), this.option) : f.extend({}, $.getOption("tree.default"), this.option);
    },
    treeCls() {
      return {
        [Nt]: !0,
        [`${Nt}-multiple`]: this.multiple,
        [`${Nt}-single`]: !this.multiple,
        [this.className]: !!this.className
      };
    }
  },
  watch: {
    modelValue() {
      if (this.updateFromInput) {
        this.updateFromInput = !1;
        return;
      }
      this.parse();
    },
    "option.datas": function() {
      this.initTreeDatas();
    }
  },
  mounted() {
    this.initTreeDatas(), this.parse();
  },
  methods: {
    parse() {
      this.multiple ? this.updateChoose(this.modelValue, !1) : this.updateSelect(this.modelValue, !1);
    },
    updateTreeItem(e, t) {
      let i = this.treeObj[e];
      if (i)
        for (let l of Object.keys(t))
          i.value[l] = t[l], l == this.param.titleName && (i.title = t[l]);
      this.$forceUpdate();
    },
    appendTreeItem(e, t) {
      let i = this.treeObj[e], l = this.initTreeNode(t, e);
      i ? i.children.push(l) : this.treeDatas.push(l), this.treeObj[l.key] = l;
    },
    removeTreeItem(e) {
      let t = this.treeObj[e];
      if (t) {
        let i = this.treeDatas.indexOf(t);
        if (i > -1)
          this.treeDatas.splice(i, 1);
        else if (t.parentKey && this.treeObj[t.parentKey]) {
          let l = this.treeObj[t.parentKey];
          l.children.indexOf(t) > -1 && l.children.splice(l.children.indexOf(t), 1);
        }
        delete this.treeObj[e];
      }
    },
    searchTree(e) {
      if (this.searchValue = e, !f.isNull(this.searchValue) && this.searchValue !== "") {
        let t = this.searchValue.toLowerCase();
        for (let i of Object.keys(this.treeObj)) {
          let l = this.treeObj[i];
          l.status.hide = (l.html || l.title || "").toLowerCase().indexOf(t) == -1;
        }
        this.expandAll();
      } else
        for (let t of Object.keys(this.treeObj)) {
          let i = this.treeObj[t];
          i.status.hide = !1;
        }
    },
    trigger({ type: e, data: t, update: i }) {
      if (i && Object.assign(t.status, i), e == "toggleTreeEvent")
        t.status.opened = !t.status.opened, this.$emit("open", t.value);
      else if (e == "loadDataEvent")
        f.isFunction(this.param.getDatas) && (t.status.loading = !0, this.param.getDatas.call(
          this.param,
          t.value,
          (l) => {
            t.children = this.initTreeModeData(l, !0), t.status.isWait = !1, t.status.loading = !1, t.status.opened = !0;
          },
          () => {
            t.status.loading = !1;
          }
        ));
      else if (e == "selectEvent")
        this.multiple || (this.status.selected = t.key, this.$emit("select", t.value), this.setvalue());
      else if (e == "chooseEvent") {
        let l = t.status.choose;
        this.chooseMode != "independent" && Bt(t, "choose", l), this.$emit("choose", this.getChoose()), this.multiple && this.setvalue();
      }
    },
    initTreeDatas() {
      let e = [];
      if (f.isArray(this.param.datas) ? e = this.param.datas : f.isFunction(this.param.datas) && (e = this.param.datas.apply(this.param)), f.isFunction(this.param.getTotalDatas) || f.isFunction(this.param.getDatas)) {
        e = [], this.globalloading = !0;
        let t = this.param.getTotalDatas || this.param.getDatas, i = [
          (l) => {
            this.treeDatas = this.initDatas(f.copy(l)), this.parse(), this.globalloading = !1, this.$emit("loadDataSuccess");
          },
          () => {
            this.globalloading = !1;
          }
        ];
        this.param.getDatas && i.unshift(null), t.apply(this.param, i);
      }
      this.treeDatas = this.initDatas(e), this.parse();
    },
    initDatas(e) {
      let t = e = f.copy(e);
      this.param.dataMode == "list" && e.length > 0 && (t = f.generateTree(e, this.param));
      let i = f.isFunction(this.param.getDatas);
      return this.initTreeModeData(t, i);
    },
    initTreeModeData(e, t, i) {
      let l = [];
      for (let n of e) {
        let s = this.initTreeNode(n, i, t), r = n[this.param.childrenName] || [];
        s.children = this.initTreeModeData(r, t, s.key), this.treeObj[s.key] = s, l.push(s);
      }
      return l;
    },
    initTreeNode(e, t, i = !1) {
      return {
        key: e[this.param.keyName],
        title: e[this.param.titleName],
        value: e,
        parentKey: t,
        icon: e.treeIcon,
        status: {
          hide: !1,
          opened: !1,
          loading: !1,
          checkable: e.checkable !== !1,
          isWait: i,
          selected: !1,
          indeterminate: !1,
          choose: !1,
          disabled: !!e.disabled
        },
        children: []
      };
    },
    refresh() {
      this.initTreeDatas();
    },
    expandAll() {
      for (let e of Object.keys(this.treeObj))
        this.treeObj[e].status.opened = !0;
    },
    foldAll() {
      for (let e of Object.keys(this.treeObj))
        this.treeObj[e].status.opened = !1;
    },
    expand(e) {
      for (let t of Object.keys(this.treeObj)) {
        let i = this.treeObj[t];
        i.status.opened = e.indexOf(i.key) > -1;
      }
    },
    chooseAll() {
      for (let e in this.treeObj)
        this.treeObj[e].status.choose = !0;
      this.setvalue();
    },
    updateSelect(e, t = !0) {
      if (e === null)
        this.status.selected = null;
      else {
        let i = this.treeObj[e];
        i && (this.status.selected = e, It(this.treeObj, i, "opened", !0));
      }
      t && this.setvalue();
    },
    getSelect() {
      return f.isNull(this.status.selected) ? null : this.treeObj[this.status.selected].value;
    },
    updateChoose(e, t = !0) {
      if (!!this.multiple) {
        e = e || [];
        for (let i of Object.keys(this.treeObj)) {
          let l = this.treeObj[i];
          l.status.choose = !1, l.status.indeterminate = !1, l.status.opened = !1;
        }
        for (let i of e) {
          let l = this.treeObj[i];
          l && (l.status.choose = e.indexOf(l.key) != -1, l.status.choose && (l.status.opened = !0, It(this.treeObj, l, "opened", !0), this.chooseMode == "all" && Bt(l, "choose", !0)));
        }
        if (this.chooseMode == "all")
          for (let i of this.treeDatas)
            ks(i);
        t && this.setvalue();
      }
    },
    setvalue() {
      let e = null;
      if (this.multiple)
        e = this.getChoose().map((n) => n[this.param.keyName]);
      else {
        let i = this.getSelect();
        e = i ? i[this.param.keyName] : null;
      }
      this.updateFromInput = !0, this.$emit("update:modelValue", e), this.$emit("change", e);
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, e), this.$el.dispatchEvent(t);
    },
    getFullChoose() {
      let e = [];
      for (let t of Object.keys(this.treeObj)) {
        let i = this.treeObj[t];
        i.status.choose && e.push(i.value);
      }
      return e;
    },
    getChoose() {
      if (this.chooseMode == "some")
        return this.getFullChoose();
      if (this.chooseMode == "independent")
        return this.getFullChoose();
      {
        let e = [];
        for (let t of this.treeDatas)
          e = Ss(t, e);
        return e;
      }
    }
  }
}, Ed = { class: "h-tree-body" };
function Md(e, t, i, l, n, s) {
  const r = L("Search"), o = L("treeItem"), c = L("Loading");
  return a(), h("div", {
    class: S(s.treeCls)
  }, [
    i.filterable ? (a(), A(r, {
      key: 0,
      modelValue: n.searchValue,
      "onUpdate:modelValue": t[0] || (t[0] = (u) => n.searchValue = u),
      block: "",
      onSearch: s.searchTree
    }, null, 8, ["modelValue", "onSearch"])) : k("", !0),
    m("ul", Ed, [
      (a(!0), h(O, null, E(n.treeDatas, (u) => (a(), A(o, {
        key: u.key,
        data: u,
        param: s.param,
        multiple: i.multiple,
        status: n.status,
        "choose-mode": i.chooseMode,
        "toggle-on-select": i.toggleOnSelect,
        "select-on-click": i.selectOnClick,
        level: 0,
        onTrigger: s.trigger
      }, null, 8, ["data", "param", "multiple", "status", "choose-mode", "toggle-on-select", "select-on-click", "onTrigger"]))), 128))
    ]),
    I(c, { loading: n.globalloading }, null, 8, ["loading"])
  ], 2);
}
const Cs = /* @__PURE__ */ V(Dd, [["render", Md]]), Te = "h-treepicker", jd = {
  name: "HTreePicker",
  component: {
    Tree: Cs
  },
  emits: ["select", "choose", "update:modelValue", "change", "input", "loadDataSuccess"],
  props: {
    option: Object,
    multiple: {
      type: Boolean,
      default: !1
    },
    type: {
      type: [String],
      default: "key"
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    limit: Number,
    placeholder: {
      type: String
    },
    filterable: {
      type: Boolean,
      default: !1
    },
    chooseMode: {
      type: String,
      default: "all"
    },
    showCount: {
      type: Boolean,
      default: !1
    },
    toggleOnSelect: {
      type: Boolean,
      default: !0
    },
    modelValue: [Number, String, Array, Object],
    config: String,
    className: String,
    useConfirm: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      objects: [],
      object: null,
      dropdown: null,
      valuebak: null,
      stashObject: null
    };
  },
  computed: {
    param() {
      return this.config ? f.extend({}, $.getOption("tree.default"), $.getOption(`tree.configs.${this.config}`), this.option) : f.extend({}, $.getOption("tree.default"), this.option);
    },
    showCls() {
      return {
        [`${this.className}-show`]: !!this.className
      };
    },
    groupCls() {
      return {
        [`${this.className}-dropdown`]: !!this.className
      };
    },
    treepickerCls() {
      return {
        [`${Te}`]: !0,
        [`${Te}-input-border`]: !0,
        [`${Te}-no-autosize`]: !0,
        [`${Te}-multiple`]: this.multiple,
        [`${Te}-disabled`]: this.disabled
      };
    }
  },
  watch: {
    modelValue() {
      this.parse();
    },
    disabled() {
      if (!this.dropdown)
        return !1;
      this.disabled ? this.dropdown.disabled() : this.dropdown.enabled();
    }
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  mounted() {
    this.parse(), this.$nextTick(() => {
      if (this.inline)
        return;
      let e = this.el = this.$el.querySelector(`.${Te}>.h-treepicker-show`), t = this.$el.querySelector(".h-treepicker-group");
      this.dropdown = new he(e, {
        trigger: "click",
        content: t,
        disabled: this.disabled
      }), this.disabled && this.dropdown.disabled();
    });
  },
  methods: {
    refresh() {
      if (this.$refs.tree)
        return this.$refs.tree.refresh();
    },
    loadDataSuccess() {
      this.parse(), this.$emit("loadDataSuccess");
    },
    getChoose() {
      return this.$refs.tree ? this.$refs.tree.getChoose() : [];
    },
    getFullChoose() {
      return this.$refs.tree ? this.$refs.tree.getFullChoose() : [];
    },
    select(e) {
      this.stashObject = e, !this.multiple && !this.useConfirm && this.confirm(e);
    },
    choose(e) {
      this.objects = e, this.$emit("choose", e), this.multiple && this.setvalue();
    },
    chooseAll() {
      this.$refs.tree && this.$refs.tree.chooseAll();
    },
    remove(e) {
      let t = this.objects.indexOf(e);
      this.objects.splice(t, 1), this.valuebak.splice(t, 1), this.setvalue(), this.triggerChange();
    },
    updateShow(e) {
      f.isObject(e) && !this.multiple && (this.object = e), f.isArray(e) && this.multiple && (this.objects = e), this.setvalue();
    },
    parse() {
      this.type == "key" ? (this.valuebak = f.copy(this.modelValue), this.$nextTick(() => {
        this.multiple ? this.objects = this.$refs.tree.getChoose() : this.object = this.$refs.tree.getSelect();
      })) : this.multiple ? (this.valuebak = (this.modelValue || []).map((e) => e[this.param.keyName]), this.objects = f.copy(this.modelValue)) : (this.valuebak = this.modelValue ? this.modelValue[this.param.keyName] : null, this.object = f.copy(this.modelValue));
    },
    dispose() {
      return this.multiple ? this.objects.map((e) => this.type == "key" ? e[this.param.keyName] : e).filter((e) => e !== void 0) : this.object ? this.type == "key" ? this.object[this.param.keyName] : this.object : null;
    },
    clear() {
      this.stashObject = null, this.objects = [], this.$refs.tree.searchTree(null), this.confirm();
    },
    confirm() {
      this.multiple || (this.object = this.stashObject, this.$emit("select", this.object)), this.setvalue(), this.triggerChange(), this.dropdown.hide();
    },
    setvalue() {
      let e = this.dispose();
      this.$emit("input", e), this.$emit("update:modelValue", e), this.stashObject = this.object;
      let t = document.createEvent("CustomEvent");
      t.initCustomEvent("setvalue", !0, !0, e), this.$el.dispatchEvent(t), this.$nextTick(() => {
        this.dropdown && this.dropdown.update();
      });
    },
    triggerChange() {
      this.$nextTick(() => {
        this.$emit("change", f.copy(this.multiple ? this.objects : this.object));
      });
    },
    expandAll() {
      if (this.$refs.tree)
        return this.$refs.tree.expandAll();
    },
    expand(e) {
      if (this.$refs.tree)
        return this.$refs.tree.expand(e);
    },
    foldAll() {
      if (this.$refs.tree)
        return this.$refs.tree.foldAll();
    }
  }
}, Ld = ["disabled"], Ad = {
  key: 0,
  class: "h-treepicker-value-single"
}, Bd = {
  key: 1,
  class: "h-treepicker-multiple-tags"
}, Id = ["onClick"], Hd = {
  key: 1,
  class: "h-treepicker-value-single"
}, Fd = {
  key: 2,
  class: "h-treepicker-placeholder"
}, Pd = /* @__PURE__ */ m("i", { class: "h-icon-down" }, null, -1), Wd = { class: "h-treepicker-body" }, Rd = {
  key: 0,
  class: "h-treepicker-footer"
};
function Ud(e, t, i, l, n, s) {
  const r = L("Tree");
  return a(), h("div", {
    class: S(s.treepickerCls),
    disabled: i.disabled
  }, [
    m("div", {
      class: S(["h-treepicker-show", s.showCls])
    }, [
      i.multiple && n.objects.length ? (a(), h(O, { key: 0 }, [
        i.showCount ? (a(), h("div", Ad, _(e.hlang("h.treepicker.selectDesc", [n.valuebak.length])), 1)) : (a(), h("div", Bd, [
          (a(!0), h(O, null, E(n.objects, (o) => (a(), h("span", {
            key: o[s.param.keyName]
          }, [
            m("span", null, _(o[s.param.titleName]), 1),
            i.disabled ? k("", !0) : (a(), h("i", {
              key: 0,
              class: "h-icon-close-min",
              onClick: B((c) => s.remove(o), ["stop"])
            }, null, 8, Id))
          ]))), 128))
        ]))
      ], 64)) : !i.multiple && n.object ? (a(), h("div", Hd, _(n.object[s.param.titleName]), 1)) : (a(), h("div", Fd, _(i.placeholder), 1)),
      Pd
    ], 2),
    m("div", {
      class: S(["h-treepicker-group", s.groupCls])
    }, [
      m("div", Wd, [
        I(r, {
          ref: "tree",
          modelValue: n.valuebak,
          "onUpdate:modelValue": t[0] || (t[0] = (o) => n.valuebak = o),
          "toggle-on-select": i.toggleOnSelect,
          option: i.option,
          multiple: i.multiple,
          "choose-mode": i.chooseMode,
          filterable: i.filterable,
          config: i.config,
          onLoadDataSuccess: s.loadDataSuccess,
          onSelect: s.select,
          onChoose: s.choose
        }, null, 8, ["modelValue", "toggle-on-select", "option", "multiple", "choose-mode", "filterable", "config", "onLoadDataSuccess", "onSelect", "onChoose"])
      ]),
      i.multiple || i.useConfirm ? (a(), h("div", Rd, [
        m("button", {
          type: "button",
          class: "h-btn h-btn-text h-btn-s",
          onClick: t[1] || (t[1] = (...o) => s.clear && s.clear(...o))
        }, _(e.hlang("h.common.clear")), 1),
        m("button", {
          type: "button",
          class: "h-btn h-btn-primary h-btn-s",
          onClick: t[2] || (t[2] = (...o) => s.confirm && s.confirm(...o))
        }, _(e.hlang("h.common.confirm")), 1)
      ])) : k("", !0)
    ], 2)
  ], 10, Ld);
}
const zd = /* @__PURE__ */ V(jd, [["render", Ud]]), Ni = "h-numberinput", Yd = {
  name: "HNumberInput",
  emits: ["input", "change", "update:modelValue"],
  props: {
    modelValue: [Number, String],
    min: Number,
    max: Number,
    disabled: {
      type: Boolean,
      default: !1
    },
    step: {
      type: Number,
      default: 1
    },
    placeholder: {
      type: String
    },
    useInt: {
      type: Boolean,
      default: !1
    },
    useOperate: {
      type: Boolean,
      default: !1
    },
    precision: {
      type: Number
    }
  },
  data() {
    return {
      focusing: !1,
      editValue: this.modelValue,
      valueBak: this.modelValue
    };
  },
  computed: {
    numberinputCls() {
      return {
        [Ni]: !0,
        [`${Ni}-disabled`]: !!this.disabled
      };
    }
  },
  watch: {
    modelValue() {
      this.valueBak != this.modelValue && (this.editValue = this.modelValue, this.valueBak = this.modelValue);
    }
  },
  mounted() {
  },
  methods: {
    plus() {
      if (this.disabled)
        return !1;
      let e = this.getValue(this.modelValue);
      this.setvalue(f.add(e || 0, this.step), "handler");
    },
    minus() {
      if (this.disabled)
        return !1;
      let e = this.getValue(this.modelValue);
      this.setvalue(f.add(e || 0, -this.step), "handler");
    },
    input(e) {
      if (isNaN(Number(e.target.value)))
        return !1;
      let t = this.getValue(e.target.value);
      f.isNumber(this.modelValue) && Math.abs(t - this.modelValue) <= 1 && this.precision || this.setvalue(t, "input");
    },
    blur(e) {
      this.focusing = !1;
      let t = this.getValue(e.target.value);
      this.setvalue(t, "blur");
    },
    getValue(e) {
      if (e === "")
        return null;
      if (this.useInt) {
        let t = parseInt(e);
        return isNaN(t) ? null : t;
      } else {
        let t = parseFloat(e);
        return isNaN(t) ? null : t;
      }
    },
    setvalue(e, t) {
      if (this.disabled)
        return !1;
      this.max !== void 0 && e !== null && (e = Math.min(this.max, e)), this.min !== void 0 && e !== null && (e = Math.max(this.min, e)), this.precision && f.isNumber(e) && (e = Math.floor(f.mul(e || 0, Math.pow(10, this.precision))) / Math.pow(10, this.precision), e = e.toFixed(this.precision)), this.valueBak = e, this.$emit("input", e), this.$emit("update:modelValue", e), t != "input" && (this.editValue = e), t != "input" && this.$emit("change", e);
      let i = document.createEvent("CustomEvent");
      i.initCustomEvent("setvalue", !0, !0, e), this.$el.dispatchEvent(i);
    }
  }
}, qd = ["placeholder", "disabled"], Kd = {
  key: 0,
  class: "h-numberinput-operate"
}, Xd = /* @__PURE__ */ m("i", { class: "h-icon-minus" }, null, -1), Gd = [
  Xd
], Jd = /* @__PURE__ */ m("i", { class: "h-icon-plus" }, null, -1), Qd = [
  Jd
];
function Zd(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.numberinputCls)
  }, [
    m("div", {
      class: S(["h-numberinput-show", { focusing: n.focusing }])
    }, [
      W(m("input", {
        "onUpdate:modelValue": t[0] || (t[0] = (r) => n.editValue = r),
        type: "text",
        placeholder: i.placeholder,
        disabled: i.disabled === !1 ? null : !0,
        class: "h-numberinput-input h-input",
        onInput: t[1] || (t[1] = (...r) => s.input && s.input(...r)),
        onFocus: t[2] || (t[2] = (r) => n.focusing = !0),
        onBlur: t[3] || (t[3] = (...r) => s.blur && s.blur(...r))
      }, null, 40, qd), [
        [oe, n.editValue]
      ]),
      i.useOperate ? (a(), h("div", Kd, [
        m("span", {
          onClick: t[4] || (t[4] = (...r) => s.minus && s.minus(...r))
        }, Gd),
        m("span", {
          onClick: t[5] || (t[5] = (...r) => s.plus && s.plus(...r))
        }, Qd)
      ])) : k("", !0)
    ], 2)
  ], 2);
}
const ec = /* @__PURE__ */ V(Yd, [["render", Zd]]), tc = {
  name: "HImagePreviewModal",
  components: {
    Loading: qt,
    Modal: bs
  },
  props: {
    isShow: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      openModal: !1,
      datas: [],
      index: 0,
      height: 200,
      width: 200,
      showIndex: -1,
      changeing: !1,
      previewFile: {}
    };
  },
  computed: {
    previewStyle() {
      return {
        height: `${this.height}px`,
        width: `${this.width}px`
      };
    },
    computedDatas() {
      return f.isString(this.datas) ? [this.datas] : f.isArray(this.datas) ? this.datas : [];
    },
    isShowIndex() {
      return !f.isString(this.datas);
    }
  },
  watch: {
    openModal() {
      this.openModal && this.change(this.index);
    },
    isShow() {
    }
  },
  mounted() {
  },
  methods: {
    close() {
      this.previewFile = {}, this.height = 200, this.width = 200;
    },
    initStyle(e) {
      let t = this.$refs.img.width, i = this.$refs.img.height;
      if (t > 800 || i > 12e3) {
        let l = Math.max(t / 800, i / 12e3);
        t = t / l, i = i / l;
      }
      this.width = t, this.height = i, setTimeout(() => {
        this.changeing = !1;
      }, 300);
    },
    change(e) {
      if (e < 0 || e > this.computedDatas.length - 1)
        return !1;
      this.changeing = !0, setTimeout(() => {
        this.showIndex = e, this.updatePreview();
      }, 300);
    },
    updatePreview() {
      if (this.computedDatas.length == 0)
        return;
      let e = this.computedDatas[this.showIndex], t = f.isString(e) ? { url: e } : e;
      t.url === this.previewFile.url && this.$nextTick(() => {
        this.$refs.img && this.$refs.img.complete && setTimeout(() => {
          this.changeing = !1;
        }, 300);
      }), this.previewFile = t;
    }
  }
}, ic = {
  key: 0,
  class: "h-image-preview-index"
}, sc = /* @__PURE__ */ m("i", { class: "h-icon-left" }, null, -1), lc = [
  sc
], nc = ["src", "alt"], rc = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), oc = [
  rc
];
function ac(e, t, i, l, n, s) {
  const r = L("Loading"), o = L("Modal");
  return a(), A(o, {
    modelValue: n.openModal,
    "onUpdate:modelValue": t[3] || (t[3] = (c) => n.openModal = c),
    onClose: s.close
  }, {
    default: z(() => [
      m("div", {
        class: "h-image-preview",
        style: D(s.previewStyle)
      }, [
        s.isShowIndex ? (a(), h("span", ic, _(n.showIndex + 1) + " / " + _(s.computedDatas.length), 1)) : k("", !0),
        n.showIndex != 0 ? (a(), h("span", {
          key: 1,
          class: "h-image-preview-icon h-image-preview-left-icon",
          onClick: t[0] || (t[0] = (c) => s.change(n.showIndex - 1))
        }, lc)) : k("", !0),
        I(ut, { name: "fade" }, {
          default: z(() => [
            W(m("img", {
              ref: "img",
              src: n.previewFile.url,
              class: "h-image-preview-image",
              alt: n.previewFile.name,
              onLoad: t[1] || (t[1] = (...c) => s.initStyle && s.initStyle(...c))
            }, null, 40, nc), [
              [Q, !n.changeing]
            ])
          ]),
          _: 1
        }),
        N(e.$slots, "item", {
          data: n.previewFile,
          index: n.index
        }),
        n.showIndex != s.computedDatas.length - 1 ? (a(), h("span", {
          key: 2,
          class: "h-image-preview-icon h-image-preview-right-icon",
          onClick: t[2] || (t[2] = (c) => s.change(n.showIndex + 1))
        }, oc)) : k("", !0),
        I(r, { loading: n.changeing }, null, 8, ["loading"])
      ], 4)
    ]),
    _: 3
  }, 8, ["modelValue", "onClose"]);
}
const hc = /* @__PURE__ */ V(tc, [["render", ac]]);
let Re;
function uc(e, t) {
  return dc({ datas: e, index: t });
}
const dc = (e) => {
  if (!Re) {
    const t = document.body, i = document.createElement("div");
    i.setAttribute("id", "image-preview"), t.appendChild(i), Re = Vs(hc).mount(i);
  }
  Re.datas = e.datas || [], Re.index = e.index || 0, setTimeout(() => {
    Re.openModal = !0;
  }, 10);
}, $e = {
  UPLOADING: "UPLOADING",
  SUCCESS: "SUCCESS",
  FAIL: "FAIL"
}, $i = (e) => ({
  name: null,
  size: null,
  type: null,
  status: $e.SUCCESS,
  url: e,
  thumbUrl: e,
  uid: f.uuid()
}), Vi = "h-uploader", cc = {
  name: "HUploader",
  mixins: [Y],
  emits: ["delete", "click", "update:modelValue"],
  props: {
    accept: String,
    buttonText: String,
    modelValue: {
      type: [Array, Object, String]
    },
    displayType: {
      type: String,
      default: "file"
    },
    dataType: {
      type: String,
      default: "object"
    },
    showFileList: {
      type: Boolean,
      default: !0
    },
    multiple: {
      type: Boolean,
      default: !1
    },
    limit: Number,
    readonly: {
      type: Boolean,
      default: !1
    },
    showPercent: {
      type: Boolean,
      default: !1
    },
    option: {
      type: Object,
      default: () => {
      }
    }
  },
  data() {
    return {
      preview: !1,
      previewIndex: -1,
      isdragging: !1,
      stashFiles: [],
      stashValue: null
    };
  },
  watch: {
    modelValue(e) {
      e !== this.stashValue && (this.stashFiles = []);
    }
  },
  computed: {
    files() {
      return this.stashFiles.length ? this.stashFiles : this.dataType === "url" ? this.multiple ? (this.modelValue || []).map((e) => $i(e)) : this.modelValue ? [$i(this.modelValue)] : [] : this.multiple ? this.modelValue || [] : this.modelValue ? [this.modelValue] : [];
    },
    singleFile() {
      return this.files.length ? this.files[0] : null;
    },
    showUploadButton() {
      return this.readonly ? !1 : this.multiple && (!this.limit || this.limit > this.files.length) || !this.multiple && !this.files.length;
    },
    showReUploadWord() {
      return this.hlang("h.uploader.reUpload");
    },
    showUploadWord() {
      return this.buttonText || this.hlang("h.uploader.upload");
    },
    showOverLimit() {
      return this.hlang("h.uploader.overLimit");
    },
    uploaderCls() {
      return {
        [Vi]: !0,
        [`${Vi}-${this.displayType}-container`]: !0
      };
    }
  },
  methods: {
    isUploading(e) {
      return e.status === $e.UPLOADING;
    },
    triggerFileChoose() {
      this.$refs.file.value = null, this.$refs.file.click();
    },
    onDrag(e) {
      this.isdragging = !1;
      var t = e.dataTransfer.files;
      this.onFileUpload(t);
    },
    async onFileUpload(e) {
      if (e.length === 0)
        return;
      if (this.multiple && e.length + this.files.length > this.limit) {
        R.error(this.showOverLimit);
        return;
      }
      const t = [...e].filter((i) => !this.option.onBeforeUpload || this.option.onBeforeUpload(i) !== !1).map((i) => ({
        name: i.name,
        size: i.size,
        type: i.type,
        status: $e.UPLOADING,
        url: null,
        thumbUrl: null,
        uid: f.uuid(),
        file: i
      }));
      if (t.length !== 0) {
        this.multiple ? this.stashFiles = [...this.files, ...t] : this.stashFiles = [t[0]];
        for (const i of t)
          this.option.onChange && this.option.onChange(i.file, i).then((l) => {
            this.update({ ...i, status: $e.SUCCESS, url: l });
          }).catch((l) => {
            this.update({ ...i, status: $e.FAIL });
          });
      }
    },
    update(e) {
      if (!e)
        return;
      const t = [...this.files], i = t.findIndex((l) => l.uid === e.uid);
      i > -1 ? e.status === $e.FAIL ? t.splice(i, 1) : t.splice(i, 1, e) : t.push(e), this.updateModelValue(t);
    },
    updateModelValue(e) {
      this.stashFiles = e;
      let t = null;
      this.dataType === "url" ? this.multiple ? t = e.map((i) => i.url) : t = e.length ? e[0].url : [] : this.multiple ? t = e : t = e.length ? e[0] : null, this.stashValue = t, this.$emit("update:modelValue", t);
    },
    onFileChange() {
      const e = this.$refs.file.files;
      this.onFileUpload(e);
    },
    fileClick(e, t) {
      this.$emit("click", e, t);
    },
    imageClick(e, t) {
      this.$emit("click", t, e);
    },
    previewImage(e) {
      uc(this.files, e);
    },
    getBackgroundImage(e) {
      let t = {};
      return (e.thumbUrl || e.url) && (t["background-image"] = `url(${e.thumbUrl || e.url})`), t;
    },
    deleteFile(e, t) {
      t && t.stopPropagation(), this.$emit("delete", this.files[e], e);
      const i = [...this.files];
      i.splice(e, 1), this.updateModelValue(i);
    }
  }
}, fc = {
  key: 0,
  class: "h-uploader-image"
}, mc = {
  key: 0,
  class: "h-uploader-progress"
}, pc = {
  key: 1,
  class: "h-icon-spinner"
}, gc = /* @__PURE__ */ m("i", { class: "h-icon-plus" }, null, -1), yc = [
  gc
], bc = /* @__PURE__ */ m("i", { class: "h-icon-plus" }, null, -1), vc = [
  bc
], wc = {
  key: 0,
  class: "h-uploader-progress"
}, kc = {
  key: 1,
  class: "h-icon-spinner"
}, Sc = ["onClick"], Cc = ["onClick"], xc = /* @__PURE__ */ m("i", { class: "h-icon-fullscreen" }, null, -1), _c = [
  xc
], Tc = /* @__PURE__ */ m("i", {
  class: "h-space",
  style: { width: "5px" }
}, null, -1), Oc = ["onClick"], Nc = /* @__PURE__ */ m("i", { class: "h-icon-trash" }, null, -1), $c = [
  Nc
], Vc = { key: 2 }, Dc = {
  key: 3,
  class: "h-uploader-files"
}, Ec = {
  key: 0,
  class: "h-uploader-file-progress"
}, Mc = {
  key: 1,
  class: "h-uploader-file-loading"
}, jc = /* @__PURE__ */ m("i", { class: "h-icon-spinner" }, null, -1), Lc = ["onClick"], Ac = { class: "link" }, Bc = ["onClick"], Ic = ["accept", "multiple"];
function Hc(e, t, i, l, n, s) {
  const r = L("Progress");
  return a(), h("div", {
    class: S(s.uploaderCls)
  }, [
    i.displayType == "image" ? (a(), h(O, { key: 0 }, [
      i.multiple ? (a(), h(O, { key: 1 }, [
        s.showUploadButton ? (a(), h("div", {
          key: 0,
          class: "h-uploader-image-empty h-uploader-browse-button",
          onClick: t[2] || (t[2] = (...o) => s.triggerFileChoose && s.triggerFileChoose(...o))
        }, vc)) : k("", !0),
        i.showFileList ? (a(!0), h(O, { key: 1 }, E(s.files, (o, c) => (a(), h("div", {
          key: o.uid,
          class: S({
            "h-uploader-image": !0
          })
        }, [
          m("div", {
            class: "h-uploader-image-background",
            style: D(s.getBackgroundImage(o))
          }, null, 4),
          s.isUploading(o) ? (a(), h("div", wc, [
            i.showPercent ? (a(), A(r, {
              key: 0,
              percent: o.percent,
              "stroke-width": 5
            }, null, 8, ["percent"])) : (a(), h("i", kc))
          ])) : (a(), h("div", {
            key: 1,
            class: S({
              "h-uploader-image-operate": !0,
              "h-uploader-image-operate-pointer": i.readonly
            }),
            onClick: (u) => s.imageClick(c, o)
          }, [
            m("div", null, [
              m("span", {
                class: "h-uploader-operate",
                onClick: (u) => s.previewImage(c)
              }, _c, 8, Cc),
              i.readonly ? k("", !0) : (a(), h(O, { key: 0 }, [
                Tc,
                m("span", {
                  class: "h-uploader-operate",
                  onClick: (u) => s.deleteFile(c, u)
                }, $c, 8, Oc)
              ], 64))
            ])
          ], 10, Sc))
        ]))), 128)) : k("", !0)
      ], 64)) : (a(), h(O, { key: 0 }, [
        s.singleFile ? (a(), h("div", fc, [
          m("div", {
            class: "h-uploader-image-background",
            style: D(s.getBackgroundImage(s.singleFile))
          }, null, 4),
          s.isUploading(s.singleFile) ? (a(), h("div", mc, [
            i.showPercent ? (a(), A(r, {
              key: 0,
              percent: s.singleFile.percent,
              "stroke-width": 5
            }, null, 8, ["percent"])) : (a(), h("i", pc))
          ])) : (a(), h("div", {
            key: 1,
            class: "h-uploader-image-operate h-uploader-browse-button",
            onClick: t[0] || (t[0] = (...o) => s.triggerFileChoose && s.triggerFileChoose(...o))
          }, [
            m("div", null, _(s.showReUploadWord), 1)
          ]))
        ])) : s.showUploadButton ? (a(), h("div", {
          key: 1,
          class: "h-uploader-image-empty h-uploader-browse-button",
          onClick: t[1] || (t[1] = (...o) => s.triggerFileChoose && s.triggerFileChoose(...o))
        }, yc)) : k("", !0)
      ], 64))
    ], 64)) : k("", !0),
    i.displayType == "file" ? (a(), h(O, { key: 1 }, [
      e.$slots.dragdrop ? (a(), h("div", {
        key: 0,
        class: S(["h-uploader-browse-button h-uploader-drop-element", { "h-uploader-dragging": n.isdragging }]),
        onDragover: t[3] || (t[3] = B((o) => n.isdragging = !0, ["prevent"])),
        onDragleave: t[4] || (t[4] = B((o) => n.isdragging = !1, ["prevent"])),
        onDrop: t[5] || (t[5] = B((...o) => s.onDrag && s.onDrag(...o), ["prevent", "stop"])),
        onClick: t[6] || (t[6] = (...o) => s.triggerFileChoose && s.triggerFileChoose(...o))
      }, [
        N(e.$slots, "dragdrop")
      ], 34)) : e.$slots.button ? (a(), h("div", {
        key: 1,
        onClick: t[7] || (t[7] = (...o) => s.triggerFileChoose && s.triggerFileChoose(...o))
      }, [
        N(e.$slots, "button")
      ])) : (a(), h("div", Vc, [
        s.showUploadButton ? (a(), h("button", {
          key: 0,
          type: "button",
          icon: "h-icon-upload",
          class: "h-btn h-uploader-browse-button",
          onClick: t[8] || (t[8] = (...o) => s.triggerFileChoose && s.triggerFileChoose(...o))
        }, _(s.showUploadWord), 1)) : k("", !0)
      ])),
      i.showFileList ? (a(), h("div", Dc, [
        (a(!0), h(O, null, E(s.files, (o, c) => (a(), h("div", {
          key: o.uid,
          class: "h-uploader-file"
        }, [
          s.isUploading(o) ? (a(), h("div", Ec, [
            i.showPercent ? (a(), A(r, {
              key: 0,
              percent: o.percent,
              "stroke-width": 5
            }, {
              title: z(() => [
                F(_(o.name), 1)
              ]),
              _: 2
            }, 1032, ["percent"])) : (a(), h("div", Mc, [
              m("span", null, _(o.name), 1),
              jc
            ]))
          ])) : (a(), h("div", {
            key: 1,
            class: "h-uploader-file-info h-uploader-file-status-{{file.status}}",
            onClick: (u) => s.fileClick(o, c)
          }, [
            m("span", Ac, _(o.name), 1),
            i.readonly ? k("", !0) : (a(), h("i", {
              key: 0,
              class: "h-icon-trash middle-right link",
              onClick: (u) => s.deleteFile(c, u)
            }, null, 8, Bc))
          ], 8, Lc))
        ]))), 128))
      ])) : k("", !0)
    ], 64)) : k("", !0),
    m("input", {
      ref: "file",
      type: "file",
      accept: i.accept,
      style: { display: "none" },
      multiple: i.multiple,
      onChange: t[9] || (t[9] = (...o) => s.onFileChange && s.onFileChange(...o))
    }, null, 40, Ic)
  ], 2);
}
const Fc = /* @__PURE__ */ V(cc, [["render", Hc]]), ne = "h-autocomplete", Pc = {
  name: "HAutoComplete",
  mixins: [Y],
  emits: ["update:modelValue", "change", "clear", "picker", "remove", "enter"],
  props: {
    multiple: {
      type: Boolean,
      default: !1
    },
    mustMatch: {
      type: Boolean,
      default: !0
    },
    autoSelectFirst: {
      type: Boolean,
      default: !1
    },
    type: {
      type: [String],
      default: "key"
    },
    disabled: {
      type: Boolean,
      default: !1
    },
    datas: [Array, Object],
    dict: String,
    placeholder: {
      type: String
    },
    modelValue: [Number, String, Array, Object],
    option: Object,
    show: String,
    emptyContent: {
      type: [String, Object]
    },
    config: String,
    className: String,
    delay: {
      type: Number,
      default: 100
    },
    noBorder: {
      type: Boolean,
      default: !1
    },
    autosize: {
      type: Boolean,
      default: !1
    },
    endInput: String,
    showDropdownWhenNoResult: {
      type: Boolean,
      default: !0
    },
    deletable: {
      type: Boolean,
      default: !0
    }
  },
  data() {
    return {
      html: "autocomplete_rander_html",
      focusing: !1,
      objects: [],
      object: {
        key: null,
        title: this.show,
        value: null
      },
      nowSelected: -1,
      tempValue: null,
      searchValue: null,
      oldValue: this.modelValue,
      focusValue: null,
      loading: !1,
      content: null,
      loadDatas: [],
      isShow: !1,
      searchTimeout: null,
      el: null,
      lastTrigger: null
    };
  },
  computed: {
    showPlaceholder() {
      return this.placeholder || this.hlang("h.autoComplate.placeholder");
    },
    showEmptyContent() {
      return this.emptyContent || this.hlang("h.autoComplate.emptyContent");
    },
    param() {
      return f.extend(
        {},
        $.getOption("autocomplete.default"),
        this.config ? $.getOption(`autocomplete.configs.${this.config}`) : {},
        this.option
      );
    },
    autocompleteCls() {
      let e = !!this.noBorder;
      return e || (e = this.autosize), {
        [`${ne}`]: !0,
        [`${ne}-input-border`]: !this.noBorder,
        [`${ne}-multiple`]: this.multiple,
        [`${ne}-no-autosize`]: !e,
        [`${ne}-disabled`]: this.disabled,
        focusing: this.focusing
      };
    },
    showCls() {
      return {
        [`${ne}-show`]: !0,
        [`${this.className}-show`]: !!this.className,
        focusing: this.focusing
      };
    },
    groupCls() {
      return {
        [`${ne}-group`]: !0,
        [`${ne}-multiple`]: this.multiple,
        [`${this.className}-dropdown`]: !!this.className
      };
    },
    results() {
      let e = this.datas;
      if (this.dict && (e = $.getDict(this.dict)), f.isNull(e))
        e = this.loadDatas;
      else if (e = $.initOptions(e, this), this.searchValue) {
        let i = this.searchValue.toLowerCase();
        e = e.filter((l) => (l.html || l[this.param.titleName] || "").toLowerCase().indexOf(i) != -1);
      }
      if (this.objects.length > 0) {
        let i = f.getArray(this.objects, "key").filter((l) => !f.isNull(l));
        e = e.filter((l) => i.indexOf(l[this.param.keyName]) == -1);
      }
      let t = [];
      for (let i of e)
        t.push(this.getValue(i));
      return t;
    }
  },
  watch: {
    modelValue() {
      this.oldValue != this.modelValue && this.parse();
    },
    disabled() {
      this.disabled ? this.dropdown.disabled() : this.dropdown.enabled();
    },
    nowSelected() {
      this.$nextTick(() => {
        if (this.content && this.nowSelected > -1) {
          let e = this.content.querySelector(".h-autocomplete-item-selected"), t = this.content.querySelector(".h-autocomplete-ul");
          e && t && (e.offsetTop + e.offsetHeight - this.content.scrollTop > this.content.offsetHeight ? this.content.scrollTop = e.offsetTop + e.offsetHeight - this.content.offsetHeight : e.offsetTop - this.content.scrollTop < 0 && (this.content.scrollTop = e.offsetTop));
        }
      });
    }
  },
  beforeMount() {
    this.parse();
  },
  beforeUnmount() {
    let e = this.el;
    e && (e.style.display = "none", this.$el.appendChild(e)), this.dropdown && this.dropdown.destory();
  },
  mounted() {
    this.$nextTick(() => {
      let e = this.el = this.$el.querySelector(".h-autocomplete-show");
      this.content = this.$el.querySelector(".h-autocomplete-group");
      let t = this;
      this.dropdown = new he(e, {
        trigger: "",
        triggerOnce: !0,
        content: this.content,
        disabled: this.disabled,
        equalWidth: !0,
        events: {
          show() {
            t.isShow = !0;
          }
        }
      });
    });
  },
  methods: {
    parse() {
      if (this.tempValue = null, this.multiple) {
        let e = [];
        if (f.isArray(this.modelValue) && this.modelValue.length > 0)
          for (let t of this.modelValue) {
            if (this.type == "key" && !f.isNull(t) && (this.dict || this.datas)) {
              let i = [...this.results, ...this.objects].filter((l) => l.key == t);
              i.length && (t = i[0].value);
            }
            e.push(this.getValue(t));
          }
        this.objects = e;
      } else {
        let e = null;
        if (this.type == "key") {
          if (!f.isNull(this.modelValue)) {
            if (!this.show && (this.dict || this.datas) && this.results) {
              let t = this.results.filter((i) => i[this.param.keyName] == this.modelValue);
              t.length > 0 && (e = t[0].value);
            }
            f.isNull(e) && (e = {
              [this.param.keyName]: this.modelValue,
              [this.param.titleName]: this.show
            });
          }
        } else
          this.type == "title" ? f.isNull(this.modelValue) || (e = {
            [this.param.keyName]: this.modelValue,
            [this.param.titleName]: this.modelValue
          }) : e = this.modelValue;
        f.isNull(e) ? this.object = {
          key: null,
          title: null,
          value: null
        } : f.extend(this.object, this.getValue(e)), this.tempValue = this.object.title;
      }
      this.oldValue = this.modelValue;
    },
    dispose() {
      let e = null;
      if (this.multiple) {
        if (e = [], f.isArray(this.objects) && this.objects.length > 0)
          for (let t of this.objects)
            e.push(this.getV(t));
        return e;
      } else {
        if (this.mustMatch)
          e = this.getV(this.object);
        else if (!f.isBlank(this.object.key))
          e = this.getV(this.object);
        else if (!f.isBlank(this.tempValue)) {
          let t = null;
          this.type == "title" ? t = this.tempValue : t = {
            [this.param.titleName]: this.tempValue
          }, e = t, this.object.title = this.tempValue;
        }
        return e;
      }
    },
    getV(e) {
      return this.type == "key" ? e.key : this.type == "title" ? e.title : e.value;
    },
    getValue(e) {
      return !f.isObject(e) && this.type == "object" ? f.getValue(
        {
          [this.param.titleName]: e
        },
        this.param
      ) : f.getValue(e, this.param);
    },
    onFocus(e) {
      this.lastTrigger = null, this.focusing = !0, this.focusValue = e.target.value, this.multiple && (this.searchValue = null), this.search();
    },
    focusData() {
      this.focusValue = this.object.title, this.multiple && (this.searchValue = null);
    },
    onPaste() {
      setTimeout(() => {
        this.search();
      }, 0);
    },
    onBlur(e) {
      if (this.focusing = !1, this.lastTrigger == "picker" || this.lastTrigger == "clear")
        return;
      let t = e.target.value;
      this.focusValue !== t && (this.mustMatch ? !this.multiple && this.object.key != null ? (this.object = {
        key: null,
        title: null,
        value: null
      }, this.setvalue("blur")) : this.tempValue = null : (this.multiple && t && this.objects.push(this.getValue(t)), this.setvalue("blur"))), this.loading = !1, this.searchTimeout && clearTimeout(this.searchTimeout);
    },
    onKeyDown(e) {
      (e.keyCode || e.which || e.charCode) == 8 && e.target.value === "" && this.objects.length > 0 ? this.remove(this.objects[this.objects.length - 1]) : this.endInput && e.key == this.endInput && (e.preventDefault(), this.onEnter(e));
    },
    onKeyUp(e) {
      let t = e.keyCode || e.which || e.charCode;
      t == 38 ? this.nowSelected > 0 && (this.nowSelected -= 1) : t == 40 ? this.nowSelected < this.results.length - 1 && (this.nowSelected += 1) : t == 13 || this.search();
    },
    onEnter(e) {
      let t = this.tempValue = e.target.value;
      e.preventDefault(), this.nowSelected >= 0 ? (this.update(this.results[this.nowSelected]), this.setvalue("enter")) : (!this.mustMatch && this.multiple && t && this.objects.push(this.getValue(t)), this.setvalue("enter"));
    },
    search() {
      let e = this.$refs.input, t = e.value;
      this.tempValue = t || null, t != this.object.title && this.object.title && (this.object.key = null, this.object.title = null, this.object.value = null), this.loading = !1, this.searchTimeout && clearTimeout(this.searchTimeout), t.length >= this.param.minWord ? (this.searchTimeout = setTimeout(() => {
        this.updateDropdown(), f.isFunction(this.param.loadData) ? (this.loading = !0, this.param.loadData.call(
          this.param,
          t,
          (i) => {
            e.value === t && (this.loading = !1, this.loadDatas = i, this.updateDropdown(), this.nowSelected = this.autoSelectFirst ? 0 : -1);
          },
          () => {
            this.loading = !1;
          }
        )) : this.nowSelected = this.autoSelectFirst ? 0 : -1;
      }, this.delay), this.searchValue = t, this.dropdown.update()) : this.dropdown.hide();
    },
    updateDropdown() {
      this.$nextTick(() => {
        this.dropdown && (this.results.length == 0 && !this.showDropdownWhenNoResult ? this.dropdown.hide() : (this.dropdown.show(), this.dropdown.update()));
      });
    },
    update(e) {
      this.multiple ? this.objects.push(f.copy(e)) : e == null ? this.object = {
        key: null,
        title: null,
        value: null
      } : this.object = f.copy(e), this.tempValue = null;
    },
    remove(e) {
      this.objects.splice(this.objects.indexOf(e), 1), this.setvalue("remove");
    },
    picker(e) {
      this.update(e), this.setvalue("picker");
    },
    setvalue(e) {
      if (this.disabled)
        return;
      this.lastTrigger = e, this.nowSelected = -1;
      let t = this.oldValue = this.dispose();
      this.focusValue = null, this.focusData(), this.multiple ? this.tempValue = null : this.tempValue = this.object.title, this.$emit("update:modelValue", t, e), this.$emit("change", f.copy(this.multiple ? this.objects : this.object), e);
      let i = document.createEvent("CustomEvent");
      i.initCustomEvent("setvalue", !0, !0, t), this.$el.dispatchEvent(i), e && this.$emit(e, t), this.dropdown.hide(), setTimeout(() => {
        this.searchValue = null;
      }, 100);
    },
    hide() {
      this.loading = !1, this.dropdown.hide();
    },
    clear() {
      this.tempValue = null, this.focusValue = null, this.object = {
        key: null,
        title: null,
        value: null
      }, this.setvalue("clear");
    }
  }
}, Wc = ["onClick"], Rc = ["disabled", "placeholder"], Uc = {
  key: 0,
  class: "h-icon-loading"
}, zc = ["disabled", "placeholder"], Yc = {
  key: 0,
  class: "h-icon-loading"
}, qc = {
  key: 0,
  class: "h-autocomplete-ul"
}, Kc = ["onMousedown"], Xc = ["innerHTML"], Gc = {
  key: 0,
  class: "h-autocomplete-empty-content"
};
function Jc(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.autocompleteCls)
  }, [
    m("div", {
      class: S(s.showCls)
    }, [
      i.multiple ? (a(), h(O, { key: 0 }, [
        (a(!0), h(O, null, E(n.objects, (r, o) => (a(), h("span", {
          key: o + "" + r.key
        }, [
          m("span", null, _(r.title), 1),
          i.disabled ? k("", !0) : (a(), h("i", {
            key: 0,
            class: "h-icon-close-min",
            onClick: B((c) => s.remove(r), ["stop"])
          }, null, 8, Wc))
        ]))), 128)),
        W(m("input", {
          ref: "input",
          "onUpdate:modelValue": t[0] || (t[0] = (r) => n.tempValue = r),
          disabled: i.disabled,
          type: "text",
          class: "h-autocomplete-input h-input",
          placeholder: s.showPlaceholder,
          autocomplete: "off",
          onFocus: t[1] || (t[1] = (...r) => s.onFocus && s.onFocus(...r)),
          onBlur: t[2] || (t[2] = B((...r) => s.onBlur && s.onBlur(...r), ["stop"])),
          onPaste: t[3] || (t[3] = (...r) => s.onPaste && s.onPaste(...r)),
          onKeyup: t[4] || (t[4] = (...r) => s.onKeyUp && s.onKeyUp(...r)),
          onKeydown: t[5] || (t[5] = (...r) => s.onKeyDown && s.onKeyDown(...r)),
          onKeypress: t[6] || (t[6] = re((...r) => s.onEnter && s.onEnter(...r), ["enter"]))
        }, null, 40, Rc), [
          [oe, n.tempValue]
        ]),
        n.loading ? (a(), h("i", Uc)) : k("", !0)
      ], 64)) : k("", !0),
      i.multiple ? k("", !0) : (a(), h(O, { key: 1 }, [
        W(m("input", {
          ref: "input",
          "onUpdate:modelValue": t[7] || (t[7] = (r) => n.tempValue = r),
          type: "text",
          disabled: i.disabled,
          class: "h-autocomplete-input h-input",
          placeholder: s.showPlaceholder,
          autocomplete: "off",
          onFocus: t[8] || (t[8] = (...r) => s.onFocus && s.onFocus(...r)),
          onPaste: t[9] || (t[9] = (...r) => s.onPaste && s.onPaste(...r)),
          onBlur: t[10] || (t[10] = B((...r) => s.onBlur && s.onBlur(...r), ["stop"])),
          onKeyup: t[11] || (t[11] = (...r) => s.onKeyUp && s.onKeyUp(...r)),
          onKeypress: t[12] || (t[12] = re((...r) => s.onEnter && s.onEnter(...r), ["enter"]))
        }, null, 40, zc), [
          [oe, n.tempValue]
        ]),
        n.loading ? (a(), h("i", Yc)) : n.tempValue && (!i.disabled || i.deletable) ? (a(), h("i", {
          key: 1,
          class: "h-icon-close text-hover",
          onMousedown: t[13] || (t[13] = (...r) => s.clear && s.clear(...r))
        }, null, 32)) : k("", !0)
      ], 64))
    ], 2),
    m("div", {
      class: S(s.groupCls)
    }, [
      n.isShow ? (a(), h("ul", qc, [
        N(e.$slots, "top", { results: s.results }),
        (a(!0), h(O, null, E(s.results, (r, o) => (a(), h("li", {
          key: r.key,
          class: S(["h-autocomplete-item", { "h-autocomplete-item-selected": o == n.nowSelected }]),
          onMousedown: (c) => s.picker(r)
        }, [
          r.html ? (a(), h("div", {
            key: 0,
            innerHTML: r.html
          }, null, 8, Xc)) : e.$slots.item ? N(e.$slots, "item", {
            key: 2,
            item: r
          }) : (a(), h(O, { key: 1 }, [
            F(_(r.title), 1)
          ], 64))
        ], 42, Kc))), 128)),
        s.results.length == 0 && i.showDropdownWhenNoResult ? (a(), h("li", Gc, _(s.showEmptyContent), 1)) : k("", !0),
        N(e.$slots, "bottom", { results: s.results })
      ])) : k("", !0)
    ], 2)
  ], 2);
}
const Qc = /* @__PURE__ */ V(Pc, [["render", Jc]]), Ue = "h-row", st = {
  type: ["flex"],
  align: ["top", "middle", "bottom"],
  justify: ["start", "end", "center", "space-around", "space-between"],
  direction: ["row", "row-reverse", "column", "column-reverse"]
}, Oe = (e, t) => Math.floor(e / -2) + (t ? e % 2 : 0) + "px", Zc = {
  name: "HRow",
  props: {
    type: {
      validator(e) {
        return st.type.indexOf(e) != -1;
      }
    },
    align: {
      validator(e) {
        return st.align.indexOf(e) != -1;
      }
    },
    justify: {
      validator(e) {
        return st.justify.indexOf(e) != -1;
      }
    },
    direction: {
      validator(e) {
        return st.direction.indexOf(e) != -1;
      }
    },
    space: {
      type: Number,
      default: 0
    },
    spaceX: {
      type: Number,
      default: 0
    },
    spaceY: {
      type: Number,
      default: 0
    }
  },
  computed: {
    classes() {
      return [
        {
          [`${Ue}`]: !this.type,
          [`${Ue}-${this.type}`]: !!this.type,
          [`${Ue}-${this.type}-${this.align}`]: !!this.align,
          [`${Ue}-${this.type}-${this.direction}`]: this.direction,
          [`${Ue}-${this.type}-${this.justify}`]: !!this.justify
        }
      ];
    },
    styles() {
      let e = {};
      if (this.space !== 0) {
        const t = Oe(this.space, !0), i = Oe(this.space, !1);
        e.marginLeft = t, e.marginRight = i, e.marginTop = t, e.marginBottom = i;
      }
      return this.spaceX !== 0 && (e.marginLeft = Oe(this.spaceX, !0), e.marginRight = Oe(this.spaceX, !1)), this.spaceY !== 0 && (e.marginTop = Oe(this.spaceY, !0), e.marginBottom = Oe(this.spaceY, !1)), e;
    }
  }
}, ef = {
  key: 0,
  class: "h-row-clear"
};
function tf(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes),
    style: D(s.styles)
  }, [
    N(e.$slots, "default"),
    i.type != "flex" ? (a(), h("div", ef)) : k("", !0)
  ], 6);
}
const sf = /* @__PURE__ */ V(Zc, [["render", tf]]), lt = "h-col", Ne = (e, t) => Math.floor(e / 2) + (t ? 0 : e % 2) + "px", lf = {
  name: "HCell",
  props: {
    width: [Number, String],
    flex: [Number, String],
    className: String,
    xs: [Number, Object],
    sm: [Number, Object],
    md: [Number, Object],
    lg: [Number, Object],
    xl: [Number, Object]
  },
  computed: {
    classes() {
      let e = this.width, t = [`${lt}`];
      t.push({
        [`${lt}-${e}`]: e,
        [`${this.className}`]: !!this.className
      });
      let i = null;
      for (let l of ["xl", "lg", "md", "sm", "xs"])
        f.isNumber(this[l]) ? (i = this[l], t.push(`${lt}-${l}-${this[l]}`)) : i && t.push(`${lt}-${l}-${i}`);
      return t;
    },
    styles() {
      let e = {}, t = "padding";
      if (this.flex && (e.flex = this.flex), this.$parent.type == "flex" && (t = "margin"), f.isNumber(this.$parent.space) && this.$parent.space !== 0) {
        const i = Ne(this.$parent.space, !0), l = Ne(this.$parent.space, !1);
        e[`${t}Left`] = i, e[`${t}Right`] = l, e[`${t}Top`] = i, e[`${t}Bottom`] = l;
      }
      return f.isNumber(this.$parent.spaceX) && this.$parent.spaceX !== 0 && (e[`${t}Left`] = Ne(this.$parent.spaceX, !0), e[`${t}Right`] = Ne(this.$parent.spaceX, !1)), f.isNumber(this.$parent.spaceY) && this.$parent.spaceY !== 0 && (e[`${t}Top`] = Ne(this.$parent.spaceY, !0), e[`${t}Bottom`] = Ne(this.$parent.spaceY, !1)), e;
    }
  }
};
function nf(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes),
    style: D(s.styles)
  }, [
    N(e.$slots, "default")
  ], 6);
}
const rf = /* @__PURE__ */ V(lf, [["render", nf]]), Di = "h-layout-header", of = {
  name: "HHeader",
  props: {
    theme: String
  },
  computed: {
    classes() {
      return {
        [`${Di}`]: !0,
        [`${Di}-theme-${this.theme}`]: this.theme
      };
    }
  }
};
function af(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const hf = /* @__PURE__ */ V(of, [["render", af]]), uf = "h-layout-footer", df = {
  name: "HFooter",
  props: {},
  computed: {
    classes() {
      return [`${uf}`];
    }
  }
};
function cf(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const ff = /* @__PURE__ */ V(df, [["render", cf]]), mf = "h-layout-content", pf = {
  name: "HContent",
  computed: {
    classes() {
      return [`${mf}`];
    }
  }
};
function gf(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const yf = /* @__PURE__ */ V(pf, [["render", gf]]), Ei = "h-layout-sider", bf = {
  name: "HSider",
  props: {
    theme: String
  },
  computed: {
    classes() {
      return {
        [`${Ei}`]: !0,
        [`${Ei}-theme-${this.theme}`]: this.theme
      };
    },
    styles() {
      return {};
    }
  },
  beforeUnmounted() {
    this.$parent && this.$parent.updateSider && this.$parent.updateSider();
  }
};
function vf(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes),
    style: D(s.styles)
  }, [
    N(e.$slots, "default")
  ], 6);
}
const wf = /* @__PURE__ */ V(bf, [["render", vf]]), kf = "h-space", Sf = {
  name: "HSpace",
  props: {
    width: {
      type: Number,
      default: 5
    },
    height: Number
  },
  data() {
    return {};
  },
  computed: {
    cls() {
      return {
        [`${kf}-vertical`]: !!this.width
      };
    },
    style() {
      return {
        width: `${this.width}px`
      };
    }
  },
  methods: {}
};
function Cf(e, t, i, l, n, s) {
  return a(), h("span", {
    class: S(s.cls),
    style: D(s.style)
  }, null, 6);
}
const xf = /* @__PURE__ */ V(Sf, [["render", Cf]]), ze = "h-layout", _f = {
  name: "HLayout",
  props: {
    headerFixed: {
      type: Boolean,
      default: !1
    },
    siderFixed: {
      type: Boolean,
      default: !1
    },
    siderCollapsed: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {
      hasSiderChild: !1
    };
  },
  computed: {
    classes() {
      return {
        [`${ze}`]: !0,
        [`${ze}-has-sider`]: this.hasSiderChild,
        [`${ze}-header-fixed`]: this.headerFixed,
        [`${ze}-sider-fixed`]: this.siderFixed,
        [`${ze}-sider-collapsed`]: this.siderCollapsed
      };
    }
  },
  mounted() {
    this.updateSider();
  },
  methods: {
    updateSider() {
      this.$nextTick(() => {
        for (let e of this.$el.childNodes)
          if (f.hasClass(e, "h-layout-sider")) {
            this.hasSiderChild = !0;
            return;
          }
        this.hasSiderChild = !1;
      });
    }
  }
};
function Tf(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.classes)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const Of = /* @__PURE__ */ V(_f, [["render", Tf]]), $t = "h-timeline", Nf = {
  name: "HTimeLine",
  props: {
    pending: {
      default: !1
    },
    time: {
      default: !1
    },
    timeWidth: {
      default: 100
    }
  },
  computed: {
    classes() {
      return [
        `${$t}`,
        {
          [`${$t}-pending`]: this.pending,
          [`${$t}-time`]: this.time
        }
      ];
    }
  }
};
function $f(e, t, i, l, n, s) {
  return a(), h("ul", {
    class: S(s.classes)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const Vf = /* @__PURE__ */ V(Nf, [["render", $f]]), Ye = "h-timeline", Df = {
  name: "HTimeLineItem",
  props: {
    color: String,
    icon: String
  },
  data() {
    return {
      prefix: Ye
    };
  },
  computed: {
    itemCls() {
      return {
        [`${Ye}-item`]: !0,
        "has-icon": !!this.icon || !!this.$slots.icon,
        [`${Ye}-item-${this.color}-color`]: !!this.color
      };
    },
    circleSC() {
      let e = {}, t = {
        [`${Ye}-item-circle`]: !0
      };
      return {
        styles: e,
        classes: t
      };
    },
    timeSC() {
      let e = this.$parent.timeWidth || 100;
      return {
        classes: {
          [`${Ye}-item-time`]: !0
        },
        styles: {
          width: `${e}px`
        }
      };
    }
  }
};
function Ef(e, t, i, l, n, s) {
  return a(), h("li", {
    class: S(s.itemCls)
  }, [
    m("div", {
      class: S(s.timeSC.classes),
      style: D(s.timeSC.styles)
    }, [
      N(e.$slots, "time")
    ], 6),
    m("div", {
      class: S(n.prefix + "-item-content")
    }, [
      m("div", {
        class: S(s.circleSC.classes),
        style: D(s.circleSC.styles)
      }, [
        this.$slots.icon ? k("", !0) : (a(), h("i", {
          key: 0,
          class: S(i.icon)
        }, null, 2)),
        N(e.$slots, "icon")
      ], 6),
      N(e.$slots, "content"),
      N(e.$slots, "default")
    ], 2)
  ], 2);
}
const Mf = /* @__PURE__ */ V(Df, [["render", Ef]]), jf = {
  name: "HTransfer",
  components: { Checkbox: je, Search: Kt },
  emits: ["transfer", "input", "change", "update:modelValue", "init"],
  props: {
    modelValue: {
      type: Array,
      default: () => []
    },
    datas: {
      type: Array,
      default: () => []
    },
    keyName: {
      type: String,
      default: "key"
    },
    height: Number,
    option: {
      type: Object,
      default: () => ({})
    }
  },
  data() {
    return {
      ltChecked: [],
      rtChecked: [],
      ltSearchText: "",
      rtSearchText: "",
      key: this.keyName || "key"
    };
  },
  computed: {
    transferListStyle() {
      let e = {};
      return this.height && (e.height = `${this.height}px`), e;
    },
    sources() {
      let e = this.modelValue || [], t = this.keyName || "key", i = this.datas.filter((l) => e.indexOf(l[t]) == -1);
      return this.ltSearchText && this.ltSearchText.trim() ? i.filter((l) => l.text.indexOf(this.ltSearchText.trim()) != -1) : i;
    },
    targets() {
      let e = this.modelValue || [], t = this.keyName || "key", i = this.datas.filter((l) => e.indexOf(l[t]) != -1);
      return this.rtSearchText && this.rtSearchText.trim() ? i.filter((l) => l.text.indexOf(this.rtSearchText.trim()) != -1) : i;
    }
  },
  mounted() {
    this.$emit("init", this.sources, this.targets);
  },
  methods: {
    move(e) {
      this.$emit("transfer", e, this.sources, this.targets);
      let t = this.modelValue ? [...this.modelValue] : [];
      e === 1 && this.ltChecked.length > 0 ? (this.rtSearchText = null, t.push(...this.ltChecked), this.ltChecked.length = 0) : e === -1 && this.rtChecked.length > 0 && (this.ltSearchText = null, this.rtChecked.forEach((i) => {
        t.splice(t.indexOf(i), 1);
      }), this.rtChecked.length = 0), this.$emit("input", t), this.$emit("change", t), this.$emit("update:modelValue", t);
    }
  }
}, Lf = { class: "h-transfer" }, Af = { class: "h-transfer-source" }, Bf = {
  key: 0,
  class: "h-transfer-header"
}, If = {
  key: 0,
  class: "h-transfer-filter"
}, Hf = {
  key: 0,
  class: "h-transfer-item text-center"
}, Ff = { class: "h-transfer-switch" }, Pf = {
  key: 2,
  class: "h-icon-left"
}, Wf = {
  key: 2,
  class: "h-icon-right"
}, Rf = { class: "h-transfer-target" }, Uf = {
  key: 0,
  class: "h-transfer-header"
}, zf = {
  key: 0,
  class: "h-transfer-filter"
}, Yf = {
  key: 0,
  class: "h-transfer-item text-center"
};
function qf(e, t, i, l, n, s) {
  const r = L("Search"), o = L("Checkbox");
  return a(), h("div", Lf, [
    m("div", Af, [
      N(e.$slots, "sourceHeader", {}, () => [
        i.option && i.option.ltHeadText ? (a(), h("div", Bf, _(i.option.ltHeadText), 1)) : k("", !0)
      ]),
      i.option.filterable && (s.sources.length || n.ltSearchText) ? (a(), h("div", If, [
        I(r, {
          modelValue: n.ltSearchText,
          "onUpdate:modelValue": t[0] || (t[0] = (c) => n.ltSearchText = c),
          position: "front",
          placeholder: i.option.placeholder
        }, null, 8, ["modelValue", "placeholder"])
      ])) : k("", !0),
      m("div", {
        class: "h-transfer-list",
        style: D(s.transferListStyle)
      }, [
        (a(!0), h(O, null, E(s.sources, (c) => (a(), h("div", {
          key: c[n.key],
          class: "h-transfer-item"
        }, [
          I(o, {
            modelValue: n.ltChecked,
            "onUpdate:modelValue": t[1] || (t[1] = (u) => n.ltChecked = u),
            value: c[n.key],
            checked: !1
          }, {
            default: z(() => [
              N(e.$slots, "item", {
                option: c,
                type: "source"
              }, () => [
                i.option && i.option.render ? (a(), h(O, { key: 0 }, [
                  F(_(i.option.render(c)), 1)
                ], 64)) : (a(), h(O, { key: 1 }, [
                  F(_(c.text), 1)
                ], 64))
              ])
            ]),
            _: 2
          }, 1032, ["modelValue", "value"])
        ]))), 128)),
        s.sources.length === 0 ? (a(), h("div", Hf, "\u65E0\u6570\u636E")) : k("", !0)
      ], 4)
    ]),
    m("div", Ff, [
      m("button", {
        class: "h-btn h-btn-s",
        type: "button",
        onClick: t[2] || (t[2] = (c) => s.move(-1))
      }, [
        i.option && i.option.ltText ? (a(), h(O, { key: 0 }, [
          F(_(i.option.ltText), 1)
        ], 64)) : i.option && i.option.ltIcon ? (a(), h("i", {
          key: 1,
          class: S(i.option.ltIcon)
        }, null, 2)) : (a(), h("i", Pf))
      ]),
      m("button", {
        class: "h-btn h-btn-s",
        type: "button",
        onClick: t[3] || (t[3] = (c) => s.move(1))
      }, [
        i.option && i.option.rtText ? (a(), h(O, { key: 0 }, [
          F(_(i.option.rtText), 1)
        ], 64)) : i.option && i.option.rtIcon ? (a(), h("i", {
          key: 1,
          class: S(i.option.rtIcon)
        }, null, 2)) : (a(), h("i", Wf))
      ])
    ]),
    m("div", Rf, [
      N(e.$slots, "targetHeader", {}, () => [
        i.option && i.option.rtHeadText ? (a(), h("div", Uf, _(i.option.rtHeadText), 1)) : k("", !0)
      ]),
      i.option.filterable && (s.targets.length || n.rtSearchText) ? (a(), h("div", zf, [
        I(r, {
          modelValue: n.rtSearchText,
          "onUpdate:modelValue": t[4] || (t[4] = (c) => n.rtSearchText = c),
          position: "front",
          placeholder: i.option.placeholder
        }, null, 8, ["modelValue", "placeholder"])
      ])) : k("", !0),
      m("div", {
        class: "h-transfer-list",
        style: D(s.transferListStyle)
      }, [
        (a(!0), h(O, null, E(s.targets, (c) => (a(), h("div", {
          key: c[n.key],
          class: "h-transfer-item"
        }, [
          m("label", null, [
            I(o, {
              modelValue: n.rtChecked,
              "onUpdate:modelValue": t[5] || (t[5] = (u) => n.rtChecked = u),
              value: c[n.key]
            }, {
              default: z(() => [
                N(e.$slots, "item", {
                  option: c,
                  type: "target"
                }, () => [
                  i.option && i.option.render ? (a(), h(O, { key: 0 }, [
                    F(_(i.option.render(c)), 1)
                  ], 64)) : (a(), h(O, { key: 1 }, [
                    F(_(c.text), 1)
                  ], 64))
                ])
              ]),
              _: 2
            }, 1032, ["modelValue", "value"])
          ])
        ]))), 128)),
        s.targets.length === 0 ? (a(), h("div", Yf, "\u65E0\u6570\u636E")) : k("", !0)
      ], 4)
    ])
  ]);
}
const Kf = /* @__PURE__ */ V(jf, [["render", qf]]), X = "h-btn", Xf = {
  size: ["l", "s", "xs"]
}, Gf = {
  name: "HButton",
  props: {
    color: String,
    textColor: String,
    icon: String,
    loading: Boolean,
    circle: Boolean,
    block: Boolean,
    noBorder: Boolean,
    disabled: {
      type: Boolean,
      default: !1
    },
    size: {
      type: String,
      validator(e) {
        return Xf.size.indexOf(e) != -1;
      }
    },
    stop: {
      type: Boolean,
      default: !1
    },
    preventDefault: {
      type: Boolean,
      default: !1
    },
    text: Boolean,
    iconCircle: Boolean,
    transparent: {
      type: Boolean,
      default: !1
    }
  },
  data() {
    return {};
  },
  computed: {
    hasText() {
      return !!this.$slots.default;
    },
    buttonCls() {
      return {
        [`${X}`]: !0,
        [`${X}-circle`]: !!this.circle || !!this.iconCircle,
        [`${X}-icon-circle`]: !!this.iconCircle,
        [`${X}-text`]: !!this.text,
        [`${X}-loading`]: !!this.loading,
        [`${X}-block`]: !!this.block,
        [`${X}-text-${this.textColor}`]: !!this.textColor,
        [`${X}-${this.color}`]: !!this.color,
        [`${X}-${this.size}`]: !!this.size,
        [`${X}-transparent`]: !!this.transparent,
        [`${X}-no-border`]: this.noBorder === !0
      };
    },
    iconClass() {
      return this.loading ? "h-icon-loading" : this.icon;
    }
  },
  methods: {}
}, Jf = ["disabled"], Qf = { key: 1 };
function Zf(e, t, i, l, n, s) {
  return a(), h("button", {
    class: S(s.buttonCls),
    type: "button",
    disabled: !!this.disabled
  }, [
    s.iconClass ? (a(), h("i", {
      key: 0,
      class: S(s.iconClass)
    }, null, 2)) : k("", !0),
    s.hasText ? (a(), h("span", Qf, [
      N(e.$slots, "default")
    ])) : k("", !0)
  ], 10, Jf);
}
const em = /* @__PURE__ */ V(Gf, [["render", Zf]]), Vt = "h-btn-group", tm = {
  size: ["l", "s", "xs"]
}, im = {
  name: "HButtonGroup",
  props: {
    circle: Boolean,
    size: {
      type: String,
      validator(e) {
        return tm.size.indexOf(e) != -1;
      }
    }
  },
  data() {
    return {};
  },
  computed: {
    buttonGroupCls() {
      return {
        [`${Vt}`]: !0,
        [`${Vt}-circle`]: !!this.circle,
        [`${Vt}-${this.size}`]: !!this.size
      };
    }
  }
};
function sm(e, t, i, l, n, s) {
  return a(), h("div", {
    class: S(s.buttonGroupCls)
  }, [
    N(e.$slots, "default")
  ], 2);
}
const lm = /* @__PURE__ */ V(im, [["render", sm]]), nm = {
  name: "HTextEllipsis",
  directives: { tooltip: ms },
  emits: ["textClick", "hide", "show"],
  props: {
    text: String,
    height: Number,
    isLimitHeight: {
      type: Boolean,
      default: !0
    },
    useTooltip: {
      type: Boolean,
      default: !1
    },
    tooltipParams: {
      type: Object,
      default: () => {
      }
    },
    textStyle: [String, Object, Array],
    textClass: [String, Object, Array],
    more: String
  },
  data() {
    return {
      keyIndex: 0,
      isHide: !1
    };
  },
  watch: {
    isLimitHeight() {
      this.init();
    },
    text() {
      this.init();
    },
    height() {
      this.init();
    }
  },
  mounted() {
    this.init();
  },
  methods: {
    init() {
      this.keyIndex += 1;
      let e = this.$el.querySelector(".h-text-ellipsis-more");
      e.style.display = "none", this.isLimitHeight ? this.limitShow() : (this.$emit("show"), this.isHide = !1);
    },
    textClick() {
      this.$emit("textClick");
    },
    limitShow() {
      this.$nextTick(() => {
        let e = this.$el.querySelector(".h-text-ellipsis-limit-text"), t = this.$el, i = this.$el.querySelector(".h-text-ellipsis-more"), l = 1e3;
        if (e)
          if (t.offsetHeight > this.height) {
            i.style.display = "inline-block";
            let n = this.text;
            for (; t.offsetHeight > this.height && l > 0; )
              t.offsetHeight > this.height * 3 ? e.innerText = n = n.substring(0, Math.floor(n.length / 2)) : e.innerText = n = n.substring(0, n.length - 1), l--;
            this.$emit("hide"), this.isHide = !0;
          } else
            this.$emit("show"), this.isHide = !1;
      });
    }
  }
}, rm = { class: "h-text-ellipsis" }, om = ["content"], am = { class: "h-text-ellipsis-more" };
function hm(e, t, i, l, n, s) {
  const r = Ds("tooltip");
  return a(), h("div", rm, [
    N(e.$slots, "before", { class: "h-text-ellipsis-before" }),
    W((a(), h("span", Z({
      style: i.textStyle,
      class: i.textClass
    }, i.tooltipParams, {
      content: i.text,
      onClick: t[0] || (t[0] = (...o) => s.textClick && s.textClick(...o))
    }), [
      (a(), h("span", {
        key: n.keyIndex,
        class: "h-text-ellipsis-limit-text"
      }, _(i.text), 1)),
      m("span", am, [
        F(_(i.more), 1),
        N(e.$slots, "more")
      ])
    ], 16, om)), [
      [r, i.useTooltip && n.isHide]
    ]),
    N(e.$slots, "after", { class: "h-text-ellipsis-after" })
  ]);
}
const um = /* @__PURE__ */ V(nm, [["render", hm]]), dm = {
  name: "HCarousel",
  emits: ["clickItem", "change"],
  props: {
    height: {
      type: Number,
      default: 300
    },
    speed: {
      type: Number,
      default: 3e3
    },
    autoplay: {
      type: Boolean,
      default: !0
    },
    changeSpeed: {
      type: Number,
      default: 500
    },
    arrow: {
      type: String,
      default: "hover"
    },
    pageTheme: {
      type: String,
      default: "square"
    },
    datas: Array,
    isHoverStop: {
      type: Boolean,
      default: !0
    },
    paginationTrigger: {
      type: String,
      default: "click"
    },
    effect: {
      type: String,
      default: "scroll"
    }
  },
  data() {
    return {
      activeIndex: 1,
      scrollTimeout: null,
      redirectTimeout1: null,
      redirectTimeout2: null
    };
  },
  computed: {
    carouselList() {
      if (this.datas.length == 0)
        return [];
      let e = this.datas;
      return [e[this.datas.length - 1], ...e, e[0]];
    },
    carouselItem() {
      return this.carouselList[this.activeIndex - 1];
    },
    paginationCls() {
      return `h-carousel-pagination-${this.pageTheme}`;
    },
    arrowCls() {
      return `h-carousel-arrow-${this.arrow}`;
    }
  },
  watch: {
    autoplay() {
      this.autoplay ? this.startAutoplay(!0) : this.stopAutoplay(!0);
    },
    effect() {
      clearTimeout(this.scrollTimeout), clearTimeout(this.redirectTimeout1), clearTimeout(this.redirectTimeout2), this.init();
    }
  },
  mounted() {
    this.$nextTick(() => {
      this.init();
    });
  },
  beforeUnmount() {
    clearTimeout(this.scrollTimeout), clearTimeout(this.redirectTimeout1), clearTimeout(this.redirectTimeout2), window.removeEventListener("resize", this.resizeEvent);
  },
  methods: {
    clickTrigger(e, t) {
      this.$emit("clickItem", e, t);
    },
    isActive(e) {
      let t = this.datas, i = this.activeIndex;
      return e + 1 == i || i == 0 && e == t.length - 1 || i == t.length + 1 && e == 0;
    },
    init() {
      this.startAutoplay(!0), setTimeout(() => {
        this.change({
          index: this.activeIndex,
          immediately: !0
        });
      }, 300), window.addEventListener("resize", this.resizeEvent, !1);
    },
    stopAutoplay(e = !1) {
      (this.isHoverStop || e) && clearTimeout(this.scrollTimeout);
    },
    startAutoplay(e = !1) {
      (this.isHoverStop || e) && this.autoplay && (clearTimeout(this.scrollTimeout), this.scrollTimeout = setTimeout(() => {
        this.next();
      }, this.speed));
    },
    resizeEvent() {
      this.change({
        index: this.activeIndex,
        immediately: !0
      });
    },
    scroll(e, t) {
      this.activeIndex = e;
      let i = this.$el.clientWidth, l = e * i;
      if (this.effect === "scroll") {
        let n = this.$el.querySelector(".h-carousel-scroll-list");
        t ? n.style.transitionDuration = "0ms" : n.style.transitionDuration = `${this.changeSpeed}ms`, n.style.transform = `translate3d(${-l}px, 0px, 0px)`;
      }
    },
    change({ index: e = 1, immediately: t = !1 }) {
      this.activeIndex == this.carouselList.length - 1 ? this.scroll(1, !0) : this.activeIndex == 0 && this.scroll(this.carouselList.length - 2, !0), clearTimeout(this.scrollTimeout), clearTimeout(this.redirectTimeout1), clearTimeout(this.redirectTimeout2), t ? this.scroll(e, t) : (this.scroll(e, t), this.$emit("change", e, this.carouselList[this.activeIndex]), this.activeIndex == this.carouselList.length - 1 ? this.redirectTimeout1 = setTimeout(() => {
        this.scroll(1, !0);
      }, this.changeSpeed + 100) : this.activeIndex == 0 && (this.redirectTimeout2 = setTimeout(() => {
        this.scroll(this.carouselList.length - 2, !0);
      }, this.changeSpeed + 100))), this.startAutoplay(!0);
    },
    changePageByStep(e) {
      let t = this.activeIndex + e;
      t >= this.carouselList.length ? t = 2 : t < 0 && (t = this.carouselList.length - 3), this.change({
        index: t
      });
    },
    triggerChange(e, t) {
      this.paginationTrigger == e && this.change({
        index: t
      });
    },
    prev() {
      this.changePageByStep(-1);
    },
    next() {
      this.changePageByStep(1);
    }
  }
}, cm = { class: "h-carousel" }, fm = ["onClick"], mm = /* @__PURE__ */ m("i", { class: "h-icon-left" }, null, -1), pm = [
  mm
], gm = /* @__PURE__ */ m("i", { class: "h-icon-right" }, null, -1), ym = [
  gm
], bm = ["onMouseover", "onClick"], vm = { key: 1 };
function wm(e, t, i, l, n, s) {
  return a(), h("div", cm, [
    m("div", {
      class: "h-carousel-container",
      style: D({ height: `${i.height}px` })
    }, [
      i.effect == "scroll" ? (a(), h("div", {
        key: i.effect,
        class: "h-carousel-list h-carousel-scroll-list",
        onMouseover: t[0] || (t[0] = (...r) => s.stopAutoplay && s.stopAutoplay(...r)),
        onMouseout: t[1] || (t[1] = (...r) => s.startAutoplay && s.startAutoplay(...r))
      }, [
        (a(!0), h(O, null, E(s.carouselList, (r, o) => (a(), h("div", {
          key: o,
          class: "h-carousel-item",
          onClick: (c) => s.clickTrigger(o, r)
        }, [
          e.$slots.item ? k("", !0) : (a(), h("div", {
            key: 0,
            class: S(["h-carousel-bg", { "h-carousel-bg-pointer": r.link }]),
            style: D({ backgroundImage: `url(${r.image})` })
          }, null, 6)),
          N(e.$slots, "item", {
            carousel: r,
            index: o
          })
        ], 8, fm))), 128))
      ], 32)) : (a(), h("div", {
        key: i.effect,
        class: "h-carousel-list",
        onMouseover: t[3] || (t[3] = (...r) => s.stopAutoplay && s.stopAutoplay(...r)),
        onMouseout: t[4] || (t[4] = (...r) => s.startAutoplay && s.startAutoplay(...r))
      }, [
        I(ut, {
          name: `h-carousel-effect-${i.effect}`
        }, {
          default: z(() => [
            (a(), h("div", {
              key: n.activeIndex,
              class: "h-carousel-item h-carousel-effect-item",
              onClick: t[2] || (t[2] = (r) => s.clickTrigger(n.activeIndex, s.carouselItem))
            }, [
              e.$slots.item ? k("", !0) : (a(), h("div", {
                key: 0,
                class: S(["h-carousel-bg", { "h-carousel-bg-pointer": s.carouselItem.link }]),
                style: D({ backgroundImage: `url(${s.carouselItem.image})` })
              }, null, 6)),
              N(e.$slots, "item", { carousel: s.carouselItem })
            ]))
          ]),
          _: 3
        }, 8, ["name"])
      ], 32)),
      m("div", {
        class: S(["h-carousel-arrow", s.arrowCls])
      }, [
        m("div", {
          class: "h-carousel-arrow-left",
          onClick: t[5] || (t[5] = (...r) => s.prev && s.prev(...r))
        }, pm),
        m("div", {
          class: "h-carousel-arrow-right",
          onClick: t[6] || (t[6] = (...r) => s.next && s.next(...r))
        }, ym)
      ], 2)
    ], 4),
    m("ul", {
      class: S(["h-carousel-pagination", s.paginationCls])
    }, [
      (a(!0), h(O, null, E(i.datas, (r, o) => (a(), h("li", {
        key: o,
        class: S(["h-carousel-pagination-item", { active: s.isActive(o) }]),
        onMouseover: (c) => s.triggerChange("hover", o + 1),
        onClick: (c) => s.triggerChange("click", o + 1)
      }, [
        e.$slots.page ? N(e.$slots, "page", {
          key: 0,
          carousel: r
        }) : (a(), h("span", vm))
      ], 42, bm))), 128))
    ], 2)
  ]);
}
const km = /* @__PURE__ */ V(dm, [["render", wm]]), Mi = function(e, t, i) {
  let l = t.value.length, n = e - l;
  n >= 0 ? (i.innerText = l, f.removeClass(i, "red-color")) : (i.innerText = H.hlang("h.wordcount.warn", [Math.abs(n)]), f.addClass(i, "red-color"));
}, Sm = {
  mounted(e, t) {
    if (f.isNumber(t.value)) {
      let i = t.value, l = document.createElement("p");
      l.innerHTML = `<span><span class='h-wordcount-remain-size'></span> / <span class='h-wordcount-total-size'>${i}</span></span>`, f.addClass(l, "h-wordcount");
      let n = e.parentNode;
      n.insertBefore(l, e);
      let s = n.querySelector(".h-wordcount-remain-size");
      e.remainDom = s, Mi(i, e, s), e.addEventListener("input", () => {
        Mi(i, e, s);
      });
    }
  },
  beforeUnmount(e) {
    let t = e.previousSibling;
    t && f.hasClass(t, "h-wordcount") && t.parentNode.removeChild(t);
  }
}, ji = function(e, t) {
  e.value.length > t && (e.value = e.value.substring(0, t), e.getAttribute("data-alerted") == "0" && R.error(H.hlang("h.wordlimit.warn", [t])), e.dispatchEvent(new Event("input")), e.setAttribute("data-alerted", "1"));
}, Cm = {
  mounted(e, t, i) {
    if (f.isNumber(t.value)) {
      let l = t.value;
      e.setAttribute("data-alerted", "0"), ji(e, l), e.addEventListener("input", () => {
        ji(e, l);
      }), e.addEventListener("blur", () => {
        e.setAttribute("data-alerted", "0");
      });
    }
  }
}, Xe = typeof Map == "function" ? /* @__PURE__ */ new Map() : function() {
  const e = [], t = [];
  return {
    has(i) {
      return e.indexOf(i) > -1;
    },
    get(i) {
      return t[e.indexOf(i)];
    },
    set(i, l) {
      e.indexOf(i) === -1 && (e.push(i), t.push(l));
    },
    delete(i) {
      const l = e.indexOf(i);
      l > -1 && (e.splice(l, 1), t.splice(l, 1));
    }
  };
}(), xm = (e) => {
  const t = document.createEvent("Event");
  return t.initEvent(e, !0, !1), t;
};
function _m(e) {
  if (!e || !e.nodeName || e.nodeName !== "TEXTAREA" || Xe.has(e))
    return;
  let t = null, i = e.clientWidth, l = null;
  function n() {
    const g = window.getComputedStyle(e, null);
    g.resize === "vertical" ? e.style.resize = "none" : g.resize === "both" && (e.style.resize = "horizontal"), g.boxSizing === "content-box" ? t = -(parseFloat(g.paddingTop) + parseFloat(g.paddingBottom)) : t = parseFloat(g.borderTopWidth) + parseFloat(g.borderBottomWidth), isNaN(t) && (t = 0), c();
  }
  function s(g) {
    {
      const p = e.style.width;
      e.style.width = "0px", e.style.width = p;
    }
    e.style.overflowY = g;
  }
  function r(g) {
    const p = [];
    for (; g && g.parentNode && g.parentNode instanceof Element; )
      g.parentNode.scrollTop && p.push({
        node: g.parentNode,
        scrollTop: g.parentNode.scrollTop
      }), g = g.parentNode;
    return p;
  }
  function o() {
    const g = e.style.height, p = r(e), w = document.documentElement && document.documentElement.scrollTop;
    e.style.height = "auto";
    let b = e.scrollHeight + t;
    if (e.scrollHeight === 0) {
      e.style.height = g;
      return;
    }
    e.style.height = b + "px", i = e.clientWidth, p.forEach((d) => {
      d.node.scrollTop = d.scrollTop;
    }), w && (document.documentElement.scrollTop = w);
  }
  function c() {
    o();
    const g = Math.round(parseFloat(e.style.height)), p = window.getComputedStyle(e, null);
    var w = Math.round(parseFloat(p.height));
    if (w !== g ? p.overflowY !== "visible" && (s("visible"), o(), w = Math.round(parseFloat(window.getComputedStyle(e, null).height))) : p.overflowY !== "hidden" && (s("hidden"), o(), w = Math.round(parseFloat(window.getComputedStyle(e, null).height))), l !== w) {
      l = w;
      const b = xm("autosize:resized");
      try {
        e.dispatchEvent(b);
      } catch (d) {
        console.error(d);
      }
    }
  }
  const u = () => {
    e.clientWidth !== i && c();
  }, y = ((g) => {
    window.removeEventListener("resize", u, !1), e.removeEventListener("input", c, !1), e.removeEventListener("keyup", c, !1), e.removeEventListener("autosize:destroy", y, !1), e.removeEventListener("autosize:update", c, !1), Object.keys(g).forEach((p) => {
      e.style[p] = g[p];
    }), Xe.delete(e);
  }).bind(e, {
    height: e.style.height,
    resize: e.style.resize,
    overflowY: e.style.overflowY,
    overflowX: e.style.overflowX,
    wordWrap: e.style.wordWrap
  });
  e.addEventListener("autosize:destroy", y, !1), "onpropertychange" in e && "oninput" in e && e.addEventListener("keyup", c, !1), window.addEventListener("resize", u, !1), e.addEventListener("input", c, !1), e.addEventListener("autosize:update", c, !1), e.style.overflowX = "hidden", e.style.wordWrap = "break-word", Xe.set(e, {
    destroy: y,
    update: c
  }), n();
}
function Tm(e) {
  const t = Xe.get(e);
  t && t.destroy();
}
function Om(e) {
  const t = Xe.get(e);
  t && t.update();
}
let ye = null;
typeof window > "u" || typeof window.getComputedStyle != "function" ? (ye = (e) => e, ye.destroy = (e) => e, ye.update = (e) => e) : (ye = (e, t) => (e && Array.prototype.forEach.call(e.length ? e : [e], (i) => _m(i)), e), ye.destroy = (e) => (e && Array.prototype.forEach.call(e.length ? e : [e], Tm), e), ye.update = (e) => (e && Array.prototype.forEach.call(e.length ? e : [e], Om), e));
const Dt = ye, Nm = {
  mounted(e) {
    Dt(e);
  },
  updated(e) {
    Dt.update(e);
  },
  beforeUnmount(e) {
    Dt.destroy(e);
  }
}, $m = "h-modal", Vm = $.getOption("modal", "hasDivider");
let Ht = {
  middle: !1,
  hasDivider: Vm,
  fullScreen: !1,
  className: ""
};
function Dm(e) {
  let t = $m, i = f.extend(
    {
      hasMask: !0,
      closeOnMask: !0,
      buttons: [
        {
          type: "cancel",
          name: H.hlang("h.common.cancel")
        }
      ]
    },
    Ht,
    e,
    !0
  );
  return (e.hasDivider || Ht.hasDivider) && (i.className += " h-modal-has-divider"), i.fullScreen && (i.className += " h-modal-full-screen"), i.middle && (i.className += " h-modal-container-center"), i.transparent && (i.className += " h-modal-transparent"), i.type ? i.className += ` h-modal-type-${i.type}` : i.className += " h-modal-type-default", i.type = t, dt(i);
}
function Em(e) {
  return new Dm(e);
}
Em.config = (e) => {
  e.middle && (Ht.middle = e.middle);
};
const Et = "h-modal";
let xs = {
  middle: !1
};
function Mm(e = {}) {
  const {
    content: t,
    title: i,
    cancelText: l,
    okText: n,
    onConfirm: s = () => {
    },
    onCancel: r = () => {
    },
    async: o = !1
  } = e;
  let c = {
    type: Et,
    content: `<div style="display: flex"><i class="h-icon-warn yellow-color" style="font-size:28px;vertical-align: -8px;margin-right: 8px"></i><div>${t}</div></div>`,
    buttons: [
      {
        name: l || H.hlang("h.common.cancel"),
        type: "cancel"
      },
      {
        type: "ok",
        name: n || H.hlang("h.common.confirm"),
        style: "primary"
      }
    ],
    events: {
      ok: (y) => {
        if (o) {
          let g = y.$container.querySelector(`.${Et}-footer>button[attr=cancel]`), p = y.$container.querySelector(`.${Et}-footer>button[attr=ok]`);
          g.classList.add("h-btn-loading"), p.classList.add("h-btn-loading"), p.innerHTML = `<i class="h-icon-loading"></i> ${n || H.hlang("h.common.confirm")}`, s((w) => {
            w && y.close(), g.classList.remove("h-btn-loading"), p.classList.remove("h-btn-loading"), p.innerText = n || H.hlang("h.common.confirm");
          });
        } else
          y.close(), s();
      },
      cancel: (y) => {
        y.close(), r();
      }
    },
    title: i,
    className: "h-modal-comfirm h-modal-type-default",
    hasMask: !0,
    closeOnMask: !1,
    hasCloseIcon: !1,
    timeout: 0
  };
  const u = f.extend({}, xs, c, !0);
  return dt(u);
}
function jm(e, t) {
  return t || (t = H.hlang("h.confirm.title")), Mm(e);
}
jm.config = (e) => {
  e.middle && (xs.middle = !0);
};
const qe = "h-notice", Lm = "h-icon";
let _s = {
  timeout: 4e3
};
const Li = {
  info: "info",
  success: "success",
  warn: "warn",
  error: "error"
}, Am = {
  info: "blue",
  success: "green",
  warn: "yellow",
  error: "red"
};
function ht(e) {
  let t = document.querySelector(`.${qe}-container`);
  t || (t = document.createElement("div"), f.addClass(t, `${qe}-container`), document.body.appendChild(t));
  let i = {
    type: qe,
    hasCloseIcon: !0,
    parent: t
  };
  return Object.keys(Li).indexOf(e.type) != -1 ? (e.title && (e.style = `${qe}-has-icon`), e.content = `<i class="${Lm}-${Li[e.type]} ${Am[e.type]}-color"></i>${e.content}`, delete e.type) : e.icon && (e.title && (e.style = `${qe}-has-icon`), e.content = `<i class="${e.icon}"></i>${e.content}`), i = f.extend({}, _s, i, e, !0), dt(i);
}
function Qe(e, t) {
  if (f.isString(e))
    return ht({ content: e, timeout: t });
  if (f.isObject(e))
    return ht(e);
  console.error("Notice params are incorrect:", e);
}
Qe.config = (e) => {
  e.timeout != null && (_s.timeout = e.timeout);
};
function ft(e, t, i) {
  if (f.isString(t))
    return ht({ content: t, timeout: i, type: e });
  if (f.isObject(t))
    return e && (t.type = e), ht(t);
  console.error("Notice params are incorrect:", t);
}
Qe.error = (e, t) => ft("error", e, t);
Qe.warn = (e, t) => ft("warn", e, t);
Qe.success = (e, t) => ft("success", e, t);
Qe.info = (e, t) => ft("info", e, t);
const G = "h-loading";
let J = null;
function Ts(e = "") {
  if (J)
    J.querySelector(`.${G}-text`).innerText = e, f.addClass(J, `${G}-loading`), f.addClass(J, `${G}-visible`);
  else {
    let t = `<div class="${G} ${G}-full-screen">
      <div class="${G}-circular">
        <svg viewBox="25 25 50 50">
          <circle cx="50" cy="50" r="20" fill="none" class="circle"></circle>
        </svg>
        <p class="${G}-text">${e}</p></div>
      </div>
    </div>`, i = window.document.createElement("div");
    i.innerHTML = t, J = i.childNodes[0], document.body.appendChild(J), setTimeout(() => {
      f.addClass(J, `${G}-loading`), f.addClass(J, `${G}-visible`);
    }, 10);
  }
}
function Os(e) {
  Ts(e);
}
Os.close = () => {
  J && (f.removeClass(J, `${G}-loading`), setTimeout(() => {
    f.removeClass(J, `${G}-visible`);
  }, 500));
};
Os.open = (e) => {
  Ts(e);
};
const Mt = "h-loadingbar";
class Bm {
  constructor() {
    this.dom = null, this.timeout = null, this.inner = null, this.width = 0;
  }
  initDom() {
    this.dom = document.createElement("div"), this.dom.innerHTML = `<div class="${Mt}"><div class="${Mt}-inner"></div></div>`, document.body.appendChild(this.dom), this.inner = this.dom.querySelector(`.${Mt}-inner`);
  }
  start() {
    this.dom || this.initDom(), f.addClass(this.inner, "loading"), this.loading(5, 90);
  }
  loading(t, i, l) {
    if (this.width >= i) {
      f.isFunction(l) && l.call(this);
      return;
    }
    let n = t;
    this.width / i > 0.7 && (n = t / 10), this.timeout && clearTimeout(this.timeout), this.width = this.width + n, this.width = Math.min(100, this.width), this.width = Math.max(0, this.width), this.inner.style.width = `${this.width}%`, this.timeout = setTimeout(() => {
      this.loading(t, i, l);
    }, 200);
  }
  success() {
    this.end(1);
  }
  end(t) {
    this.dom || this.initDom(), this.loading(100, 100, () => {
      t || f.addClass(this.inner, "error"), setTimeout(() => {
        f.removeClass(this.inner, "loading"), f.removeClass(this.inner, "error"), this.inner.style.width = "0", this.width = 0;
      }, 200);
    });
  }
  fail() {
    this.end(0);
  }
}
const Ze = new Bm();
function mt() {
  return Ze;
}
mt.start = () => {
  Ze.start();
};
mt.success = () => {
  Ze.success();
};
mt.percent = (e) => {
  Ze.percent(e);
};
mt.fail = () => {
  Ze.fail();
};
function Im(e) {
  let t;
  if (e.nodeName === "SELECT")
    e.focus(), t = e.value;
  else if (e.nodeName === "INPUT" || e.nodeName === "TEXTAREA") {
    let i = e.hasAttribute("readonly");
    i || e.setAttribute("readonly", ""), e.select(), e.setSelectionRange(0, e.value.length), i || e.removeAttribute("readonly"), t = e.value;
  } else {
    e.hasAttribute("contenteditable") && e.focus();
    let i = window.getSelection(), l = document.createRange();
    l.selectNodeContents(e), i.removeAllRanges(), i.addRange(l), t = i.toString();
  }
  return t;
}
function Wm({ text: e, showSuccessTip: t = "\u590D\u5236\u6210\u529F", showFailureTip: i = "\u590D\u5236\u5931\u8D25", successCallback: l, failureCallback: n }) {
  const s = document.body, r = document.documentElement.getAttribute("dir") == "rtl", o = document.createElement("textarea");
  o.style.fontSize = "12pt", o.style.border = "0", o.style.padding = "0", o.style.margin = "0", o.style.position = "absolute", o.style[r ? "right" : "left"] = "-9999px";
  let c = window.pageYOffset || document.documentElement.scrollTop;
  o.style.top = `${c}px`, o.setAttribute("readonly", ""), o.value = e, s.appendChild(o), Im(o);
  try {
    document.execCommand("copy"), t && R.success(t), l && l.call();
  } catch {
    i && R.error(i), n && n.call();
  }
}
function Hm(e, t, i) {
  return $.dictMapping(e, t, i);
}
function Fm(...e) {
  return H.hlang.apply(this, e);
}
const Ai = {
  Affix: js,
  Avatar: Is,
  AutoComplete: Qc,
  BackTop: Ws,
  Badge: Wi,
  Button: em,
  ButtonGroup: lm,
  Breadcrumb: Qs,
  CategoryPicker: _n,
  Checkbox: je,
  hCircle: kl,
  DatePicker: dr,
  DateRangePicker: Sr,
  DateFullRangePicker: jr,
  DropdownCustom: ds,
  DropdownMenu: Wr,
  Form: go,
  FormItem: _o,
  ImageList: Yr,
  Input: Zr,
  Textarea: so,
  Icon: Xr,
  Menu: Yo,
  Modal: bs,
  Notice: ra,
  NumberInput: ec,
  Pagination: Ba,
  Poptip: Ya,
  Progress: Qa,
  Radio: ws,
  Rate: hh,
  Row: sf,
  Cell: rf,
  Search: Kt,
  Select: vs,
  Slider: gh,
  Steps: Eh,
  HSwitch: Ti,
  Switch: Ti,
  SwitchList: qh,
  Skeleton: Zh,
  Space: xf,
  Tag: cd,
  TagInput: yd,
  Timeline: Vf,
  TimelineItem: Mf,
  Transfer: Kf,
  Loading: qt,
  Table: ed,
  TableItem: sd,
  Tabs: hd,
  Tooltip: ct,
  Tree: Cs,
  TreePicker: zd,
  Uploader: Fc,
  TextEllipsis: um,
  Carousel: km,
  HHeader: hf,
  HFooter: ff,
  Content: yf,
  Sider: wf,
  Layout: Of
}, Bi = {
  autosize: Nm,
  wordcount: Sm,
  wordlimit: Cm
}, Ii = {
  dictMapping: Hm,
  hlang: Fm
}, Ns = function(e, t = {}) {
  Ns.installed || (t.locale && H.use(t.locale), t.i18n && H.i18n(t.i18n), Object.keys(Ai).forEach((i) => {
    let l = Ai[i];
    e.component(i, l), e.component(`h-${i.toLocaleLowerCase()}`, l);
  }), Object.keys(Bi).forEach((i) => {
    e.directive(i, Bi[i]);
  }), Object.keys(Ii).forEach((i) => {
    e.config.globalProperties[i] = Ii[i];
  }));
}, Rm = { install: Ns };
export {
  Wm as clipboard,
  jm as confirm,
  Rm as default,
  Hm as dictMapping,
  he as dropdown,
  $ as heyuiConfig,
  Fm as hlang,
  uc as imagePreview,
  Ns as install,
  Os as loading,
  mt as loadingBar,
  R as message,
  Em as modal,
  Qe as notice,
  co as scrollIntoView
};
