const c=typeof Map=="function"?new Map:function(){const e=[],o=[];return{has(n){return e.indexOf(n)>-1},get(n){return o[e.indexOf(n)]},set(n,s){e.indexOf(n)===-1&&(e.push(n),o.push(s))},delete(n){const s=e.indexOf(n);s>-1&&(e.splice(s,1),o.splice(s,1))}}}(),w=e=>{const o=document.createEvent("Event");return o.initEvent(e,!0,!1),o};function m(e){if(!e||!e.nodeName||e.nodeName!=="TEXTAREA"||c.has(e))return;let o=null,n=e.clientWidth,s=null;function g(){const t=window.getComputedStyle(e,null);t.resize==="vertical"?e.style.resize="none":t.resize==="both"&&(e.style.resize="horizontal"),t.boxSizing==="content-box"?o=-(parseFloat(t.paddingTop)+parseFloat(t.paddingBottom)):o=parseFloat(t.borderTopWidth)+parseFloat(t.borderBottomWidth),isNaN(o)&&(o=0),r()}function a(t){{const i=e.style.width;e.style.width="0px",e.style.width=i}e.style.overflowY=t}function v(t){const i=[];for(;t&&t.parentNode&&t.parentNode instanceof Element;)t.parentNode.scrollTop&&i.push({node:t.parentNode,scrollTop:t.parentNode.scrollTop}),t=t.parentNode;return i}function f(){const t=e.style.height,i=v(e),l=document.documentElement&&document.documentElement.scrollTop;e.style.height="auto";let h=e.scrollHeight+o;if(e.scrollHeight===0){e.style.height=t;return}e.style.height=h+"px",n=e.clientWidth,i.forEach(u=>{u.node.scrollTop=u.scrollTop}),l&&(document.documentElement.scrollTop=l)}function r(){f();const t=Math.round(parseFloat(e.style.height)),i=window.getComputedStyle(e,null);var l=Math.round(parseFloat(i.height));if(l!==t?i.overflowY!=="visible"&&(a("visible"),f(),l=Math.round(parseFloat(window.getComputedStyle(e,null).height))):i.overflowY!=="hidden"&&(a("hidden"),f(),l=Math.round(parseFloat(window.getComputedStyle(e,null).height))),s!==l){s=l;const h=w("autosize:resized");try{e.dispatchEvent(h)}catch(u){console.error(u)}}}const y=()=>{e.clientWidth!==n&&r()},p=(t=>{window.removeEventListener("resize",y,!1),e.removeEventListener("input",r,!1),e.removeEventListener("keyup",r,!1),e.removeEventListener("autosize:destroy",p,!1),e.removeEventListener("autosize:update",r,!1),Object.keys(t).forEach(i=>{e.style[i]=t[i]}),c.delete(e)}).bind(e,{height:e.style.height,resize:e.style.resize,overflowY:e.style.overflowY,overflowX:e.style.overflowX,wordWrap:e.style.wordWrap});e.addEventListener("autosize:destroy",p,!1),"onpropertychange"in e&&"oninput"in e&&e.addEventListener("keyup",r,!1),window.addEventListener("resize",y,!1),e.addEventListener("input",r,!1),e.addEventListener("autosize:update",r,!1),e.style.overflowX="hidden",e.style.wordWrap="break-word",c.set(e,{destroy:p,update:r}),g()}function E(e){const o=c.get(e);o&&o.destroy()}function z(e){const o=c.get(e);o&&o.update()}let d=null;typeof window=="undefined"||typeof window.getComputedStyle!="function"?(d=e=>e,d.destroy=e=>e,d.update=e=>e):(d=(e,o)=>(e&&Array.prototype.forEach.call(e.length?e:[e],n=>m(n)),e),d.destroy=e=>(e&&Array.prototype.forEach.call(e.length?e:[e],E),e),d.update=e=>(e&&Array.prototype.forEach.call(e.length?e:[e],z),e));const T=d;export{T as default};
