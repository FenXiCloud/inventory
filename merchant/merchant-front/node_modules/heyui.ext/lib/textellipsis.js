import x from"./directives/tooltip.js";import{resolveDirective as f,openBlock as o,createElementBlock as h,renderSlot as r,withDirectives as d,mergeProps as p,toDisplayString as a,createElementVNode as g,createTextVNode as y}from"vue";import{_ as u}from"./_plugin-vue_export-helper.js";const k={name:"HTextEllipsis",directives:{tooltip:x},emits:["textClick","hide","show"],props:{text:String,height:Number,isLimitHeight:{type:Boolean,default:!0},useTooltip:{type:Boolean,default:!1},tooltipParams:{type:Object,default:()=>{}},textStyle:[String,Object,Array],textClass:[String,Object,Array],more:String},data(){return{keyIndex:0,isHide:!1}},watch:{isLimitHeight(){this.init()},text(){this.init()},height(){this.init()}},mounted(){this.init()},methods:{init(){this.keyIndex+=1;let t=this.$el.querySelector(".h-text-ellipsis-more");t.style.display="none",this.isLimitHeight?this.limitShow():(this.$emit("show"),this.isHide=!1)},textClick(){this.$emit("textClick")},limitShow(){this.$nextTick(()=>{let t=this.$el.querySelector(".h-text-ellipsis-limit-text"),s=this.$el,e=this.$el.querySelector(".h-text-ellipsis-more"),l=1e3;if(t)if(s.offsetHeight>this.height){e.style.display="inline-block";let i=this.text;for(;s.offsetHeight>this.height&&l>0;)s.offsetHeight>this.height*3?t.innerText=i=i.substring(0,Math.floor(i.length/2)):t.innerText=i=i.substring(0,i.length-1),l--;this.$emit("hide"),this.isHide=!0}else this.$emit("show"),this.isHide=!1})}}},S={class:"h-text-ellipsis"},H=["content"],_={class:"h-text-ellipsis-more"};function b(t,s,e,l,i,n){const c=f("tooltip");return o(),h("div",S,[r(t.$slots,"before",{class:"h-text-ellipsis-before"}),d((o(),h("span",p({style:e.textStyle,class:e.textClass},e.tooltipParams,{content:e.text,onClick:s[0]||(s[0]=(...m)=>n.textClick&&n.textClick(...m))}),[(o(),h("span",{key:i.keyIndex,class:"h-text-ellipsis-limit-text"},a(e.text),1)),g("span",_,[y(a(e.more),1),r(t.$slots,"more")])],16,H)),[[c,e.useTooltip&&i.isHide]]),r(t.$slots,"after",{class:"h-text-ellipsis-after"})])}const v=u(k,[["render",b]]);export{v as T};
